
# Fourier_derivative.py

import numpy as np
import matplotlib.pyplot as plt
from numpy.fft import fft, ifft, fftshift, ifftshift, fftfreq
import scipy.io as sio


#%% Read in the Signal

blah = sio.loadmat('interesting_function.mat')
f = blah['f'].flatten()
x = blah['x'].flatten()

N = len(f)
L = x[-1] - x[0]  # The spatial extent of the signal
plt.figure(1)
plt.clf()
plt.plot(x, f, label="f function")


# *** YOUR CODE HERE ***
dt = x[1] - x[0] #* sample spacing in time space
t_fov = N * dt #* field of view in time space
dw = 1 / t_fov #* sample spacing in frequency space
w_fov = 1 / dt #* field of view in frequency space
w = fftfreq(N, dt) #* sample frequncy
F = fft(f) #* Fourier transform
fder = ifft(2 * np.pi * w * 1j * F) #* compute derivative via Fourier transform
plt.plot(x, fder.real, label="f derivative")
plt.legend()
plt.show()
