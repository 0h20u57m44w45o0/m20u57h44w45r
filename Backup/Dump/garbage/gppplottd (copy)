#!/usr/bin/env python3

#***************************************************************************#
#                   Data Operation and Manipulation                         #
#                          <By Huangrui Mo>                                 #
# Copyright (C) Huangrui Mo <huangrui.mo@gmail.com>                         #
# under the terms of the GNU General Public License as published by         #
# the Free Software Foundation, either version 3 of the License, or         #
# (at your option) any later version.                                       #
#***************************************************************************#

#***************************************************************************#
# => Environment configuration
#***************************************************************************#

import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
import artraoptr as optr
import artraart as art
import numpy as np
import itertools

csys = optr.sys_env() #* obtain system and running environment
plt.ioff() #* turn of interactive plotting mode

#***************************************************************************#
# => Parameter configuration <default|option|...|option>
#***************************************************************************#

plist = [] #* plot list, <all cases>
xlist = [] #* x data indices, <0>
ylist = [] #* y data indices, <1>
rlist = [] #* row range, <:>

title = ""
xlabel = "x"
ylabel = "y"
legtxt = [] #* legend text, <case names>
legloc = '' #* <best|(x, y)>, <upper|lower|center> x <right|left|center>

lsty = ['-', ''] #* line style, <solid'-'|dash'--'|dashdot'-.'|dot':'|none''>
axescale = ['', ''] #* [x, y] scale, <linear|log>
mintick = [5, 5] #* minor ticks, <None|number>
axeiso = '' #* axe isoview, <auto|equal|scaled|tight|image>
axelim = [] #* [xmin, xmax, ymin, ymax], <auto>
axeshow = '' #* axe show, <on|off>
grid = [] #* grid show, <False|True>
rect = [] #* [left, bottom, right, top] rectangle area to fit plot, <0, 0, 1, 1>

palette = itertools.cycle(art.colors()[:]) #* iterate over range
markers = itertools.cycle(['o', '+', 'v', 'x', 'd', '*', 's', 'p', '^'])
mfill = [] #* marker fill style, <full|none|top|left>
lw = [] #* line width, <1.5>
ms = [] #* marker size, <7>
figsize = (8, 6) #* figure size, <w/h=4/3>
figdpi = 300 #* resolution in dots per inch
figbox = '' #* slightly adjust figsize to clip space in saving, <None|tight>
figext = ['.pdf', '.jpg'] #* extension for [vectorized, rasterized] output

#***************************************************************************#
# => Process: load data -> plot data -> export figure
#***************************************************************************#

#* obtain case information
with open(csys['procdir'] + csys['cinfo'], 'r') as cin:
    for n in range(4):
        cin.readline()
    cn = int(cin.readline().strip())
    for n in range(3):
        cin.readline()
    cname = [cin.readline().strip() for n in range(cn)] #* case name list
#* plot list iterator
if not plist:
    plist = range(cn)
else:
    if max(plist) >= cn:
        print("warning, plist index out of range, reset to default value...")
        plist = range(cn)
#* x data indices
if not xlist:
    xlist = [0 for n in plist]
else: #* ensure a correct match via broadcasting the last setting
    xlist[len(xlist):] = [xlist[-1] for n in range(len(xlist), len(plist))]
#* y data indices
if not ylist:
    ylist = [1 for n in plist]
else: #* ensure a correct match via broadcasting the last setting
    ylist[len(ylist):] = [ylist[-1] for n in range(len(ylist), len(plist))]
#* row range
if not rlist:
    rlist = slice(None, None, None)
#* legend text list
if not legtxt:
    legtxt = [cname[n] for n in plist]
else: #* ensure a correct match via using case names
    legtxt[len(legtxt):] = [cname[plist[n]] for n in range(len(legtxt), len(plist))]
#* legend location
if not legloc:
    legloc = 'best'
#* line style
if not lsty:
    lsty = ['-' for n in plist]
else: #* ensure a correct match via broadcasting the last setting
    lsty[len(lsty):] = [lsty[-1] for n in range(len(lsty), len(plist))]
#* marker style
    msty = lsty.copy()
    for n, m in enumerate(msty):
        if m:
            msty[n] = '' #* no markers if drawn lines
        else:
            msty[n] = next(markers)
#* marker fill style
if not mfill:
    mfill = ['full' for n in plist]
else: #* ensure a correct match via broadcasting the last setting
    mfill[len(mfill):] = [mfill[-1] for n in range(len(mfill), len(plist))]
#* color
cr = [next(palette) for n in plist]
#* line width
if not lw:
    lw = [1.5 for n in plist]
else: #* ensure a correct match via broadcasting the last setting
    lw[len(lw):] = [lw[-1] for n in range(len(lw), len(plist))]
#* marker size
if not ms:
    ms = [7 for n in plist]
else: #* ensure a correct match via broadcasting the last setting
    ms[len(ms):] = [ms[-1] for n in range(len(ms), len(plist))]

#* processing loop
plt.figure(figsize=figsize, dpi=figdpi)
fig, ax = plt.subplots()
for n, p in enumerate(plist):
    #* obtain case path
    cpath = csys['exdir'] + cname[p]
    #* detect data delimiter
    cdelim = optr.delim_detect(cpath, csys['delimld'])
    #* load case data
    cdata = np.loadtxt(cpath, delimiter=cdelim, usecols=csys['cols'], ndmin=csys['cdim'])
    #* sift data
    x = cdata[rlist, xlist[n]]
    y = cdata[rlist, ylist[n]]
    #* plot
            'color': cr[n], 'linewidth': lw[n], 'linestyle': lsty[n],
            'markeredgewidth': lw[n], 'markeredgecolor':cr[n],
            'marker': msty[n], 'fillstyle': mfill[n], 'markersize': ms[n],
            }

#* additional art entities
#art.circle_patch(ax, fill=True, color='gray')

#* configure labels
if title:
    ax.set_title(title)
ax.set_xlabel(xlabel)
ax.set_ylabel(ylabel)
leg = ax.legend(loc=legloc)

#* configure layout
if not rect:
    rect = None
fig.tight_layout(rect=rect) #* auto adjusts subplot params to fit figure area
if axescale[0]:
    ax.set_xscale(axescale[0])
if axescale[1]:
    ax.set_yscale(axescale[1])
if mintick[0] is not None:
    minloc = ticker.AutoMinorLocator(mintick[0])
    ax.xaxis.set_minor_locator(minloc)
if mintick[1] is not None:
    minloc = ticker.AutoMinorLocator(mintick[1])
    ax.yaxis.set_minor_locator(minloc)
ax.tick_params(which='both', top='off', right='off') #* ticks on axis
if axeiso:
    ax.axis(axeiso)
if axelim:
    ax.axis(axelim)
if axeshow:
    ax.axis(axeshow)
if grid:
    ax.grid(grid)

#* export figure
if not figbox:
    figbox = None
for ext in figext:
    fig.savefig(csys['pldir'] + csys['cplot'] + ext, dpi=figdpi, bbox_inches=figbox)
plt.close(fig)

