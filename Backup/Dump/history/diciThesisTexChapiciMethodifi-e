\chapter{Research Design and Methodology}
\label{cha:method}

To study particle cluster and jet formation via direct simulations, this thesis includes two major scopes: the development of a high-fidelity gas-solid flow solver and the numerical investigation on particle clustering and jetting instabilities in explosively dispersed granular materials.

\section{Solver development}

In resolving the multiscale and multiphase interactions in explosively dispersed granular materials through direct simulation, the principal challenges are associated with fluid-solid interaction, dynamic phase interface, mesh generation and regeneration, multibody contact and collision, complex interfacial condition, and computational efficiency and robustness. Moreover, the presence of high-pressure shock waves further reinforces those challenges. Therefore, in addition to integrating existing numerical techniques, to obtain a capable computational solver also requires developing new mathematical models and numerical methods to bridge the gap between the available tools and remaining problems.

\subsection{Fluid-solid coupling}

A fully coupled fluid-solid interaction algorithm can support the development of a general solver for all the problem domains but usually involves implicit discretization of governing equations and solves large matrix systems by iteration, which imposes stringent conditions on the solution process. In contrast, a partitioned algorithm decouples physical processes in the time domain. Adopting numerical techniques optimized for each problem domain and physical process, a partitioned approach has advantages in flexibility and efficiency \citep{goldman1996n}. 

A partitioned fluid-solid interaction algorithm with second-order temporal accuracy, which is obtained via applying Strang splitting \citep{strang1968construction} to split physical processes, is employed to model the coupling between fluid and solid motions:
\begin{equation} \label{eq:fsi}
    \Vector{U}^{n+1} = \Soptr_{\Des{s}}(\frac{\Delta t}{2})\Soptr_{\Des{f}}(\frac{\Delta t}{2})\Soptr_{\Des{f}}(\frac{\Delta t}{2})\Soptr_{\Des{s}}(\frac{\Delta t}{2}) \Vector{U}^n
\end{equation}
in which $\Vector{U}^{n}$ and $\Vector{U}^{n+1}$ denote the solution vectors of physical quantities at time $t^n$ and $t^{n+1}$, respectively; $\Soptr_{\Des{s}}$ and $\Soptr_{\Des{f}}$ represent the solution operators of solid dynamics and fluid dynamics, respectively.

Traditionally, to reduce the computational load resulting from a symmetric splitting, the group property of the solution operator, $\Soptr(\Delta t_1)\Soptr(\Delta t_2) = \Soptr(\Delta t_1 +\Delta t_2)$, is applied in Strang splitting to concatenate consecutive operators of the same type \citep{strang1968construction, goldman1996n}. Consequently, the algorithmic uniformity is not preserved at the start and end steps of the computation cycle. By observing that a doubled range of the CFL number can be adopted, the present ungrouped form preserves algorithmic uniformity while achieving equivalent overall efficiency for temporal integration or higher efficiency when more than two solution operators are involved.

\subsection{Governing equations and discretization}

\subsubsection{Fluid dynamics}

The motion of fluids is described by the conservative form of the Navier--Stokes equations in Cartesian coordinates: 
\begin{equation}
    \frac{\partial \Vector{U}}{\partial t}+\frac{\partial \Vector{F}_i}{\partial x_i} = \frac{\partial \Vector{F}^{\Des{v}}_i}{\partial x_i}+\Vector{\Phi}
\end{equation}

The vectors of conservative variables $\Vector{U}$, convective fluxes $\Vector{F}_i$, diffusive fluxes $\Vector{F}^{\Des{v}}_i$, and source terms $\Vector{\Phi}$ are as follows:
\begin{equation}
    \Vector{U} =
    \begin{pmatrix}
        \rho\\
        \rho V_j\\
        \rho e_{\Des{T}}
    \end{pmatrix}
    ,\,\,
    \Vector{F}_i =
    \begin{pmatrix}
        \rho V_i\\
        \rho V_i V_j + p \delta_{ij}\\
        (\rho e_{\Des{T}}+p) V_i
    \end{pmatrix}
    ,\,\,
    \Vector{F}^{\Des{v}}_i =
    \begin{pmatrix}
        0\\
        \tau_{ij}\\
        k \frac{\partial T}{\partial x_i} + \tau_{il} V_l
    \end{pmatrix}
    ,\,\,
    \Vector{\Phi} =
    \begin{pmatrix}
        0\\
        f^{\Des{b}}_j\\
        f^{\Des{b}}_l V_l
    \end{pmatrix}
\end{equation}
where $\rho$ is the density, $\Vector{V}$ is the velocity, $e_{\Des{T}} = e +\Vector{V}\cdot\Vector{V}/2$ is the specific total energy, $e$ is the specific internal energy, $p$ is the thermodynamic pressure, $\Tensor{\tau}$ is the viscous stress tensor, $T$ is the temperature, $k$ is the thermal conductivity, $\Vector{f}^{\Des{b}}$ represents external body forces such as gravity, $i$ is a free index, $j$ is an enumerator, $l$ is a dummy index. 

In order to simplify numerical discretization while preserving the principal physics of fluid motion, the current closure of the system is through supplying the Newtonian fluid relation with the Stokes hypothesis
\begin{equation}
    \tau_{ij} = \mu\left(\frac{\partial V_i}{\partial x_j} + \frac{\partial V_j}{\partial x_i} - \frac{2}{3}(\nabla\cdot\Vector{V}) \delta_{ij}\right)
\end{equation}
and the perfect gas law
\begin{equation}
    \begin{gathered}
        p = \rho R T \\
        e = C_v T
    \end{gathered}
\end{equation}
in which $R$ is the specific gas constant, and $C_v$ is the specific heat capacity at constant volume.

The use of Navier--Stokes equations for describing fluid motion provides flexibility in the consideration of viscous effects. When considering viscous flows, the dynamic viscosity, $\mu$, is non-zero and can be determined by the Sutherland viscosity law
\begin{equation}
    \mu = \frac{C_1T^{\frac{3}{2}}}{T+C_2}
\end{equation}
where $C_1=1.458\times10^{-6} \Unit{kg \cdot m^{-1} \cdot s^{-1} \cdot K^{-1/2}}$ and $C_2=110.4 \Unit{K}$ are two constant coefficients. When omitting flow viscosity, $\mu=0$ is then adopted to obtain inviscid flows. Since the primary focus is to solve flow involving irregular, moving, and colliding geometries under shocked flow conditions, the modeling of turbulence and the resolving of boundary layers are not specifically concerned in the present study.

The temporal integration is performed via the second-order or third-order strong stability-preserving (SSP) Runge--Kutta method \citep{shu1988efficient, gottlieb2001strong}. For instance, the third-order one can be described as the following: 
\begin{equation}
    \begin{aligned}
        &\Vector{U}^{(1)} = \Toptr\Vector{U}^n\\
        &\Vector{U}^{(2)} = 3/4\Vector{U}^n+1/4\Toptr\Vector{U}^{(1)}\\
        &\Vector{U}^{n+1} = 1/3\Vector{U}^n+2/3\Toptr\Vector{U}^{(2)}\\
        &\Toptr = (\Matrix{I} + \Delta t \Loptr)
    \end{aligned}
\end{equation}
where $\Matrix{I}$ is the identity matrix, operator $\Loptr = \Loptr_x + \Loptr_y + \Loptr_z$, $\Loptr_x$, $\Loptr_y$, and $\Loptr_z$ represent the spatial operators of $x$, $y$, and $z$ dimension, respectively.

For the system of conservation laws in multidimensional space, the discretization of spatial operators can be conducted using dimension-by-dimension \citep{shu1988efficient} or dimensional-splitting \citep{strang1968construction} approximation. While the former preserves temporal accuracy, the latter has a much less severe stability constraint. To guarantee discrete mass conservation, conservative discretization is applied for all the spatial derivatives. Using the $x$ dimension as an example, the flux derivative at a node $i$ is approximated as
\begin{equation}
    \left. \frac{\partial \Vector{F}}{\partial x} \right|_i = \frac{1}{\Delta x}\left[\hat{\Vector{F}}_{i+\frac{1}{2}}-\hat{\Vector{F}}_{i-\frac{1}{2}}\right]
\end{equation}
where $\Vector{F}$ represents either the convective flux vector or the diffusive flux vector, $\hat{\Vector{F}}_{i+{1}/{2}}$ is a numerical flux at the interface between the discretization interval $\Omega_i=[x_{i-{1}/{2}},x_{i+{1}/{2}}]$ and $\Omega_{i+1}=[x_{i+{1}/{2}},x_{i+{3}/{2}}]$.

In convective flux discretization, the system of equations is projected onto its characteristic fields to locally decompose the vector system into a set of scalar conservation laws. Then, a flux splitting method, such as Lax--Friedrichs splitting \citep{lax1957hyperbolic} or Steger--Warming splitting \citep{steger1981flux}, is conducted on the scalar fluxes to ensure upwinding property
\begin{equation}
    f(u) = f^+(u) + f^-(u), \,\, \frac{\mathrm{d} f^+(u)}{\mathrm{d} u} \ge 0, \,\, \frac{\mathrm{d} f^-(u)}{\mathrm{d} u} \le 0
\end{equation}
where $f$ is a scalar characteristic flux.

Since both the forward flux and backward flux are discretized in conservative form, the discretization of a scalar flux derivative has the form
\begin{equation}
    \left. \frac{\partial f}{\partial x} \right|_i = \frac{1}{\Delta x} \left[ \hat{f}_{i+\frac{1}{2}} - \hat{f}_{i-\frac{1}{2}} \right], \,\, \hat{f}_{i+\frac{1}{2}} = \hat{f}_{i+\frac{1}{2}}^+ + \hat{f}_{i+\frac{1}{2}}^-, \,\, \hat{f}_{i-\frac{1}{2}} = \hat{f}_{i-\frac{1}{2}}^+ + \hat{f}_{i-\frac{1}{2}}^-
\end{equation}

The third-order or fifth-order weighted essentially nonoscillatory (WENO) scheme \citep{jiang1996efficient} is then applied for the reconstruction of numerical fluxes. Since the numerical flux $\hat{f}_{i+{1}/{2}}^+$ and $\hat{f}_{i-{1}/{2}}^-$ are symmetric with respect to $x_i$, only the reconstruction of the former is described herein. The latter can be obtained via replacing all $+$ and $-$ signs in the superscript and subscript of each variable in the equations by the corresponding opposite signs $-$ and $+$, respectively. For the fifth-order WENO scheme, the numerical flux $\hat{f}_{i+{1}/{2}}^+$ has the following form:
\begin{equation}
    \hat{f}_{i+\frac{1}{2}}^{+} = \sum_{n=0}^{N} \omega_{n}^+ q_{n}^+(f_{i+n-N}^+, \dotsc, f_{i+n}^+), \,\, N=(r-1)=2
\end{equation}
where
\begin{equation}
    \begin{gathered}
        q_0^+(f_{i-2}^+, \dotsc, f_{i}^+) = (2f_{i-2}^+ - 7f_{i-1}^+ + 11f_{i}^+) / 6\\
        q_1^+(f_{i-1}^+, \dotsc, f_{i+1}^+) = (-f_{i-1}^+ + 5f_{i}^+ + 2f_{i+1}^+) / 6\\
        q_2^+(f_{i}^+, \dotsc, f_{i+2}^+) = (2f_{i}^+ + 5f_{i+1}^+ - f_{i+2}^+) / 6\\
        \omega_{n}^+ = \frac{\alpha_n^+}{\alpha_0^+ + \dotsb + \alpha_N^+}, \,\, \alpha_n^+ = \frac{C_n}{(\varepsilon + IS_n^+)^2}, \,\, \varepsilon = 10^{-6}\\
        C_0 = \frac{1}{10}, \,\, C_1 = \frac{6}{10}, \,\, C_2 = \frac{3}{10}\\
        IS_{0}^+ = \frac{13}{12}(f_{i-2}^+ - 2f_{i-1}^+ + f_{i}^+)^2 + \frac{1}{4}(f_{i-2}^+ - 4f_{i-1}^+ + 3f_{i}^+)^2\\
        IS_{1}^+ = \frac{13}{12}(f_{i-1}^+ - 2f_{i}^+ + f_{i+1}^+)^2 + \frac{1}{4}(f_{i-1}^+ - f_{i+1}^+)^2\\
        IS_{2}^+ = \frac{13}{12}(f_{i}^+ - 2f_{i+1}^+ + f_{i+2}^+)^2 + \frac{1}{4}(3f_{i}^+ - 4f_{i+1}^+ + f_{i+2}^+)^2
    \end{gathered}
\end{equation}
where $r$ is the number of candidate stencils, $q_n$ are the $r$-th order approximations of $\hat{f}_{i+1/2}$ on the candidate stencils $S_n=(x_{i+n-N},\dotsc,x_{i+n})$, $\omega_{n}$ are the actual weights of $q_n$, which are determined by the smoothness of solution in the candidate stencils $S_n$, as measured by $IS_n$, and $C_n$ are optimal weights to ensure that the convex combination of $q_n$ converges to a $(2r-1)$-th order approximation of $\hat{f}_{i+1/2}$ on the undivided stencil $S=(x_{i-N},\dotsc,x_{i+N})$ in smooth regions.
\begin{figure}[!htbp]
    \centering
    \includegraphics[trim = 0mm 25mm 0mm 18mm, clip, width=0.48\textwidth]{diffusive_flux_demo}
    \caption{A schematic diagram illustrating interfacial diffusive flux reconstruction.}
    \label{fig:diffusive_flux_discretize}
\end{figure}

The second-order central difference discretization is employed for diffusive fluxes. A conservative discretization of the diffusive fluxes involves consecutive differentiation, which may lead to an even-odd decoupling issue \citep{pirozzoli2011numerical, brehm2015locally}. Therefore, the reconstruction function should be carefully devised. In this work, the interfacial flux $\hat{\Vector{F}}^{\Des{v}}_{i+{1}/{2}}$ is reconstructed on the discretized space $[i, i+1] \times [j-1, j+1] \times [k-1, k+1]$, as illustrated in Fig.~\ref{fig:diffusive_flux_discretize}. Let $\phi$ denote a physical quantity in $\Vector{F}^{\Des{v}}$, in order to avoid even-odd decoupling resulting from applying consecutive derivative discretization, the following reconstructions can be adopted:
\begin{equation}
    \begin{aligned}
        \phi_{i+\frac{1}{2}, j, k} &= \frac{\phi_{i, j, k} + \phi_{i+1, j, k}}{2} \\
        \left.\frac{\partial \phi}{\partial x}\right|_{i+\frac{1}{2}, j, k} &= \frac{\phi_{i+1, j, k} - \phi_{i, j, k}}{\Delta x} \\
        \left.\frac{\partial \phi}{\partial y}\right|_{i+\frac{1}{2}, j, k} &= \frac{\phi_{i, j+1, k} + \phi_{i+1, j+1, k} - \phi_{i, j-1, k} - \phi_{i+1, j-1, k}}{4\Delta y} \\
        \left.\frac{\partial \phi}{\partial z}\right|_{i+\frac{1}{2}, j, k} &= \frac{\phi_{i, j, k+1} + \phi_{i+1, j, k+1} - \phi_{i, j, k-1} - \phi_{i+1, j, k-1}}{4\Delta z}
    \end{aligned}
\end{equation}

\paragraph{Computation acceleration}

The conservative discretization of fluxes enables an acceleration technique that can reduce nearly half of the computational work by using the fact that the same interfacial flux is shared by the two neighboring cells or nodes
\begin{equation}
    \hat{\Vector{F}}_{s-\frac{1}{2}} = \hat{\Vector{F}}_{(s-1)+\frac{1}{2}}
\end{equation}
where flux $\Vector{F}$ is either a convective flux or a diffusive flux, and $s$ is one of the $i$, $j$, $k$ index.

Let $\Loptr_s$ denote the spatial operator in the $s$ dimension for a multidimensional problem with dimension-by-dimension approximation, and let $\Soptr_s$ denote the solution operator of the subproblem
\begin{equation}
    \frac{\partial \Vector{U}}{\partial t} = \Loptr_s\Vector{U}^{(s)}
\end{equation}
for a multidimensional problem with dimensional-splitting. When computing $\Loptr_s$ or $\Soptr_s$, if the $s$ index is arranged as the innermost loop of the spatial sweep, then only the interfacial flux $\hat{\Vector{F}}_{s+1/2}$ is always required to be computed, while $\hat{\Vector{F}}_{s-1/2}$ can be inherited from the previous node $(s-1)$ unless the node $(s-1)$ is a boundary node. If $(s-1)$ is a boundary node, then $\hat{\Vector{F}}_{s-1/2}$ requires to be computed. When the type of each computational node is classified in advance, the implementation of this acceleration technique is straightforward, and the computational overhead of the implementation is one single conditional statement.

\subsubsection{Solid dynamics}

The motion of solids is governed by the equation system comprising the Newton's second law of translational motion and the Euler equations of rotational motion:
\begin{equation}
    \frac{\mathrm{d} \Vector{U}}{\mathrm{d} t} = \Vector{\Phi}
    ,\,\,
    \Vector{U} =
    \begin{pmatrix}
        \Vector{V}\\
        \Vector{x}_{\Des{c}}\\
        \Matrix{I}_{\Des{c}} \Vector{\omega}\\
        \Vector{\theta}
    \end{pmatrix}
    ,\,\,
    \Vector{\Phi} =
    \begin{pmatrix}
        \frac{1}{m}\int\limits_{\partial\Omega} \unitVector{n} \cdot (-p \unitTensor{I} + \Tensor{\tau}) \, \mathrm{d}S + \Vector{g} \\
        \Vector{V}\\
        \int\limits_{\partial\Omega} (\Vector{x} - \Vector{x}_{\Des{c}}) \times [\unitVector{n} \cdot (-p \unitTensor{I} + \Tensor{\tau})] \, \mathrm{d}S\\
        \Vector{\omega}
    \end{pmatrix}
\end{equation}
where $\Vector{x}$ is the position vector of spatial points, $\Omega$ is the spatial domain occupied by a solid, $\Vector{x}_{\Des{c}}$ is the position vector of the solid centroid, $\Vector{\theta}$ is the orientation (vector of Euler angles) of the solid, $\Vector{V}$ and $\Vector{\omega}$ are the translational and angular velocities of the solid, respectively, $m$ is the mass of the solid, $\Matrix{I}_{\Des{c}}$ is the moment of inertia matrix, $\unitVector{n}$ is the unit outward surface normal vector, $p$ and $\Tensor{\tau}$ are the pressure and viscous stress tensor field exerted on the solid surface via fluid, respectively, and $\Vector{g}$ is the body force per unit mass, such as gravitational acceleration, exerted by external fields.

The time integration of the ordinary differential equation system is performed via a second-order Runge--Kutta scheme:
\begin{equation}
    \begin{aligned}
        &\Vector{k}_1 = \Vector{\Phi}(t^n, \Vector{U}^n)\\
        &\Vector{k}_2 = \Vector{\Phi}(t^n + \Delta t, \Vector{U}^n + \Delta t \Vector{k}_1)\\
        &\Vector{U}^{n+1} = \Vector{U}^n + \Delta t(\Vector{k}_1 + \Vector{k}_2) / 2
    \end{aligned}
\end{equation}

\subsection{Interface description and evolution}

Interface description, interface evolution, and interface boundary treatment are three fundamental problems for solving flow involving dynamic phase interfaces \citep{hirt1981volume, saurel2001multiphase, prosperetti2009computational}. A variety of interface description methods, which largely determine the choice of interface evolution algorithm, have been successfully implemented in computing multiphase flows. These methods are frequently categorized into two groups: interface-capturing methods and interface-tracking methods.

In interface-capturing methods, such as volume of fluid methods \citep{hirt1981volume} and level-set methods \citep{osher1988fronts}, the information of an interface, for instance, its spatial position, is embedded in and later can be reconstructed from a field function. The field function is advected either on an Eulerian grid \citep{osher1988fronts, osher2001level} or a Lagrangian grid \citep{enright2002hybrid, hieber2005lagrangian} to evolve moving interfaces. In interface-tracking methods, such as front-tracking methods \citep{tryggvason2001front}, an interface is always explicitly described and evolved by a Lagrangian grid. The application of an Eulerian level-set method and a Lagrangian front-tracking method for the description of an interface in a computational domain is illustrated in Fig.~\ref{fig:interface_description}.
\begin{figure}[!htbp]
    \centering
    \begin{subfigure}[b]{0.48\textwidth}
        \includegraphics[width=\textwidth]{level_set_demo}
        \caption{}
        \label{fig:level_set_demo}
    \end{subfigure}%
    ~
    \begin{subfigure}[b]{0.48\textwidth}
        \includegraphics[width=\textwidth]{front_tracking_demo}
        \caption{}
        \label{fig:front_tracking_demo}
    \end{subfigure}%
    \caption{Schematic diagrams of interface description methods. (a) Eulerian level-set method. (b) Lagrangian front-tracking method. [Nomenclature: $\Omega$, a computational domain; $\Gamma$, an interface in the computational domain; $\tilde{\Omega}$, the interface enclosed open region; $\varphi$, a scalar field function.]}
    \label{fig:interface_description}
\end{figure}

In a volume of fluid method, the volume fraction of one material phase in each computational cell is adopted as the field function and is generally advected on an Eulerian grid to identify and evolve the phase interface. A geometrical reconstruction using the volume fraction is employed to rebuild the phase interface. While volume of fluid methods possess good properties such as volume conservation, exactly locating the interfacial points and computing interfacial quantities, such as surface normal or surface tension, are generally considered difficult.

In a level-set method, a node-based smooth scalar function whose zero-contour represents one phase interface is employed as the field function and is either advected on an Eulerian grid \citep{osher1988fronts, osher2001level} or a Lagrangian grid \citep{enright2002hybrid, hieber2005lagrangian}. For instance, in a computational domain $\Omega$, the interface $\Gamma(t) = \partial \tilde{\Omega}$ of an open region $\tilde{\Omega} \subset \Omega$ can be embedded as the zero level-set of a signed distance function \citep{baerentzen2005signed, jones20063d}, $\varphi(\Vector{x},t)$: $\Set{R}^3 \to \Set{R}$,
\begin{equation} \label{eq:embedinterfacels}
    \Gamma(t) = \{\Vector{x} \in \Omega : \ \varphi(\Vector{x},t) = 0\}
\end{equation}
where the level-set function $\varphi(\Vector{x},t)$ has the following properties:
\begin{equation} \label{eq:lsproperty}
    \begin{cases}
        \varphi(\Vector{x},t) > 0, \ & \Vector{x} \in \tilde{\Omega} \\
        \varphi(\Vector{x},t) \le 0, \ & \Vector{x} \notin \tilde{\Omega} 
    \end{cases}
\end{equation}
Suppose $\Vector{x}(t)$ is a point trajectory on $\Gamma(t)$ evolving with $\Vector{V} = \dot{\Vector{x}}(t)$, then,
\begin{equation} \label{eq:evolveequationofls}
    \varphi(\Vector{x}(t),t) = 0
\end{equation}
Differentiate with respect to $t$ \citep{peng1999pde}, yields,
\begin{equation} \label{eq:evolvequationoflsdf}
    \frac{\partial \varphi}{\partial t} + \Vector{V} \cdot \nabla \varphi = 0, \ t > 0; \ \varphi(\Vector{x},0) = \varphi_0(\Vector{x})
\end{equation}

A level-set method provides convenient normal calculation and easy treatment for geometry with topological changes. However, accurate computation of interfacial physics is not straightforward, and mass conservation is generally not preserved.

A front-tracking method explicitly tracks interfaces by individual Lagrangian grids such as triangulated meshes and provides minimum numerical diffusion \citep{tryggvason2001front, tryggvason2011direct}. However, as interfaces are tracked by connected marker points, restructuring the deforming front for resolution maintenance or accounting for topological changes will inevitably modify the connectivity of maker points. The modification of topological connectivity involves complex operations and is the primary disadvantage of a front-tracking method \citep{tryggvason2001front}. 

In the currently developed flow solver that mainly concerns non-deformable solids, interface description and evolution are conducted using the front-tracking method \citep{tryggvason2001front}. Therefore, interfaces are explicitly tracked via individual Lagrangian grids such as triangulated facets, and the evolution of interfaces is governed by the laws of solid motion.

\subsection{Multidomain node mapping and multibody collision}

Complex and dynamic fluid-solid systems arise in many applications such as fluidized bed \citep{glowinski2001fictitious, van2008numerical}, blood flow \citep{peskin1972flow}, particle-added explosives \citep{zhang2001explosive, das2017sharp}, aerodynamic flow \citep{murman2003simulations, anderson2015aerodynamic, chiew2018efficient}, and computer graphics \citep{guendelman2003nonconvex, robinson2008two}. These systems usually involve interactions that comprise the coupled motions of solid and fluid flow. When a predictive modeling approach that resolves the fluid-solid interfaces is employed, in addition to addressing the coupled fluid-solid and solid-solid interactions, one inherent challenge can be the numerical discretization complicated by a set of irregular and moving geometries.

The development of Cartesian-grid methods \citep{peskin1972flow, fedkiw1999non, leveque1997immersed, sethian2000structural, gilmanov2003general, wang2011algorithms} has provided a feasible way to enforce boundary conditions at phase interfaces that are not conforming to the computational grid, which can effectively simplify the grid generation for irregular geometries and grid regeneration for moving geometries \citep{mittal2005immersed, sotiropoulos2014immersed}. In addition, a solid object immersed in the computational grid can be described by the STereoLithography (STL) representation, which approximates the object as a closed triangulated surface and is a standard format for rapid prototyping and computer-aided design (CAD) systems. When equipped with a suitable Cartesian grid-based numerical framework, the STL represented solid can be directly inputted into the numerical solver without the need of CAD/CFD geometric translations to effectively enable automated mesh generation and numerical solution \citep{aftosmis1998robust, iaccarino2003immersed, murman2004automated}.

In applications involving multiple independent and irregular solid bodies, as each immersed body occupies a corresponding spatial region, the computational domain is therefore segmented into a set of subdomains. The subsequent implementation of numerical discretization and boundary conditions requires a node map that correctly classifies the type and region of computational nodes and identifies domain boundaries \citep{iaccarino2003immersed, zhang2014immersed, das2017sharp}. In addition, when the solids move in space, the requirement for node remapping also arises during the solution process. For problems without the need of differentiating a solid domain from the other solid domains, a binary node map that distinguishes fluid and solid domains through flagging the nodes inside any solid as $0$ and nodes outside the solids as $1$, or vice versa, has been popularly utilized to aid the enforcement of boundary conditions at solid boundaries \citep{iaccarino2003immersed, sambasivan2009ghostb, kapahi2013three, zhang2014immersed}. When further considering interactions such as collisions among solids or different material properties and/or boundary conditions for some solid domains, uniquely tracking and identifying each solid domain are then necessary, for which a possible solution can be employing an individual binary node map for each solid.

In computing a fluid-solid system with dense solids, collisions among solids can exert a strong influence on the stresses in the fluid-solid mixture \citep{walton1993numerical}. Therefore, collision modeling can be an essential element. Models based on experimental correlations \citep{walton1993numerical, glowinski1999distributed, moreno20123d} often have limited description for flow with dense-to-dilute transitions. Short-range repulsive-force collisions \citep{hu2001direct, glowinski2001fictitious} usually consider the position of solids and omit size and shape effects. An interface-resolved collision model can provide a more comprehensive description of collision dynamics and thus a wider applicability. Nonetheless, additional challenges from collision detection and response are introduced and need to be addressed.

For each object in a solid system, collision detection is to determine the collision status of the current solid with regard to other solids, which can include colliding or non-colliding state, the list of colliding solids, and the line of impact for each colliding pair. Collision response is to solve the post-collision velocity under a detected collision status. In a system of moving solids, simultaneous multibody collisions are much less common than binary collisions. Nonetheless, when the system contains dense solids with spherical geometries or with sustained contacts among solids to transmit impulses, the presence of multibody collisions can increase greatly. Remaining as an unsolved problem \citep{ivanov1995multiple}, multibody collision is often approximated by sequential pairwise collisions \citep{gidaspow1994multiphase, guendelman2003nonconvex, brilliantov2010kinetic}. Due to sequential collision, a temporal priority can be introduced into pairwise collisions in the process of choosing which pair collides first, and the collision process may no longer be deterministic.

In collision detection, when the surfaces of solids are only explicitly represented by triangulated meshes, checking every solid against every other solid can be inefficient if the number of solids is large and the geometry is complex. Considerable research has been devoted to optimizing the problem with strategies focusing on hierarchical object representation, orientation-based pruning criteria, spatial partitioning schemes, and distance computation algorithms \citep{lin1998collision, jimenez20013d, guendelman2003nonconvex, wald2007ray}. A multilevel algorithm that integrates temporal coherence exploitation, pairwise pruning, and exact pairwise collision-detection techniques can effectively reduce the collision-detection operations for a dense solid system with convex shapes but can still be expensive for non-convex objects \citep{jimenez20013d, ericson2004real}. Employing implicit surfaces defined by field functions such as signed distance functions has shown success in collision-related modeling \citep{jones20063d, guendelman2003nonconvex, kapahi2013three}. While triangulated surface representation is used for normal calculation and the determination of the line of impact, a signed distance function per solid object can map the point-inclusion state for each computational node with regard to the solid object. As a result, using the layer of nodes that is nearest to the zero isocontour of a signed distance function as sample points, the collision status of a solid object can be determined by testing the values of the sample points with regard to the signed distance functions of other solids \citep{guendelman2003nonconvex}. Since the surface resolution of implicitly defined surfaces is proportional to the grid resolution for field functions, high accuracy can be obtained when a well-resolved grid is employed.

Considering that using a binary node-mapping function for a multidomain problem usually requires one field function per object and can consume memory that is proportional to the number of involved solids, the development of a field function that can compress the multidomain node mapping information into a single field to reduce memory requirement can be useful. To facilitate the solution of complex and dynamic fluid-solid systems on Cartesian grids, an integer-type field function that solves multidomain node mapping is proposed in Chapter~\ref{cha:field}. For a Cartesian-grid-discretized computational domain segmented by a set of solid bodies, compared with a binary node-mapping function that produces node mapping information using one field function per subdomain, the proposed field function can uniquely track all the subdomains with multiple layers of interfacial nodes using only one integer field in total. As a result, the present field function enables single-integer-based multidomain node mapping, efficient node remapping, linear-time collision detection, and expedient surface force integration.

\subsection{Interface boundary treatment}

Fluid-solid interaction involving complex geometric settings is an active field of research and development, owing to the ubiquitous presence of fluid-solid interaction phenomena and the great difficulty in tackling those problems via mathematical modeling. To solve flow involving irregular and moving geometries, one of the main challenges is related to enforcing boundary conditions.

In recent years, Cartesian grid-based boundary treatment methods such as embedded boundary methods \citep{wang2011algorithms, wang2015computational}, ghost fluid methods \citep{fedkiw1999non, fedkiw2002coupling}, immersed interface methods \citep{leveque1997immersed, sethian2000structural}, and immersed boundary methods \citep{peskin1972flow} have gained increasing popularity in interface boundary treatment \citep{wang2004extended, mori2008implicit, liao2012simulations, kapahi2013three, uddin2014cartesian, kempe2015imposing, schwarz2016immersed}. As an attractive alternative to the arbitrary Lagrangian--Eulerian method \citep{hirt1974arbitrary}, in which a body-conformal grid following the movement of phase interfaces is employed, Cartesian grid-based methods are able to solve problems with complex interfaces on a fixed Cartesian grid, as illustrated in Fig.~\ref{fig:cartesian_domain_demo}. Benefiting from the use of a Cartesian gird, grid generation is greatly simplified, and the per-grid-point computation exempts from operations associated with grid topology or transformations. Since the main data structures for numerical computation are simple arrays, the memory requirement is largely reduced, and high-order spatial discretization schemes are easy to implement \citep{mittal2005immersed}.
\begin{figure}[!htbp]
    \centering
    \includegraphics[width=0.8\textwidth]{cartesian_domain_demo}
    \caption{A schematic diagram illustrating an immersed boundary in a Cartesian grid. [Nomenclature: $\Omega_1$, domain of phase $1$; $\Omega_2$, domain of phase $2$; $\partial \Omega_2$, the boundary of phase $2$.]}
    \label{fig:cartesian_domain_demo}
\end{figure}

Extensions of the immersed boundary method, which was originally introduced by \citet{peskin1972flow}, have been continuously developed to improve the numerical properties of the method, particularly in aspects related to interface resolution, stability constraints, mass conservation, computational efficiency and robustness \citep{peskin2002immersed, mittal2005immersed, sotiropoulos2014immersed}. 

To simplify numerical discretization and relax stability constraints, \citet{yusof1997combined} and \citet{fadlun2000combined} proposed the direct forcing immersed boundary method, in which boundary forces are implicitly imposed via flow reconstruction. \citet{balaras2004modeling} later improved the reconstruction procedure of the direct forcing approach and applied to large-eddy simulations. Integrating ideas from the ghost fluid method \citep{fedkiw1999non, fedkiw2002coupling} and the direct forcing method \citep{fadlun2000combined}, \citet{tseng2003ghost} systematically developed a polynomial reconstruction-based ghost-cell immersed boundary method to further increase implementation flexibility while maintaining sharp interfaces. \citet{kapahi2013three} proposed a least squares interpolation approach and applied to solving impact problems. Employing the adaptive mesh refinement technique for resolving boundary layers, \citet{brehm2015locally} developed a locally stabilized immersed boundary method and applied to simulating the laminar to turbulent transition process on no-slip walls.

For a direct forcing immersed boundary method, its robustness highly depends on the numerical stability and stencil adaption capability of the interpolation method used \citep{tseng2003ghost, gao2007improved, kapahi2013three}. Polynomial reconstruction-based methods involve constructing linear systems on neighboring stencils of the interpolated node. When the stencil nodes are not well distributed in space, the resulting linear systems may suffer from numerical singularities \citep{tseng2003ghost, gao2007improved}. Additionally, a fixed minimum number of stencil nodes is needed to avoid under-determined linear systems. Therefore, special treatments are required when strongly concave or convex interfaces exist \citep{gao2007improved, kapahi2013three}. To enhance numerical stability and stencil adaption capability, the idea of using inverse distance weighting interpolation was firstly introduced by \citet{tseng2003ghost}, and a hybrid Taylor series expansion / inverse distance weighting approach was later developed by \citet{gao2007improved} for flow with no-slip walls.

In addition to numerical stability and stencil adaption capability, being able to enforce different types of boundary conditions in a straightforward and consistent manner is another vital factor in obtaining an efficient, accurate, and robust immersed boundary method, since a variety of boundary conditions are required to be repeatedly enforced on numerical boundaries. For instance, in solving Navier--Stokes equations, constant temperature at a wall and velocity at a no-slip wall have Dirichlet boundary conditions, pressure at a wall and temperature at an adiabatic wall have Neumann boundary conditions, and velocity at a slip wall has a type of Cauchy boundary conditions.

Excluding the Dirichlet boundary conditions in which boundary values are determined and known, the enforcement of other types of boundary conditions, particularly the Cauchy type of boundary conditions, for immersed boundaries demands considerable efforts \citep{crockett2011cartesian, kempe2015imposing, schwarz2016immersed}. \citet{kempe2015imposing} devised a numerical implementation of the slip-wall boundary conditions in the context of immersed boundary methods. However, the realization is not straightforward due to its complexity \citep{kempe2015imposing}. In addition, most direct forcing immersed boundary methods require constructing and solving a designated linear system for each type of boundary conditions. Therefore, to enforce a variety of boundary conditions in a straightforward and consistent manner is beneficial but can be challenging.

Employing the direct forcing approach, Chapter~\ref{cha:ibm} develops an immersed boundary method via devising a second-order three-step flow reconstruction scheme. The developed method can enforce the Dirichlet, Neumann, Robin, and Cauchy boundary conditions in a straightforward and consistent manner, and is able to provide efficient, accurate, and robust boundary treatment for solving flow with arbitrarily irregular and moving geometries on Cartesian grids.

\section{Clustering and jetting instability investigation}

After being validated for solving gas-solid flow with irregular, moving, and colliding non-deformable granular bodies, the developed interface-resolved direct simulation framework is then applied to the investigation of particle clustering and jetting instabilities in explosively dispersed granular materials. In order to closely resemble realistic packing of payloads, the numerical investigation considers granular payloads with stochastic morphologies. A set of cases that cover a variety of randomly generated stochastic payloads, burster states, and coefficients of restitution for pairwise collisions are designed, solved, and analyzed in Chapter~\ref{cha:jet} to help understand the particle clustering and jetting dynamics in explosively dispersed granular materials.

