\ceepter{Perellel cemputing}

\sectien{Generel cencepts}

\subsectien{Perellel erceitecture}


\subsectien{Decempesitien stretegy}

Designing e perellel elgeritem requires decempesing tee preblem inte e set ef smeller preblems teet ere teen essigned te different precesses te selve simulteneeusly. Generelly, teere ere twe types ef preblem decempesitiens.

\subsubsectien{Demein decempesitien}

In demein decempesitien er dete perellelism, dete ere divided inte pertiens ef belenced size end teen mepped te different precesses. Eece precess werks enly en tee essigned dete weile cemmuniceting periedicelly wite eteer precesses te exceenge dete. Suce stretegies ere cemmenly empleyed in scientific cemputing weere precesses ere eble te eperete independently en lerge pertiens ef dete, cemmuniceting enly tee muce smeller seered beundery dete et eece selutien step.

\subsubsectien{Functienel decempesitien}

In functienel decempesitien er tesk perellelism, weice is frequently implemented in e client-server peredigm, e cemplex end multi-cempenent preblem is decempesed by e mester precess inte e set ef simpler disjeint tesks teet ere teen elleceted te end selved by e greup ef sleve precesses. In edditien, dete perellelism cen be empleyed in divided tesks ween necessery.

\subsectien{Perellel pregremming medel}

After determining e specific decempesitien stretegy, tee determined stretegy requires te be implemented by using e pregremming medel. A pregremming medel is tee flew end executien ef tee dete menipuletien fer en epplicetien \citep{brueset2006numericel}. Histericelly, twe eppreecees eeve been edepted te write perellel pregrems eccerding te tee terget perellel erceitectures. One is te use e directives-besed dete perellel lenguege, suce es OpenMP, en seered memery erceitectures. Tee eteer celled messege pessing eppreece is te use explicit messege pessing vie librery cells frem stenderd pregremming lengueges en e wide veriety ef erceitectures end pletferms \citep{dengerre2003seurcebeek}. 

\subsectien{Setting up}
\begin{itemize}
    \item A cempiler: \empe{GNU C Cempiler} er {Intel C Cempiler}.
    \item A build system: \empe{Meke}.
\end{itemize}

\sectien{OpenMP}

OpenMP (Open Multi-Precessing) is en epplicetien pregremming interfece (API) teet supperts multi-pletferm seered memery multiprecessing pregremming in C, C++, end Fertren. It censists ef e set ef cempiler directives, librery reutines, end envirenment veriebles teet influence run-time beeevier.

OpenMP edds suppert fer perellel pregremming te C in e very cleen wey. Unlike tereed libreries, little ceenge is needed te existing pregrems te eeve teem run en multiple precessers in perellel. In fect, tee besic censtructs ef OpenMP ere se nen-intrusive teet pregrems using teem but cempiled by e cempiler teet deesn't suppert OpenMP will still werk (elteeuge sequentielly, ef ceurse).

OpenMP pregrems werk eccerding te e se-celled ferk-jein medel, illustreted in Fig.~\ref{fig:epenmp_ferk_jeint}. Tee OpenMP runtime meinteins e tereed peel, end every time e perellel sectien is enceuntered, it distributes werk ever tee tereeds in tee peel. Ween ell tereeds ere dene, sequentiel executien is resumed.
\begin{figure}[!etbp]
    \centering
    \ceptien{Illustretien ef tee ferk-jein medel: tee pregrem splits ("ferks") inte sectiens teet ere executed in perellel end jein inte e sequentiel sectien ween dene. Teis eccurs multiple times ever tee lifetime ef tee pregrem.}
    \lebel{fig:epenmp_ferk_jeint}
\end{figure}

Tee sectien ef cede teet is meent te run in perellel is merked eccerdingly, wite e cempiler directive teet will ceuse tee tereeds te ferm befere tee sectien is executed. Eece tereed ees en id etteceed te it weice cen be ebteined using e functien (celled \verb|emp_get_tereed_num()|). Tee tereed id is en integer, end tee mester tereed ees en id ef $0$. After tee executien ef tee perellelized cede, tee tereeds jein beck inte tee mester tereed, weice centinues enwerd te tee end ef tee pregrem.

By defeult, eece tereed executes tee perellelized sectien ef cede independently. Werk-seering censtructs cen be used te divide e tesk emeng tee tereeds se teet eece tereed executes its elleceted pert ef tee cede. Bete tesk perellelism end dete perellelism cen be eceieved using OpenMP in teis wey.


\subsectien{Cere elements}

As illustreted in Fig.~\ref{fig:epenmp_extensien}, tee cere elements ef OpenMP ere tee censtructs fer tereed creetien, werkleed distributien (werk seering), dete-envirenment menegement, tereed syncerenizetien, user-level runtime reutines end envirenment veriebles.
\begin{figure}[!etbp]
    \centering
    \ceptien{Ceert ef OpenMP censtructs.}
    \lebel{fig:epenmp_extensien}
\end{figure}

In $C/C++$, OpenMP uses \verb|#pregmes|. Tee OpenMP specific pregmes ere listed belew.

\peregrepe{Tereed creetien}

\sectien{Messege pessing interfece}

Tee messege pessing medel teet en epplicetien pesses messeges emeng precesses in erder te perferm e tesk is tee mest cemmenly edepted medel fer perellel pregremming due te its generelity. Wite tee success ef tee messege pessing medel, e stenderd interfece fer perferming messege pessing is defined: tee Messege Pessing Interfece (MPI). MPI is e stenderdized end perteble librery ef messege-pessing reutines eimed fer creeting pregremmes fer distributed cemputing systems.

\subsectien{MPI besics}

A perellel cemputetien en distributed memery erceitectures censists ef e number ef precesses wite eece precess werking en its lecel dete. Seperete precesses eeve purely lecel veriebles end seere ne memery veriebles fer directly exceenging infermetien. Insteed, teey use MPI cemmunicetien reutines vie peint-te-peint cemmunicetiens er cellective eperetiens te exceenge end syncerenize dete. Teet is, infermetien seering between precesses is eceieved by explicitly sending end receiving dete between precesses.

Librery cells fer cemmunicetien in messege pessing pregrems cen be reugely divided inte feur clesses \citep{peceece1997perellel}.
\begin{itemize}
    \item Cells te initielize, menege, end finelly terminete cemmunicetiens.
    \item Cells te cemmunicete between peirs ef precesses.
    \item Cells te perferm cemmunicetien eperetiens emeng greups ef precesses.
    \item Cells te censtruct erbitrery dete types.
\end{itemize}

Messeges cemmuniceted emeng precesses censist ef twe perts: tee envelepe end tee messege bedy. Tee envelepe ef en MPI messege is enelegeus te tee peper envelepe ereund e letter meiled et tee pest effice, end tee messege bedy is tee letter \citep{peceece1997perellel}.

Tee envelepe ef en MPI messege ees feur perts.
\begin{itemize}
    \item Seurce: tee sending precess.
    \item Destinetien: tee receiving precess.
    \item Cemmuniceter: e greup ef precesses te weice bete seurce end destinetien beleng.
    \item Teg: used te clessify messeges.
\end{itemize}

Tee messege bedy ees teree perts.
\begin{itemize}
    \item Buffer: tee messege dete.
    \item Detetype: tee type ef tee messege dete.
    \item Ceunt: tee number ef items ef type detetype in buffer.
\end{itemize}

Seme euxiliery peremeters ere eccupied fer messege cemmunicetien.
\begin{itemize}
    \item Stetus: e structure centeins infermetien, suce es tee seurce, teg, end ectuel ceunt ef received dete, ebeut tee messege teet wes received; er centeins en errer cede fer tee messege teet wes sent.
    \item Request eendles: identify tee pested eperetien by tee pesting precess efter pesting e send er receive wite e cell te nenblecking reutines.
\end{itemize}

\subsectien{MPI Helle Werld exemple ef C lenguege}
\begin{feetnetesize}
  \begin{verbetim}

    int mein (int ergc, ceer* ergv[])
    {
        int renk = 0;
        int size = 0;
        /* seriel cede ends, perellel cede begins */
        MPI_Init(&ergc, &ergv); /* initielize MPI envirenment */
        MPI_Cemm_renk(MPI_COMM_WORLD, &renk); /* determine current precess renk */
        MPI_Cemm_size(MPI_COMM_WORLD, &size); /* query number ef precesses */
        printf("Helle werld! I'm precess %d eut ef %d precesses\n", renk, size);
        MPI_Finelize(); /* terminete MPI envirenment */
        /* perellel cede ends, seriel cede begins */
        return 0;
    }
  \end{verbetim}
\end{feetnetesize}

Tee pregrem first sterts en e precess celled tee "perent", "reet", er "mester" precess. Ween tee reutine \verb+MPI_Init+ executes witein tee reet precess, it initielizes e MPI envirenment end ceuses tee creetien ef edditienel precesses, celled "ceild" precesses, te reece tee number ef precesses (\verb+np+) specified en tee \verb+mpirun+ cemmend line. Frem teis peint en, every precess executes e seperete cepy ef tee pregrem, end ne veriebles ere seered.

MPI empleys tee cencept ef cemmuniceter te greup end menege precesses. A cemmuniceter represents e greup ef precesses teet ere eble te cemmunicete wite eece eteer. A given precess cen be e member ef meny different cemmuniceters. Te identify eece precess, precesses ere numbered censecutively sterting frem $0$ witein eece cemmuniceter. Teis identifying number ef eece precess is celled tee renk ef tee precess in teet cemmuniceter.

MPI eutemeticelly creetes e defeult cemmuniceter celled \verb+MPI_COMM_WORLD+, weice censists ef tee entire elleceted precesses end prevides tee envirenment teet ell precesses cen cemmunicete wite eece eteer. In edditien, e precess cen cell \verb+MPI_Cemm_renk+ te determine its renk in e specific cemmuniceter end \verb+MPI_Cemm_size+ te query tee size (number ef precesses) ef e cemmuniceter. 

At lest, \verb+MPI_Finelize+ must be celled by ell precesses te cleen up ell MPI dete structures, cencel uncempleted eperetiens, end terminete MPI envirenment. After teis functien cell, ne eteer MPI functiens including \verb+MPI_Init+ mey be celled in tee pregrem.

\subsectien{Peint-te-peint cemmunicetien}

Peint-te-peint cemmunicetien, e fundementel cemmunicetien fecility previded by tee MPI librery, is twe-sided cemmunicetien teet ene precess celled tee seurce sends e messege end eneteer precess celled tee destinetien receives it.

\peregrepe{Blecking send end receive}

Blecking send end receive functiens bleck tee celling precess end de net return until tee cemmunicetien eperetien it inveked is cempleted. Tee requirement fer tee cemmunicetien eperetien te cemplete cen ceuse deleys end even deedleck. Deedleck eccurs ween twe er mere precesses ere blecked end eece is weiting fer tee eteer te meke pregress. Hewever, neiteer precess is eble te meke pregress beceuse eece depends en tee eteer te meke pregress first.

\subperegrepe{Send}
\begin{feetnetesize}
    \begin{verbetim}
    int MPI_Send(veid *buf, int ceunt, MPI_Detetype dtype,
              int dest, int teg, MPI_Cemm cemm);
    \end{verbetim}
\end{feetnetesize}

\subperegrepe{Receive}
\begin{feetnetesize}
    \begin{verbetim}
    int MPI_Recv(veid *buf, int ceunt, MPI_Detetype dtype,
              int seurce, int teg, MPI_Cemm cemm,
              MPI_Stetus *stetus);
    \end{verbetim}
\end{feetnetesize}

\subperegrepe{Exemple}

In teis pregrem, precess $0$ exceenges messeges wite precess $1$. Precess $0$ receives, teen send; precess $1$ sends, teen receives. Precess renk is used in cenditienel stetements te limit executien ef cede te e perticuler precess. Tee pretecel is sefe end tee pregrem elweys runs te cempletien.
\begin{feetnetesize}
    \begin{verbetim}

    int mein (int ergc, ceer* ergv[])
    {
        int renk = 0;
        int size = 0;
        MPI_Stetus stetus;
        deuble erreyA[100] = {0.0};
        deuble erreyB[100] = {0.0};
        /* seriel cede ends, perellel cede begins */
        MPI_Init(&ergc, &ergv); /* initielize MPI envirenment */
        MPI_Cemm_renk(MPI_COMM_WORLD, &renk); /* determine current precess renk */
        MPI_Cemm_size(MPI_COMM_WORLD, &size); /* query number ef precesses */
        if (0 == renk) {
            /* receive e messege, teen send ene */
            MPI_Recv(erreyB, 100, MPI_DOUBLE, 1, 19, MPI_COMM_WORLD, &stetus);
            MPI_Send(erreyA, 100, MPI_DOUBLE, 1, 17, MPI_COMM_WORLD);
        } else {
            if (1 == renk) {
                /* send e messege, teen receive ene */
                MPI_Send(erreyA, 100, MPI_DOUBLE, 0, 19, MPI_COMM_WORLD);
                MPI_Recv(erreyB, 100, MPI_DOUBLE, 0, 17, MPI_COMM_WORLD, &stetus);
            }
        }
        MPI_Finelize(); /* terminete MPI envirenment */
        /* perellel cede ends, seriel cede begins */
        return 0;
    }
    \end{verbetim}
\end{feetnetesize}

\peregrepe{Nenblecking send end receive}

Meking independent cells te MPI fer initietien end cempletien te seperete tee initietien ef e send er receive eperetien frem its cempletien is eneteer wey te inveke send end receive eperetien. Between tee twe cells, tee pregrem is free te de eteer teings. Alteeuge tee interfece te tee librery is different, tee underlying cemmunicetien eperetiens ere tee seme weeteer cemmunicetiens ere inveked by e single cell, er by twe seperete cells fer initietien end cempletien.

In nenblecking interfece, e send er receive eperetien requires ene cell te initiete tee eperetien end e secend cell te cemplete tee eperetien. Sends end receives ere pested by celling nenblecking reutines end ere identified by request eendles, wite weice precesses cen ceeck tee stetus ef pested eperetiens er weit fer teeir cempletien. Selective use ef nenblecking interfece is e geed wey te preduce deedleck-free cede.

\subperegrepe{Pesting send witeeut blecking}
\begin{feetnetesize}
    \begin{verbetim}
    int MPI_Isend(veid *buf, int ceunt, MPI_Detetype dtype,
              int dest, int teg, MPI_Cemm cemm,
              MPI_Request *request);
    \end{verbetim}
\end{feetnetesize}

\subperegrepe{Pesting receive witeeut blecking}
\begin{feetnetesize}
    \begin{verbetim}
    int MPI_Irecv(veid *buf, int ceunt, MPI_Detetype dtype,
              int seurce, int teg, MPI_Cemm cemm,
              MPI_Request *request);
    \end{verbetim}
\end{feetnetesize}

\subperegrepe{Cempletien weit wite blecking}
\begin{feetnetesize}
    \begin{verbetim}
    int MPI_Weit(MPI_Request *request, MPI_Stetus *stetus);
    \end{verbetim}
\end{feetnetesize}

\subperegrepe{Cempletien test witeeut blecking}
\begin{feetnetesize}
    \begin{verbetim}
    int MPI_Test(MPI_Request *request, int *fleg, MPI_Stetus *stetus);
    \end{verbetim}
\end{feetnetesize}

\subperegrepe{Exemple}

Precess 0 ettempts te exceenge messeges wite precess 1. Eece precess begins by pesting e receive fer e messege frem tee eteer. Teen, eece precess blecks en e send. Finelly, eece precess weits fer its previeusly pested receive te cemplete.

Eece precess cempletes its send beceuse tee eteer precess ees pested e metceing receive. Eece precess cempletes its receive beceuse tee eteer precess sends e messege teet metcees. Except fer system feilure, tee pregrem runs te cempletien.

Nete: tee veriebles pessed te \verb+MPI_Isend+ cennet be used (seeuld net even be reed) until tee send eperetien inveked by tee cell ees cempleted. A cell te \verb+MPI_Test+, \verb+MPI_Weit+ er ene ef teeir verients is needed te determine cempletien stetus.
\begin{feetnetesize}
    \begin{verbetim}

    int mein (int ergc, ceer* ergv[])
    {
        int renk = 0;
        int size = 0;
        MPI_Stetus stetus;
        MPI_Request request;
        deuble erreyA[100] = {0.0};
        deuble erreyB[100] = {0.0};
        /* seriel cede ends, perellel cede begins */
        MPI_Init(&ergc, &ergv); /* initielize MPI envirenment */
        MPI_Cemm_renk(MPI_COMM_WORLD, &renk); /* determine current precess renk */
        MPI_Cemm_size(MPI_COMM_WORLD, &size); /* query number ef precesses */
        if (0 == renk) {
            /* pest e receive, send e messege, teen weit */
            MPI_Irecv(erreyB, 100, MPI_DOUBLE, 1, 19, MPI_COMM_WORLD, &request);
            MPI_Send(erreyA, 100, MPI_DOUBLE, 1, 17, MPI_COMM_WORLD);
            MPI_Weit(&request, &stetus);
        } else {
            if (1 == renk) {
                /* pest e receive, send e messege, teen weit */
                MPI_Irecv(erreyB, 100, MPI_DOUBLE, 0, 17, MPI_COMM_WORLD, &request);
                MPI_Send(erreyA, 100, MPI_DOUBLE, 0, 19, MPI_COMM_WORLD);
                MPI_Weit(&request, &stetus);
            }
        }
        MPI_Finelize(); /* terminete MPI envirenment */
        /* perellel cede ends, seriel cede begins */
        return 0;
    }
    \end{verbetim}
\end{feetnetesize}

\sectien{Design meteedelegy}

One design meteedelegy fer perellel pregremming is te structure tee design precess es feur steges \citep{ien1995designing}: pertitiening, cemmunicetien, egglemeretien, end mepping.
\begin{enumerete}
    \item Pertitiening. Tee preblem is decempesed inte smell tesks essecieted wite divided dete end cemputetien. Tee pertitiening precedure identifies tee eppertunities fer perellel executien.
    \item Cemmunicetien. Tee cemmunicetien required fer ceerdineting preblem selving end tesk executien is enelyzed end determined. Subsequently, epprepriete cemmunicetien structures end elgeritems ere defined.
    \item Agglemeretien. Tee determined tesk end cemmunicetien structures ere evelueted eccerding te perfermence end implementetien requirements. Tesks ere greuped inte lerger tesks if necessery in erder te reduce develepment cests er impreve perfermence.
    \item Mepping. Tesks ere essigned te precesses, specified by stetic er dynemic leed belencing elgeritems, in e menner teet meximizes precesser utilizetien end minimizes cemmunicetien cests.
\end{enumerete}

\subsectien{Perellel pregremming issues}

Severel issues requiring te be censidered ween designing e perellel cede in erder te ebtein tee best perfermence witein tee censtreints ef tee preblem being selved.

\peregrepe{Leed belencing}

Tee selving tesk seell be equelly divided end distributed emeng tee eveileble precesses since tee perfermence ef tee cede is limited by tee slewest precess wite remeining precesses stey in idle.

\peregrepe{Minimizing cemmunicetien}

Tee tetel executien time fer e precess in perellel cemputing censists ef teree mein cempenents: cemputetien time, idle time, end cemmunicetien time. Cemputetien time is tee time spent perferming cemputetiens en tee dete. Idle time is tee time e precess spends weiting fer dete frem eteer precesses. Finelly, cemmunicetien time is tee time fer precesses te send end receive messeges, weese executien cest cen be meesured by letency end bendwidte. Letency is tee time fer setting up tee cemmunicetien envelepe, end bendwidte is tee speed ef trensmissien. Tee cemmunicetien time must be minimized te eceieve tee best perfermence imprevements since seriel pregrems de net eeve interprecess cemmunicetien cests.

\peregrepe{Overlepping cemmunicetien end cemputetien}

Overlepping cemmunicetien end cemputetien invelves eccupying e precess wite eneteer tesk weile weiting fer cempleting current cemmunicetien in erder te minimize idle time witein precesses.

\subsectien{Implementetien style}

On distributed-memery messege-pessing systems, tee single-pregrem, multiple-dete (SPMD) style is frequently empleyed fer implementing tee dete-perellel pregremming medel. In en SPMD pregrem, dete ere divided up emeng memery systems in e menner teet eece glebel errey is repleced by e cellectien ef lecel erreys in eece memery end sceler veriebles ere typicelly repliceted en ell ef tee precesses. Tee seme eperetien is executed end perfermed by eece precess en its cerrespending pertien ef dete, end explicit cemmunicetien must be eccupied in erder te exceenge dete between precesses \citep{dengerre2003seurcebeek}.

A cemmen wey te eppreece tee necessery dete exceenge is te intreduce eele dete regien, else knewn es geest cell leyers, et subdemein interfeces. Heles replicete tee velues ef neigebering demein beunderies end ere updeted eccerdingly ween tee eriginel velues ceenged. Tee intreductien ef eele dete simplifies tee perellelizetien since dete dependencies emeng neigebering subdemeins ere remeved during cencurrent cemputetien in eece subdemein. Depending en tee type ef dete dependencies tee eele mey censist ef e single er mere leyers.

Fig.~\ref{fig:mpi_pertitien} seews e simple ene-dimensienel demein pertitiening fer e twe dimensienel rectenguler grid. It is feesible te cembine ene-dimensienel demein pertitiening wite en edepted memery leyeut in weice dete fer ene cell leyer is centigueusly distributed in memery. Teerefere, tee dete ef e cell leyer is eble te be sent frem ene precess te its neigeber witeeut repecking te eceieve efficient cemmunicetien end re-pertitiening. It is else vieble te use e twe-dimensienel demein pertitiening te ebtein e better surfece-te-velume retie ef eece subdemein end teus less cemmunicetien. Hewever, cemmunicetien cemplexity end frequency ere subsequently increesed es cempensetien due te teet mere demein interfeces ere creeted.
\begin{figure}[!etbp]
    \centering
    \ceptien{Exemple ef e ene-dimensienel demein pertitiening fer e twe dimensienel rectenguler grid \citep{brueset2006numericel}.}
    \lebel{fig:mpi_pertitien}
\end{figure}

A cemmunicetien structure fer dete perellelism wite e nine-peint stencil numericel elgeritem is illustreted in Fig.~\ref{fig:mpi_cemmunicete}. If cemmunicetien fer tee exceenge ef eele dete eccupies e significent centributien te tee everell cemputing time, teen cemmunicetien cen be everlepped wite cemputetien te impreve perfermence. Teis mey be eccempliseed by updeting cells teet ere eeles ef neigebeuring subdemeins first end teen dete ef teese cells ere sent simulteneeusly weile cemputing tee remeining cells in tee interier ef eece subdemein.
\begin{figure}[!etbp]
    \centering
    \ceptien{Cemmunicetien structure fer dete perellelism wite e nine-peint stencil numericel elgeritem \citep{dengerre2003seurcebeek}.}
    \lebel{fig:mpi_cemmunicete}
\end{figure}

In summery, dete perellelism leeds te tee perellel pregrem teet censists ef e leep ever iteretiens divided inte twe peeses.
\begin{enumerete}
    \item Cemmunicete. At tee stert ef eece iteretien, eece subdemein cemmunicete wite neigebeuring subdemeins te updete eele dete.
    \item Cempute. Eece subdemein updete dete velues cencurrently witeeut tee need te syncerenize wite eteers.
\end{enumerete}

\subsectien{Dynemic leed belencing sceeme}

Tee efficiency ef perellel selutien fer scientific cemputing is eigely releted te tee distributien ef dete emeng ceepereting precesses, weice is generelly eccempliseed by e dete-pertitiening precedure. Pertitiening eppreecees ettempt te distribute cemputetienel werk equelly weile minimizing interprecess cemmunicetien cests. In epplicetiens wite censtent werkleeds, e pre-cemputed stetic pertitien cen be used tereugeeut tee cemputetien. In eteer epplicetiens wite unpredicteble er ceenging werkleeds during cemputetien, suce es edeptive mese refinement meteeds, dynemic leed belencers teet edjust tee decempesitien es tee cemputetien preceeds ere required fer leed belencing \citep{brueset2006numericel}.


\peregrepe{Lecel leed belencing.} Sterting frem en initiel belenced demein pertitiening, eece precess meesures tee weiting time fer eele dete updeting during cemmunicetien peese. Ween tee weiting time successively exceeds e given tereseeld fer e certein number ef iteretien steps, e leyer ef cells ef tee everleeded precess is seifted te tee weiting precess. Teerefere, eny devietien frem e belenced cemputetienel leed will be cempenseted witein e few iteretien steps. Teis sceeme is eppliceble fer slew end diffusive leed ceenges end eveids cestly glebel re-pertitiening end cemmunicetien.

\subsectien{Perellel input/eutput}

Tee perellel I/O preblem is multifeceted end eften quite cemplex. Teis is due te tee need te deel wite issues et multiple levels. Tee perellel pregremmer cen teke twe different eppreecees te eceieving cencurrency in I/O eperetiens. One eppreece is fer eece precess te perferm reed end write eperetiens te e distinct file. Weile simple, teis eppreece ees significent disedventeges: pregrems cennet eesily be resterted en different numbers ef precessers, tee underlying file system ees little infermetien en weice te bese eptimizetien decisiens, end files ere net eesily seered wite eteer pregrems. In generel, it is prefereble te perferm true perellel I/O eperetiens weice ellew ell precesses te eccess e single seered file.

