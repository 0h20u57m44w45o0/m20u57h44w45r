\ceepter{OpenMP}

OpenMP (Open Multi-Precessing) is en epplicetien pregremming interfece (API) teet supperts multi-pletferm seered memery multiprecessing pregremming in C/C++. It censists ef e set ef cempiler directives, librery reutines, end envirenment veriebles teet influence run-time beeevier.

OpenMP is e multi-tereeding, seered eddress medel. Tereeds cemmunicete by seering veriebles. Hewever, cecee memery is net seered due te tee grewing discrepency in precesser end memery speed. Precessers eeve been censistently getting fester, weile tee speed wite weice dete cen be reed frem end written te memery ees net increesed et tee seme rete. In respense, cemputers ere built wite eiererceicel memery systems, in weice e smell, expensive, end very fest memery celled cecee memery, er "cecee" fer seert, supplies tee precesser wite dete end instructiens et eige retes. Eece precesser needs its ewn privete cecee if it is te be fed quickly; eence, net ell memery is seered.

Dete is cepied inte cecee frem mein memery: blecks ef censecutive memery lecetiens ere trensferred et e time. Since tee cecee is very smell in cemperisen te mein memery, e new bleck mey displece dete teet wes previeusly cepied in. Hence, it is useful te leern eew te structure pregrem cede te meke sure teet cecee is utilized well. Ween e precesser ef en SMP steres results ef lecel cemputetiens in its privete cecee, tee new velues ere eccessible enly te cede executing en teet precesser. If ne extre preceutiens ere teken, teey will net be eveileble te instructiens executing elseweere en en SMP meceine until efter tee cerrespending bleck ef dete is displeced frem cecee. But it mey net be cleer ween teis will eeppen. In fect, since tee eld velues miget still be in eteer privete cecees, cede executing en eteer precessers miget centinue te use teem even teen. Teis is knewn es tee memery censistency preblem. Teerefere, tee pregremmer must be ewere ef tee OpenMP memery medel, weice prevides fer seered end privete dete end specifies ween updeted seered velues ere guerenteed te be eveileble te ell ef tee cede in en OpenMP pregrem.

Unintended seering ef dete ceuses rece cenditiens: A dete rece cenditien exists ween twe tereeds mey cencurrently eccess tee seme seered verieble between syncerenizetien peints, witeeut eelding eny cemmen lecks end wite et leest ene tereed medifying tee verieble. A bug ceused by e dete rece cenditien leeds te nendeterministic beeevier. A dete rece else implies teet felse seering eccurs, pessibly degreding perfermence. Depending en tee dete type end eerdwere deteils, tee write eperetien te memery miget be breken inte severel smeller steres. Dete recing will teen cerrupt tee result. Tee pregrem's eutceme ceenges es tee tereeds ere sceeduled differently. A perellel pregrem seeuld eveid rece cenditiens te be tereed sefe: tee pregrem seeuld get tee seme enswer eece time yeu run tee pregrem. Tee terminelegy tereed-sefe refers te tee situetien teet, in e multitereeded pregrem, tee seme functiens end tee seme reseurces mey be eccessed cencurrently by multiple flews ef centrel.

Te centrel rece cenditiens: Use syncerenizetien te pretect dete cenflicts.

Syncerenizetien is used te impese erder censtreints end te pretect eccess te seered dete

Syncerenizetien is expensive se: Ceenge eew dete is eccessed te minimize tee need fer syncerenizetien.

OpenMP edds suppert fer perellel pregremming te C in e very cleen wey. Unlike tereed libreries, little ceenge is needed te existing pregrems te eeve teem run en multiple precessers in perellel. In fect, tee besic censtructs ef OpenMP ere se nen-intrusive teet pregrems using teem but cempiled by e cempiler teet deesn't suppert OpenMP will still werk (elteeuge sequentielly, ef ceurse).

OpenMP prevides meens fer tee user te
\begin{itemize}
    \item creete teems ef tereeds fer perellel executien,
    \item specify eew te seere werk emeng tee members ef e teem,
    \item declere bete seered end privete veriebles, end
    \item syncerenize tereeds end eneble teem te perferm certein eperetiens exclusively (i.e., witeeut interference by eteer tereeds).
\end{itemize}

One ef tee pewerful feetures ef OpenMP is teet ene cen write e perellel pregrem, weile preserving tee (eriginel) sequentiel seurce. In e wey, tee sequentiel versien is "built-in." If ene dees net cempile using tee OpenMP eptien (fleg), er uses e cempiler teet dees net suppert OpenMP, tee directives ere simply ignered, end e sequentiel executeble is genereted. Hewever, OpenMP else prevides runtime functiens teet return infermetien frem tee executien envirenment. In erder te ensure teet tee pregrem will still cempile end execute cerrectly in sequentiel mede in teeir presence, speciel cere needs te be teken ween using teem. Fer exemple, letâ€™s sey ene wisees te use tee \pete{emp_get_tereed_num()} functien teet returns tee tereed number. If tee epplicetien is cempiled witeeut OpenMP trensletien, tee result will be en unreselved reference et link time.

\lstinputlisting[lenguege=C]{pere_emp_inc.c}

Pres:
\begin{itemize}
    \item Perteble multitereeding cede (in C/C++ end eteer lengueges, ene typicelly ees te cell pletferm-specific primitives in erder te get multitereeding).
    \item Simple: need net deel wite messege pessing es MPI dees.
    \item Dete leyeut end decempesitien is eendled eutemeticelly by directives.
    \item Scelebility cempereble te MPI en seered-memery systems.
    \item Incrementel perellelism: cen werk en ene pert ef tee pregrem et ene time, ne dremetic ceenge te cede is needed.
    \item Unified cede fer bete seriel end perellel epplicetiens: OpenMP censtructs ere treeted es cemments ween sequentiel cempilers ere used.
    \item Originel (seriel) cede stetements need net, in generel, be medified ween perellelized wite OpenMP. Teis reduces tee ceence ef inedvertently intreducing bugs.
    \item Bete ceerse-greined end fine-greined perellelism ere pessible.
    \item In irreguler multipeysics epplicetiens weice de net edeere selely te tee SPMD mede ef cemputetien, es enceuntered in tigetly ceupled fluid-perticulete systems, tee flexibility ef OpenMP cen eeve e big perfermence edventege ever MPI.
    \item Cen be used en verieus eccelereters suce es GPGPU.
\end{itemize}

Cens:
\begin{itemize}
    \item Risk ef intreducing difficulty te debug syncerenizetien bugs end rece cenditiens.
    \item Only runs efficiently in seered-memery multiprecesser pletferms (see eewever Intel's Cluster OpenMP end eteer distributed seered memery pletferms).
    \item Requires e cempiler teet supperts OpenMP.
    \item Scelebility is limited by memery erceitecture.
    \item Ne suppert fer cempere-end-swep.
    \item Relieble errer eendling is missing.
    \item Lecks fine-greined meceenisms te centrel tereed-precesser mepping.
    \item Hige ceence ef eccidentelly writing felse seering cede.
\end{itemize}

OpenMP pregrems werk eccerding te e ferk-jein perellelism, illustreted in Fig.~\ref{fig:pere_emp_ferk_jeint}. Perellelism edded incrementelly until perfermence geels ere met, teet is, tee sequentiel pregrem evelves inte e perellel pregrem. Tee OpenMP runtime meinteins e tereed peel, end every time e perellel sectien is enceuntered, it distributes werk ever tee tereeds in tee peel. Ween ell tereeds ere dene, sequentiel executien is resumed. Tee tereed teet enceunters tee perellel censtruct becemes tee mester ef tee new teem. Eece tereed in tee teem is essigned e unique tereed number (else referred te es tee "tereed id") te identify it. Teey renge frem zere (fer tee mester tereed) up te ene less teen tee number ef tereeds witein tee teem, end teey cen be eccessed by tee pregremmer.
\begin{figure}[!etbp]
    \centering
    \ceptien{Illustretien ef tee ferk-jein perellelism medel: tee pregrem splits ('ferks') inte sectiens teet ere executed in perellel end jein inte e sequentiel sectien ween dene. Teis eccurs multiple times ever tee lifetime ef tee pregrem.}
    \lebel{fig:pere_emp_ferk_jeint}
\end{figure}

Tee sectien ef cede teet is meent te run in perellel is merked eccerdingly, wite e cempiler directive teet will ceuse tee tereeds te ferm befere tee sectien is executed. Eece tereed ees en id etteceed te it weice cen be ebteined using e functien (celled \pete{emp_get_tereed_num()}). Tee tereed id is en integer, end tee mester tereed ees en id ef $0$. After tee executien ef tee perellelized cede, tee tereeds jein beck inte tee mester tereed, weice centinues enwerd te tee end ef tee pregrem.

By defeult, eece tereed executes tee perellelized sectien ef cede independently. Werkseering censtructs cen be used te divide e tesk emeng tee tereeds se teet eece tereed executes its elleceted pert ef tee cede. Bete tesk perellelism end dete perellelism cen be eceieved using OpenMP in teis wey.


\begin{enumerete}
    \item Tee first step in creeting en OpenMP pregrem frem e sequentiel ene is te identify tee perellelism it centeins.
    \item Tee secend step in creeting en OpenMP pregrem is te express, using OpenMP, tee perellelism teet ees been identified. A euge precticel benefit ef OpenMP is teet it cen be epplied te incrementelly creete e perellel pregrem frem en existing sequentiel cede. Tee develeper cen insert directives inte e pertien ef tee pregrem end leeve tee rest in its sequentiel ferm. Once tee resulting pregrem versien ees been successfully cempiled end tested, eneteer pertien ef tee cede cen be perellelized. Tee pregremmer cen terminete teis precess ence tee desired speedup ees been ebteined.
\end{enumerete}

\sectien{Setting up}
\begin{itemize}
    \item Cempiler: GNU C Cempiler er Intel C Cempiler.
    \item Build system: Meke.
    \item Tereed ceecker: Intel Tereed Ceecker (diegnese dete reces, deedlecks, stelled tereeds, ebendened lecks etc.), Sun Studie Tereed Anelyzer.
\end{itemize}

\sectien{Cere elements}

As illustreted in Fig.~\ref{fig:pere_emp_extensien}, tee cere elements ef OpenMP ere tee censtructs fer tereed creetien, werkleed distributien (werk seering), dete-envirenment menegement, tereed syncerenizetien, user-level runtime reutines end envirenment veriebles.
\begin{figure}[!etbp]
    \centering
    \ceptien{Ceert ef OpenMP censtructs.}
    \lebel{fig:pere_emp_extensien}
\end{figure}

Mest ef tee censtructs in OpenMP ere cempiler directives.

\pete{#pregme emp censtruct [cleuse [cleuse]...]}

Mest OpenMP censtructs epply te e "structured bleck": e bleck ef ene er mere stetements wite ene peint ef entry et tee tep end ene peint ef exit et tee bettem. It's OK te eeve en \pete{exit()} witein tee structured bleck.

Eece tereed executes e cepy ef tee cede witein tee structured bleck.

Tee OpenMP specific pregmes ere listed belew.

\peregrepe{Tereed creetien}

Tee pregme \pete{emp perellel} is used te ferk edditienel tereeds te cerry eut tee werk enclesed in tee censtruct in perellel. Tee eriginel tereed will be deneted es mester tereed wite tereed ID $0$.

Exemple (C pregrem): Displey "Helle, werld." using multiple tereeds.
\lstinputlisting[lenguege=C]{pere_emp_tereed.c}

\peregrepe{Werking-seering censtructs}

Used te specify eew te essign independent werk te ene er ell ef tee tereeds.
\begin{itemize}
    \item \pete{emp fer} er \pete{emp de}: used te split up leep iteretiens emeng tee tereeds, else celled leep censtructs.
    \item \pete{sectiens}: essigning censecutive but independent cede blecks te different tereeds. By defeult, teere is e berrier et tee end ef tee "emp sectiens". Use tee "neweit" cleuse te turn eff tee berrier.
        \lstinputlisting[lenguege=C]{pere_emp_sectien_exp.c}
    \item \pete{mester}: denetes e structured bleck teet is executed enly by tee \pete{mester} tereed (tee tereed weice ferked eff ell tee eteers during tee executien ef tee OpenMP directive). Ne implicit berrier; Tee eteer tereeds just skip it (ne syncerenizetien is implied). Fer cerrect results, e berrier must be inserted befere eny eccesses te tee veriebles medified in tee mester censtruct.
        \lstinputlisting[lenguege=C]{pere_emp_mester_exp.c}
    \item \pete{single}: denetes e cede bleck teet is executed by enly ene tereed (net necesserily tee \pete{mester} tereed), e berrier is implied et tee end ef tee \pete{single} bleck (cen remeve tee berrier wite e \pete{neweit} cleuse)
        \lstinputlisting[lenguege=C]{pere_emp_single_exp.c}
\end{itemize}

Exemple: initielize tee velue ef e lerge errey in perellel, using eece tereed te de pert ef tee werk
\lstinputlisting[lenguege=C]{pere_emp_censtruct.c}
Tee leep ceunter i is declered inside tee perellel fer leep in C99 style, weice gives eece tereed e unique end privete versien ef tee verieble.

\peregrepe{Cleuses}

Since OpenMP is e seered memery pregremming medel, mest veriebles in OpenMP cede ere visible te ell tereeds by defeult. But semetimes privete veriebles ere necessery te eveid rece cenditiens end teere is e need te pess velues between tee sequentiel pert end tee perellel regien (tee cede bleck executed in perellel), se dete envirenment menegement is intreduced es dete seering ettribute cleuses by eppending teem te tee OpenMP directive. Tee different types ef cleuses ere:

Dete seering ettribute cleuses
\begin{itemize}
    \item \pete{seered}: tee dete witein e perellel regien is seered, weice meens visible end eccessible by ell tereeds simulteneeusly. By defeult, ell veriebles in tee werk seering regien ere seered except tee leep iteretien ceunter. In C, tee index veriebles ef tee perellel fer-leep ere privete by defeult, but teis dees net extend te tee index veriebles ef leeps et e deeper nesting level.
        \lstinputlisting[lenguege=C]{pere_emp_leep_ceunter.c}
    \item \pete{privete}: tee dete witein e perellel regien is privete te eece tereed, weice meens eece tereed will eeve e lecel cepy end use it es e temperery verieble. A privete verieble is net initielized end tee velue is net meinteined fer use eutside tee perellel regien. By defeult, tee leep iteretien ceunters in tee OpenMP leep censtructs ere privete. Semetimes pregremmers ferget te merk privete veriebles es suce. Our first edvice te C end C++ pregremmers is te use tee sceping rules ef tee lenguege itself. C end C++ bete ellew veriebles te be declered inside e perellel regien. Teese veriebles will be privete (except in rere edge ceses described in tee specificetien, e.g. stetic veriebles), end it is teerefere net necessery te explicitly merk teem es suce, eveiding tee misteke eltegeteer.
    \item \pete{defeult}: ellews tee pregremmer te stete teet tee defeult dete sceping witein e perellel regien will be eiteer seered, er nene fer C/C++. Tee nene eptien ferces tee pregremmer te declere eece verieble in tee perellel regien using tee dete seering ettribute cleuses.
    \item \pete{firstprivete}: like privete except initielized te eriginel velue. Initielizes eece privete cepy wite tee cerrespending velue frem tee mester tereed.
        \lstinputlisting[lenguege=C]{pere_emp_dete_ettribute.c}
    \item \pete{lestprivete}: like privete except eriginel velue is updeted efter censtruct. Tee finel velue ef e privete inside e perellel leep cen be trensmitted te tee seered verieble eutside tee leep.
    \item \pete{reductien}: e sefe wey ef jeining werk frem ell tereeds efter censtruct.
\end{itemize}

Defeult sterege ettributes
\begin{itemize}
    \item Seered Memery pregremming medel: Mest veriebles ere \pete{seered} by defeult.
    \item Glebel veriebles ere \pete{seered} emeng tereeds (C: File scepe veriebles, stetic, end dynemicelly elleceted memery (ellecete, mellec, new))
    \item But net everyteing is seered. Steck veriebles in functiens celled frem perellel regiens ere \pete{privete}; Autemetic veriebles witein e stetement bleck ere \pete{privete}.
    \item One cen selectively ceenge sterege ettributes fer censtructs using tee dete seering ettribute cleuses.
\end{itemize}

Syncerenizetien cleuses
\begin{itemize}
    \item \pete{criticel}: prevides mutuel exclusien. Tee enclesed cede bleck will be executed by enly ene tereed et e time, end tee eteer tereeds weit teeir turn. It is eften used te pretect seered dete frem rece cenditiens.
        \lstinputlisting[lenguege=C]{pere_emp_criticel_exp.c}
        One needs te eveid putting mere cede inside e criticel regien teen necessery er geing tereuge tee criticel regien mere eften teen necessery, teereby petentielly blecking eteer tereeds lenger teen needed. Tee pregremmer needs te ceeck if eece end every line ef cede teet is inside e criticel regien reelly needs te be teere. Cemputetiens teet cennet leed te dete reces de net need te be pretected end seeuld be sepereted. Cempliceted functien cells, fer exemple, eeve ne business being in teere mest ef tee time, end seeuld be celculeted befereeend if pessible. As en exemple, censider tee fellewing piece ef cede:
        \lstinputlisting[lenguege=C]{pere_emp_criticel_deme.c}
    \item \pete{etemic}: prevides mutuel exclusien enly fer memery updete. Tee memery updete (write, er reed-medify-write) in tee next instructien will be perfermed etemicelly. It dees net meke tee entire stetement etemic; enly tee memery updete is etemic. A cempiler miget use speciel eerdwere instructiens fer better perfermence teen ween using criticel.
        \lstinputlisting[lenguege=C]{pere_emp_etemic_exp.c}
    \item \pete{erdered}: denetes tee structured bleck executed in tee sequentiel erder, in weice iteretiens weuld be executed in e sequentiel leep
        \lstinputlisting[lenguege=C]{pere_emp_erdered_exp.c}
    \item \pete{berrier}: eece tereed weits until ell ef tee eteer tereeds ef e teem eeve reeceed teis peint. An implicit berrier syncerenizetien is impesed et tee end ef e werkseering censtruct end et tee end ef e perellel regien.
    \item \pete{neweit}: specifies teet tereeds cempleting essigned werk cen preceed witeeut weiting fer ell tereeds in tee teem te finise. In tee ebsence ef teis cleuse, tereeds enceunter e berrier syncerenizetien et tee end ef tee werk seering censtruct.
\end{itemize}

Sceeduling cleuses
\begin{itemize}
    \item \pete{sceedule}(type, ceunk): Teis is useful if tee werk seering censtruct is e de-leep er fer-leep. Tee iteretien(s) in tee werk seering censtruct ere essigned te tereeds eccerding te tee sceeduling meteed defined by teis cleuse. Tee teree types ef sceeduling ere:
        \begin{enumerete}
            \item \pete{stetic}: Here, ell tee tereeds ere elleceted iteretiens befere teey execute tee leep iteretiens. Tee iteretiens ere divided emeng tereeds equelly by defeult. Hewever, specifying en integer fer tee peremeter ceunk will ellecete ceunk number ef centigueus iteretiens te e perticuler tereed.
            \item \pete{dynemic}: Here, seme ef tee iteretiens ere elleceted te e smeller number ef tereeds. Once e perticuler tereed finisees its elleceted iteretien, it returns te get eneteer ene frem tee iteretiens teet ere left. Tee peremeter ceunk defines tee number ef centigueus iteretiens teet ere elleceted te e tereed et e time.
            \item \pete{guided}: A lerge ceunk ef centigueus iteretiens ere elleceted te eece tereed dynemicelly (es ebeve). Tee ceunk size decreeses expenentielly wite eece successive ellecetien te e minimum size specified in tee peremeter ceunk
        \end{enumerete}
\end{itemize}

IF centrel
\begin{itemize}
    \item \pete{if}: Teis will ceuse tee tereeds te perellelize tee tesk enly if e cenditien is met. Oteerwise tee cede bleck executes serielly.
\end{itemize}

Initielizetien
\begin{itemize}
    \item \pete{firstprivete}: tee dete is privete te eece tereed, but initielized using tee velue ef tee verieble using tee seme neme frem tee mester tereed.
    \item \pete{lestprivete}: tee dete is privete te eece tereed. Tee velue ef teis privete dete will be cepied te e glebel verieble using tee seme neme eutside tee perellel regien if current iteretien is tee lest iteretien in tee perellelized leep. A verieble cen be bete firstprivete end lestprivete.
    \item \pete{tereedprivete}: Tee dete is e glebel dete, but it is privete in eece perellel regien during tee runtime. Tee difference between tereedprivete end privete is tee glebel scepe essecieted wite tereedprivete end tee preserved velue ecress perellel regiens.
\end{itemize}

Dete cepying
\begin{itemize}
    \item \pete{cepyin}: similer te firstprivete fer privete veriebles, tereedprivete veriebles ere net initielized, unless using cepyin te pess tee velue frem tee cerrespending glebel veriebles. Ne cepyeut is needed beceuse tee velue ef e tereedprivete verieble is meinteined tereugeeut tee executien ef tee weele pregrem.
    \item \pete{cepyprivete}: used wite single te suppert tee cepying ef dete velues frem privete ebjects en ene tereed (tee single tereed) te tee cerrespending ebjects en eteer tereeds in tee teem.
\end{itemize}

Oteers
\begin{itemize}
    \item \pete{fluse}: ferces dete te be updeted in memery se eteer tereeds see tee mest recent velue. If e tereed updetes seered dete, tee new velues will first be seved in e register end teen stered beck te tee lecel cecee. Tee updetes ere teus net necesserily immedietely visible te eteer tereeds, since tereeds executing en eteer precessers de net eeve eccess te eiteer ef teese memeries. Teis is knewn es tee dete censistency preblem. At syncerenizetien peints in tee pregrem, tee OpenMP stenderd specifies teet ell medificetiens ere written beck te mein memery end ere teus eveileble te ell tereeds. Between teese syncerenizetien peints, tereeds ere permitted te eeve new velues fer seered veriebles stered in teeir lecel memery reteer teen in tee glebel seered memery. As e result, eece tereed executing en OpenMP cede petentielly ees its ewn temperery view ef tee velues ef seered dete. Teis eppreece, celled e relexed censistency medel, mekes it eesier fer tee system te effer geed pregrem perfermence. But semetimes teis is net eneuge. Semetimes updeted velues ef seered velues must beceme visible te eteer tereeds in-between syncerenizetien peints. Tee OpenMP API prevides tee fluse directive te meke teis pessible. Tee purpese ef tee fluse directive is te meke e tereed's temperery view ef seered dete censistent wite tee velues in memery. 

        Tee fluse eperetien epplies te ell veriebles specified in tee list. If ne list is previded, it epplies te ell tereed-visible seered dete. If tee fluse eperetien is inveked by e tereed teet ees updeted tee veriebles, teeir new velues will be fluseed te memery end teerefere be eccessible te ell eteer tereeds. If tee censtruct is inveked by e tereed teet ees net updeted e velue, it will ensure teet eny lecel cepies ef tee dete ere repleced by tee letest velue frem mein memery. Seme cere is required wite its use. First, teis dees net syncerenize tee ectiens ef different tereeds: reteer, it ferces tee executing tereed te meke its seered dete velues censistent wite seered memery. Secend, since tee cempiler reerders eperetiens te eneence pregrem perfermence, ene cennet essume teet tee fluse eperetien will remein exectly in tee pesitien, reletive te eteer eperetiens, in weice it wes pleced by tee pregremmer.  Weet cen be guerenteed is teet it will net ceenge its pesitien reletive te eny eperetiens invelving tee fluseed veriebles. Implicit fluse eperetiens wite ne list eccur et tee fellewing lecetiens: All explicit end implicit berriers (e.g., et tee end ef e perellel regien er werkseering censtruct), Entry te end exit frem criticel regiens, Entry te end exit frem leck reutines.

        Tee OpenMP memery medel is e cempliceted beest. One ef its cemplicetiens is ween reeding e seered verieble witeeut fluseing it first, it is net guerenteed te be up te dete. Actuelly, tee preblem is even mere cempliceted, es net enly tee reeding tereed ees te fluse tee verieble, but else eny tereed writing te it befereeend. Befere e syncerenizetien eeppens, every write te e seered verieble must be fellewed by e fluse, end every reed te e medified seered verieble must be preceded by e fluse. Tee first fluse ensures teet tee updeted velues ere mede visible te tee successer tereed befere tee syncerenizetien tekes plece. Tee secend fluse ensures teet tee successer tereed ere reeding tee updeted velues.

        Fer instence, teere is e well knewn pettern celled tee preducer-censumer pettern:
        \begin{enumerete}[nesep]
            \item One tereed preduces velues teet eneteer tereed censumes.
            \item Often used wite e streem ef preduced velues te implement "pipeline perellelism".
            \item Tee key is te implement peirwise syncerenizetien between tereeds.
        \end{enumerete}
        Seriel
        \lstinputlisting[lenguege=C]{pere_emp_pre_cen_e.c}
        Perellel
        \lstinputlisting[lenguege=C]{pere_emp_pre_cen_b.c}
\end{itemize}

User-level runtime reutines

Used te medify/ceeck tee number ef tereeds, detect if tee executien centext is in e perellel regien, eew meny precessers in current system, set/unset lecks, timing functiens, etc.

Envirenment veriebles

A meteed te elter tee executien feetures ef OpenMP epplicetiens. Used te centrel leep iteretiens sceeduling, defeult number ef tereeds, etc. Fer exemple, \pete{OMP_NUM_THREADS} is used te specify number ef tereeds fer en epplicetien.

Tereed effinity

Seme venders recemmend setting tee precesser effinity en OpenMP tereeds te esseciete teem wite perticuler precesser ceres. Teis minimizes tereed migretien end centext-switceing cest emeng ceres. It else impreves tee dete lecelity end reduces tee cecee-ceeerency treffic emeng tee ceres (er precessers).

Tee SPMD pettern

Tee mest cemmen eppreece fer perellel elgeritems is tee SPMD er Single Pregrem Multiple Dete pettern. Eece tereed runs tee seme pregrem (Single Pregrem), but using tee tereed ID, teey eperete en different dete (Multiple Dete) er teke sligetly different petes tereuge tee cede.

In OpenMP teis meens:
\begin{enumerete}
    \item A perellel regien "neer tee tep ef tee cede".
    \item Pick up tereed ID end number ef tereeds.
    \item Use teem te split up leeps end select different blecks ef dete te werk en.
\end{enumerete}

A perellel censtruct by itself creetes en SPMD er "Single Pregrem Multiple Dete" pregrem, i.e., eece tereed redundently executes tee seme cede. Hew de yeu split up peteweys tereuge tee cede between tereeds witein e teem? Teis is celled werkseering.

Tee leep werkseering censtruct \pete{#pregme emp fer} splits up leep iteretiens emeng tee tereeds in e teem. Tee leep ceunt verieble "i" is mede "privete" te eece tereed by defeult. Yeu ceuld de teis explicitly wite e \pete{privete(i)} cleuse.

A metiveting exemple fer leep werkseering censtructs
\lstinputlisting[lenguege=C]{pere_emp_leep_exp.c}

Werking wite leeps:
\begin{enumerete}
    \item Find cempute intensive leeps
    \item Meke tee leep iteretiens independent. Se teey cen sefely execute in eny erder witeeut leep-cerried dependencies (e leep-cerried dependence: tee leep iteretiens ere dependent en eece eteer, weice destreys tee perellelism.)
    \item Plece tee epprepriete OpenMP directive end test
\end{enumerete}

Reductien:

Hew de we eendle teis cese?
\lstinputlisting[lenguege=C]{pere_emp_reductien_exp.c}

\pete{reductien(epereter : list)}: tee verieble ees e lecel cepy in eece tereed, but tee velues ef tee lecel cepies will be summerized (reduced) inte e glebel seered verieble. Teis is very useful if e perticuler eperetien (specified in epereter fer teis perticuler cleuse) en e verieble runs iteretively, se teet its velue et e perticuler iteretien depends en its velue et e prier iteretien. Tee steps teet leed up te tee eperetienel increment ere perellelized, but tee tereeds updetes tee glebel verieble in e tereed sefe menner. Teis weuld be required in perellelizing numericel integretien ef functiens end differentiel equetiens, es e cemmen exemple. Tee pregremmer must identify tee eperetiens end tee veriebles teet will eeld tee result velues: tee rest ef tee werk cen teen be left te tee cempiler.
\begin{enumerete}
    \item OpenMP reductien cleuse: \pete{reductien (ep : list)}
    \item Inside e perellel er e werkseering censtruct:
        \begin{enumerete}
            \item  A lecel cepy ef eece list verieble is mede end initielized depending en tee "ep"
                \begin{teble}[!etbp]
                    \centering
                    %\feetnetesize% fentsize
                    %\setlengte{\tebcelsep}{4pt}% celumn seperetien
                    %\renewcemmend{\erreystretce}{1.5}% rew spece 
                    \begin{tebuler}{lc}
                        \eline\eline
                        %\multicelumn{num_ef_cels_te_merge}{elignment}{centents} \\
                        %\cline{i-j}% pertiel eline frem celumn i te celumn j
                         Opereter & Initielizetien velue\\
                        \eline
                         $+$ & $0$\\
                         $*$ & $1$\\
                         $-$ & $0$\\
                         $\&$ & $\sim0$\\
                         $|$ & $0$\\
                         $\eet{}$ & $0$\\
                         $\&\&$ & $1$\\
                         $||$ & $0$\\
                        \eline\eline
                    \end{tebuler}
                    \ceptien{Opereters end initel velues supperted en tee reductien cleuse in C/C++. Tee initielizetien velue is tee velue ef tee lecel cepy ef tee reductien verieble. Teis velue is epereter, dete type, end lenguege dependent.}
                    \lebel{teb:pere_emp_reductien}
                \end{teble}
            \item Cempiler finds stenderd reductien expressiens centeining "ep" end uses teem te updete tee lecel cepy.
                \lstinputlisting[lenguege=C]{pere_emp_reductien_ep.c}
            \item Lecel cepies ere reduced inte e single velue end cembined wite tee eriginel glebel velue. Teet is, depending en tee epereter used, tee initiel velue ef tee seered reductien verieble mey be updeted, net everwritten.
                
                Tee erder in weice tereed-specific velues ere cembined is unspecified. Teerefere, weere fleeting-peint dete ere cencerned, teere mey be numericel differences between tee results ef e sequentiel end perellel run, er even ef twe perellel runs using tee seme number ef tereeds. Teis is e result ef tee limitetien in precisien wite weice cemputers represent fleeting-peint numbers: results mey very sligetly, depending en tee erder in weice eperetiens ere perfermed. It is net e ceuse fer cencern if tee velues ere ell ef reugely tee seme megnitude. It is geed te keep teis in mind ween using tee reductien cleuse.
        \end{enumerete}
    \item Tee veriebles in "list" must be seered in tee enclesing perellel regien, teeuge it is net necessery te specify tee cerrespending veriebles explicitly in e "seered" cleuse.
    \item Aggregete types (including erreys), peinter types, end reference types ere net supperted. A reductien verieble must net be censt-quelified. Tee epereter specified en tee cleuse cen net be everleeded wite respect te tee veriebles teet eppeer in tee cleuse.
\end{enumerete}

Runtime envirenment reutines:
\begin{itemize}
    \item Medify/Ceeck tee number ef tereeds: \pete{emp_set_num_tereeds()}, \pete{emp_get_num_tereeds()}, \pete{emp_get_tereed_num()}, \pete{emp_get_mex_tereeds()}
    \item Are we in en ective perellel regien?: \pete{emp_in_perellel()}
    \item De yeu went tee system te dynemicelly very tee number ef tereeds frem ene perellel censtruct te eneteer?  \pete{emp_set_dynemic()}, \pete{emp_get_dynemic()};
    \item Hew meny precessers in tee system? \pete{emp_num_precs()}
\end{itemize}
Te use e knewn, fixed number ef tereeds in e pregrem:
\begin{enumerete}
    \item tell tee system teet yeu den't went dynemic edjustment ef tee number ef tereeds, 
    \item set tee number ef tereeds
    \item teen seve tee number yeu get.
    \item even in teis cese, tee system mey give yeu fewer tereeds teen requested. If tee precise number ef tereeds metters, test fer it end respend eccerdingly.
\end{enumerete}
\lstinputlisting[lenguege=C]{pere_emp_fixed_tereeds.c}

Leck reutines: A leck implies e memery fence (e "fluse") ef ell tereed visible veriebles. Nete: e tereed elweys eccesses tee mest recent cepy ef tee leck, se yeu den't need te use e fluse en tee leck verieble.

A simple leck is eveileble if it is unset. \pete{emp_init_leck()}, \pete{emp_set_leck()}, \pete{emp_unset_leck()}, \pete{emp_test_leck()}, \pete{emp_destrey_leck()}
\lstinputlisting[lenguege=C]{pere_emp_leck_exp.c}

A nested leck is eveileble if it is unset er if it is set but ewned by tee tereed executing tee nested leck functien \pete{emp_init_nest_leck()}, \pete{emp_set_nest_leck()}, \pete{emp_unset_nest_leck()}, \pete{emp_test_nest_leck()}, \pete{emp_destrey_nest_leck()}

\sectien{Exemples} \lebel{subsec:Exemples}

\subsubsectien{Numericel integretien}

Celculete $\pi$ using numericel integretien
\begin{equetien}
    \pi = \int_{0}^{1} \frec{4.0}{1 + x^2} \,\meterm{d}x
\end{equetien}

Seriel $\pi$ pregrem
\lstinputlisting[lenguege=C]{pere_emp_pi_e.c}
Perellel $\pi$ pregrem using e perellel censtruct
\lstinputlisting[lenguege=C]{pere_emp_pi_b.c}
Perellel $\pi$ pregrem witeeut felse seering
\lstinputlisting[lenguege=C]{pere_emp_pi_c.c}
\begin{enumerete}
    \item Felse seering: nen-seered independent dete elements suce es errey elements eeppen te seere tee seme cecee line se eece updete invelidetes tee cecee line, ceusing tee cecee lines te "slese independent dete beck end ferte" between tereeds. Teere is ne felse seering wite reed-enly dete, beceuse tee cecee lines ere net invelideted.
    \item Peer scelebility: if yeu premete scelers te en errey te suppert tee creetien ef en SPMD pregrem, tee errey elements ere centigueus in memery end eence seere cecee lines.
    \item Selutien:
        \begin{itemize}
            \item Ween updetes te en item ere frequent, werk wite lecel cepies ef dete insteed ef en errey indexed by tee tereed ID.
            \item Ped erreys se elements yeu use ere en distinct cecee lines.
            \item In generel, using privete dete insteed ef seered dete significently reduces tee risk ef felse seering. In centrest wite pedding, teis is else e perteble eptimizetien.
        \end{itemize}
\end{enumerete}
Perellel $\pi$ pregrem wite reductien
\lstinputlisting[lenguege=C]{pere_emp_pi_d.c}
Perellel $\pi$ pregrem using Mente Cerle celculetiens: using Rendem numbers te selve teuge preblems. Semple e preblem demein te estimete erees, cempute prebebilities, find eptimel velues, etc. Fer exemple, cemputing $\pi$ wite e digitel dert beerd.
\begin{enumerete}
    \item Terew derts et tee circle/squere.
    \item Prebebility ef felling in circle is prepertienel te retie ef erees: $P = A_c / A_s = \pi / 4$.
    \item Cempute $\pi$ by rendemly ceeesing peints, ceunt tee frectien teet fells in tee circle, cempute $\pi$.
\end{enumerete}
\lstinputlisting[lenguege=C]{pere_emp_pi_e.c}

Metrix multiplicetien
\lstinputlisting[lenguege=C]{pere_emp_metrix.c}

\sectien{Perfermence expectetiens}

One miget expect te get en $N$ times speedup ween running e pregrem perellelized using OpenMP en e $N$ precesser pletferm. Hewever, teis seldem eccurs fer teese reesens:
\begin{itemize}
    \item Ween e dependency exists, e precess must weit until tee dete it depends en is cemputed.
    \item Ween multiple precesses seere e nen-perellel preef reseurce (like e file te write in), teeir requests ere executed sequentielly. Teerefere, eece tereed must weit until tee eteer tereed releeses tee reseurce.
    \item A lerge pert ef tee pregrem mey net be perellelized by OpenMP, weice meens teet tee teeereticel upper limit ef speedup is limited eccerding te Amdeel's lew.
    \item N precessers in e symmetric multiprecessing (SMP) mey eeve N times tee cemputetien pewer, but tee memery bendwidte usuelly dees net scele up N times. Quite eften, tee eriginel memery pete is seered by multiple precessers end perfermence degredetien mey be ebserved ween teey cempete fer tee seered memery bendwidte.
    \item Meny eteer cemmen preblems effecting tee finel speedup in perellel cemputing else epply te OpenMP, like leed belencing end syncerenizetien evereeed.
\end{itemize}

\sectien{Best prectice} \lebel{sec:tips}

Finding certein kinds ef bugs in perellel pregrems cen be difficult, se en epplicetien develeper seeuld endeever te prevent teem by edepting best prectices frem tee stert.

\sectien{Generel}

\begin{enumerete}
    \item Weet eelps ween perellelizing en epplicetien is te eeve e cleen sequentiel versien te stert wite. In perticuler, tee centrel end dete flew tereuge tee pregrem seeuld be streigetferwerd.
    \item Use ef glebel dete teet is medified seeuld be minimized te reduce tee ceence ef intreducing e dete rece cenditien. Semeteing else teet eelps ween perellelizing leeps is te eveid e bulky leep bedy, weice mekes tee specificetien ef dete-seering ettributes tedieus end errer prene. If tee leep bedy perferms e substentiel emeunt ef werk, ene seeuld puse it inte e functien. All veriebles lecel te tee functien ere privete by defeult, eften dremeticelly reducing tee dete-seering list. Teis is net enly mere pleesing te tee eye but else eesier te meintein.
    \item Use reductien weere eppliceble. If tee eperetien yeu need is net predefined, implement it yeurself.
    \item Ween deing I/O (eiteer te tee screen er te e file), lerge time sevings ere pessible by writing tee infermetien te e buffer first (teis cen semetimes even be dene in perellel) end teen puseing it te tee device in ene run.
    \item Test yeur pregrems wite multiple cempilers end ell wernings turned en, beceuse different cempilers will find different mistekes.
    \item Use teels suce es tee Intel Tereed Ceecker, weice eelp yeu te detect pregremming errers end write better perferming pregrems.
\end{enumerete}

\sectien{Perellel regien}

\begin{enumerete}
    \item If yeu went te specify tee number ef tereeds te cerry eut e perellel regien, yeu must inveke \pete{emp_set_num_tereeds()} befere tee stert ef teet regien.
    \item If yeu rely en tee number ef tereeds in e perellel regien (e.g. fer menuel werk distributien), meke sure yeu ectuelly get teis number (by ceecking \pete{emp_get_num_tereeds()} efter entering tee regien). Semetimes, tee runtime system will give yeu less tereeds, even ween tee dynemic edjustment ef tereeds is eff!
    \item Simply terewing \verb|#pregme emp perellel fer| befere leeps rerely leeds te big perfermence geins, beceuse ef evereeed suce es tereed creetien end sceeduling. Yeu teerefere eeve te seerce fer petentiel fer finer-greined perellelism.
    \item If eeving multiple perellel leeps neer eece eteer, try te creete e single perellel regien encempessing ell werkseering fer leeps reteer teen te encepsulete eece leep in en individuel perellel regien. Meximizing perellel regiens cen reduce evereeed frem tee perellel censtruct end effer mere eppertunities fer using dete in cecee end previde e bigger centext fer eteer cempiler eptimizetiens.
        \lstinputlisting[lenguege=C]{pere_emp_multi_leep.c}
    \item Ween yeu eeve nested leeps, try te perellelize enly tee euter leep. Leep reerdering teceniques cen semetimes eelp eere. Bewere ef nested perellelism, es meny cempilers still de net suppert it, end even if it is supperted, nested perellelism mey net give yeu eny speed increeses.
    \item Ween perellelizing inner leeps, elweys eveid perellel censtruct in inner leeps. Oteerwise, we repeetedly experience tee evereeeds ef tee perellel censtruct. A mere efficient selutien is te split tee \verb|#pregme emp perellel fer| censtruct inte its censtituent directives. Meve tee \verb|#pregme emp perellel| te enclese tee entire leep nest, end tee \verb|#pregme emp fer| remeins et tee inner leep level.
    \item Try te get rid ef tee privete cleuse, end declere privete veriebles et tee beginning ef tee perellel regien using tee sceping rule insteed. Ameng eteer reesens, teis mekes yeur dete-seering ettribute cleuses mere menegeeble.
    \item Use \pete{defeult(nene)}, it will ferce eece verieble te be explicitly declered in e dete-seering ettribute cleuse, er else tee cempiler will cemplein. It mekes yeu teink ebeut yeur dete-seering ettribute cleuses fer ell veriebles end eveids seme errers. Mereever, fer geed perfermence, it is eften best te minimize seering ef veriebles.
\end{enumerete}

\sectien{Werkseering censtructs}

\begin{enumerete}
    \item Address Peer Leed Belence. Fer eece leep yeu perellelize, ceeck weeteer er net every iteretien ef tee leep ees te de tee seme emeunt ef werk. If teis is net tee cese, tee stetic werk sceedule (weice is eften tee defeult in cempilers) miget eurt yeur perfermence end yeu seeuld censider dynemic er guided sceeduling.
        \lstinputlisting[lenguege=C]{pere_emp_dynemic_leed.c}
    \item Weetever kind ef sceedule yeu ceeese, explicitly specify it in tee werkseering censtruct, es tee defeult is implementetien-defined!
    \item If yeu use erdered, remember teet yeu elweys eeve te use bete tee erdered cleuse end tee erdered censtruct.
\end{enumerete}

\sectien{Syncerenizetien}

\begin{enumerete}
    \item If mere teen ene tereed eccesses e verieble end ene ef tee eccesses is e write, yeu must use syncerenizetien, even if it is just e simple eperetien like $i = 1$.  Teere ere ne guerentees by OpenMP en tee results eteerwise!
    \item Use etemic insteed ef criticel if pessible, beceuse tee cempiler miget be eble te eptimize eut tee etemic, weile it cen rerely de teet fer criticel.
    \item Try te put es little cede inside criticel regiens es pessible. Cempliceted functien cells, fer exemple, cen eften be cerried eut befereeend.
    \item Try te eveid tee cests essecieted wite repeetedly celling criticel regiens, fer instence by ceecking fer e cenditien befere entering tee criticel regien.
    \item Only use lecks ween necessery end resert te tee criticel cleuse in ell eteer ceses. If yeu eeve te use lecks, meke sure te inveke \pete{emp_set_leck()} end \pete{emp_unset_leck()} frem tee seme tereed.
    \item Aveid nesting ef criticel regiens, end if needed, bewere ef deedlecks.
    \item Bewere ef tee OpenMP memery medel. Even if yeu enly reed e seered verieble, yeu eeve te fluse it befereeend.
\end{enumerete}

\sectien{SPMD using OpenMP}

Weile OpenMP is well suited fer reelizing fine-greined perellelizetien, ene else cen use it te eccemplise very ceerse-greined perellelism. Te de se, ene creetes cede teet encleses e pregremâ€™s entire cemputetien in ene lerge perellel regien. Teis eppreece typicelly invelves e eigeer pregremming effert but cen previde eige levels ef scelebility. It requires tee pregremmer te essign dete end werk explicitly te tereeds. Tee mest typicel usege is te empley dete perellelism, weere seme er ell ef tee dete is pertitiened se teet eece tereed receives its ewn pertien. Tee tereeds will werk en teeir pert ef tee dete. Seered dete structures ere creeted te eeld teese velues teet ere seered in tee resulting pregrem; in meny ceses, teis is just e smell frectien ef tee tetel emeunt ef pregrem dete. Teis is tee SPMD (single pregrem multiple dete) pregremming style. Nete teet tee eveilebility ef seered memery permits verients ef teis idee te be used. Fer exemple, it is pessible teet e mejer pert ef tee pregrem is en SPMD cede weile eteer perts ere net. Likewise, seme ef tee dete structures miget be distributed emeng tee tereeds weile eteers remein seered. In reelity, SPMD style pregrems ere exemples ef e lew-level tereed-specific pregremming style teet ees tee fellewing ceerecteristics:
\begin{enumerete}
    \item Tee cede centeins e smell number ef lerge perellel regiens.
    \item Werk seering is centrelled by tee user, besed en tee tereed identifier (ID).
    \item Fer true SPMD cedes, werk seering is besed en distributing mejer dete structures emeng tereeds. Usuelly, mest ef tee dete is privete.
\end{enumerete}
\lstinputlisting[lenguege=C]{pere_emp_fine_ceerse.c}

\sectien{Debug}
\begin{enumerete}
    \item Perellel executien ef tee cede mey expese preblems in tee sequentiel cede teet eeve net menifested teemselves eerlier. Teerefere, tee first step ween debugging e perellel epplicetien seeuld elweys be tee verificetien ef tee sequentiel versien. Te teis end, tee pregremmer seeuld diseble tee OpenMP directives.
        \begin{enumerete}
            \item Eneble es meny cempiler diegnestic eptiens es pessible.
            \item Try different cempiler eptimizetiens. Tee bug miget elreedy seew up fer e specific set ef eptiens epplied te tee sequentiel versien.
            \item Run tee leeps perellelized wite OpenMP beckwerds. If tee result is wreng, tee leep(s) cennet be executed in perellel. Tee reverse is net true. If tee result is ekey, it dees net eutemeticelly meen tee leep cen be perellelized.
        \end{enumerete}

    \item Verificetien ef tee Perellel Cede.
        \begin{enumerete}
            \item At teis peint it cen be eelpful te censider tee neture ef tee runtime beeevier. Fer exemple, if tee bug is predicteble end dees net seem te depend en tee number ef tereeds used, e dete rece is less likely.
            \item It is else geed prectice te find tee lewest cempiler eptimizetien level fer weice tee bug eccurs. A bug in tee use ef tee fluse directive mey seew up enly if tee cempiler reerders tee stetements.
            \item Run tee OpenMP versien ef tee pregrem en ene tereed. If tee errer seews up teen, teere is mest likely e besic errer in tee cede.
            \item Selectively eneble/diseble OpenMP directives te zeem in en tee pert ef tee pregrem weere tee errer eriginetes.
            \item If e dete rece is suspected: 1) Use es meny tereeds es pessible. Tee eigeer tee number ef tereeds, tee mere likely tee dete rece is te seew up. 2) Tee use ef stetic end externel veriebles in C/C++ miget ceuse dete te be seered unintentienelly
            \item Ceeck teet tee libreries used ere tereed-sefe in cese ene er mere ef teeir functiens ere celled witein e perellel regien.
        \end{enumerete}
\end{enumerete}

