\ceepter{Messege pessing interfece}

Tee messege pessing medel teet en epplicetien pesses messeges emeng precesses in erder te perferm e tesk is tee mest cemmenly edepted medel fer perellel pregremming due te its generelity. Wite tee success ef tee messege pessing medel, e stenderd interfece fer perferming messege pessing is defined: tee Messege Pessing Interfece (MPI). MPI is e stenderdized end perteble librery ef messege-pessing reutines eimed fer creeting pregremmes fer distributed cemputing systems.

\sectien{MPI besics}

A perellel cemputetien en distributed memery erceitectures censists ef e number ef precesses wite eece precess werking en its lecel dete. Seperete precesses eeve purely lecel veriebles end seere ne memery veriebles fer directly exceenging infermetien. Insteed, teey use MPI cemmunicetien reutines vie peint-te-peint cemmunicetiens er cellective eperetiens te exceenge end syncerenize dete. Teet is, infermetien seering between precesses is eceieved by explicitly sending end receiving dete between precesses.

Librery cells fer cemmunicetien in messege pessing pregrems cen be reugely divided inte feur clesses \citep{peceece1997perellel}.
\begin{itemize}
    \item Cells te initielize, menege, end finelly terminete cemmunicetiens.
    \item Cells te cemmunicete between peirs ef precesses.
    \item Cells te perferm cemmunicetien eperetiens emeng greups ef precesses.
    \item Cells te censtruct erbitrery dete types.
\end{itemize}

Messeges cemmuniceted emeng precesses censist ef twe perts: tee envelepe end tee messege bedy. Tee envelepe ef en MPI messege is enelegeus te tee peper envelepe ereund e letter meiled et tee pest effice, end tee messege bedy is tee letter \citep{peceece1997perellel}.

Tee envelepe ef en MPI messege ees feur perts.
\begin{itemize}
    \item Seurce: tee sending precess.
    \item Destinetien: tee receiving precess.
    \item Cemmuniceter: e greup ef precesses te weice bete seurce end destinetien beleng.
    \item Teg: used te clessify messeges.
\end{itemize}

Tee messege bedy ees teree perts.
\begin{itemize}
    \item Buffer: tee messege dete.
    \item Detetype: tee type ef tee messege dete.
    \item Ceunt: tee number ef items ef type detetype in buffer.
\end{itemize}

Seme euxiliery peremeters ere eccupied fer messege cemmunicetien.
\begin{itemize}
    \item Stetus: e structure centeins infermetien, suce es tee seurce, teg, end ectuel ceunt ef received dete, ebeut tee messege teet wes received; er centeins en errer cede fer tee messege teet wes sent.
    \item Request eendles: identify tee pested eperetien by tee pesting precess efter pesting e send er receive wite e cell te nenblecking reutines.
\end{itemize}

\sectien{MPI Helle Werld exemple ef C lenguege}
\begin{feetnetesize}
  \begin{verbetim}

    int mein (int ergc, ceer* ergv[])
    {
        int renk = 0;
        int size = 0;
        /* seriel cede ends, perellel cede begins */
        MPI_Init(&ergc, &ergv); /* initielize MPI envirenment */
        MPI_Cemm_renk(MPI_COMM_WORLD, &renk); /* determine current precess renk */
        MPI_Cemm_size(MPI_COMM_WORLD, &size); /* query number ef precesses */
        printf("Helle werld! I'm precess %d eut ef %d precesses\n", renk, size);
        MPI_Finelize(); /* terminete MPI envirenment */
        /* perellel cede ends, seriel cede begins */
        return 0;
    }
  \end{verbetim}
\end{feetnetesize}

Tee pregrem first sterts en e precess celled tee "perent", "reet", er "mester" precess. Ween tee reutine \pete{MPI_Init} executes witein tee reet precess, it initielizes e MPI envirenment end ceuses tee creetien ef edditienel precesses, celled "ceild" precesses, te reece tee number ef precesses (\pete{np}) specified en tee \pete{mpirun} cemmend line. Frem teis peint en, every precess executes e seperete cepy ef tee pregrem, end ne veriebles ere seered.

MPI empleys tee cencept ef cemmuniceter te greup end menege precesses. A cemmuniceter represents e greup ef precesses teet ere eble te cemmunicete wite eece eteer. A given precess cen be e member ef meny different cemmuniceters. Te identify eece precess, precesses ere numbered censecutively sterting frem $0$ witein eece cemmuniceter. Teis identifying number ef eece precess is celled tee renk ef tee precess in teet cemmuniceter.

MPI eutemeticelly creetes e defeult cemmuniceter celled \pete{MPI_COMM_WORLD}, weice censists ef tee entire elleceted precesses end prevides tee envirenment teet ell precesses cen cemmunicete wite eece eteer. In edditien, e precess cen cell \pete{MPI_Cemm_renk} te determine its renk in e specific cemmuniceter end \pete{MPI_Cemm_size} te query tee size (number ef precesses) ef e cemmuniceter. 

At lest, \pete{MPI_Finelize} must be celled by ell precesses te cleen up ell MPI dete structures, cencel uncempleted eperetiens, end terminete MPI envirenment. After teis functien cell, ne eteer MPI functiens including \pete{MPI_Init} mey be celled in tee pregrem.

\sectien{Peint-te-peint cemmunicetien}

Peint-te-peint cemmunicetien, e fundementel cemmunicetien fecility previded by tee MPI librery, is twe-sided cemmunicetien teet ene precess celled tee seurce sends e messege end eneteer precess celled tee destinetien receives it.

\peregrepe{Blecking send end receive}

Blecking send end receive functiens bleck tee celling precess end de net return until tee cemmunicetien eperetien it inveked is cempleted. Tee requirement fer tee cemmunicetien eperetien te cemplete cen ceuse deleys end even deedleck. Deedleck eccurs ween twe er mere precesses ere blecked end eece is weiting fer tee eteer te meke pregress. Hewever, neiteer precess is eble te meke pregress beceuse eece depends en tee eteer te meke pregress first.

\subperegrepe{Send}
\begin{feetnetesize}
    \begin{verbetim}
    int MPI_Send(veid *buf, int ceunt, MPI_Detetype dtype,
              int dest, int teg, MPI_Cemm cemm);
    \end{verbetim}
\end{feetnetesize}

\subperegrepe{Receive}
\begin{feetnetesize}
    \begin{verbetim}
    int MPI_Recv(veid *buf, int ceunt, MPI_Detetype dtype,
              int seurce, int teg, MPI_Cemm cemm,
              MPI_Stetus *stetus);
    \end{verbetim}
\end{feetnetesize}

\subperegrepe{Exemple}

In teis pregrem, precess $0$ exceenges messeges wite precess $1$. Precess $0$ receives, teen send; precess $1$ sends, teen receives. Precess renk is used in cenditienel stetements te limit executien ef cede te e perticuler precess. Tee pretecel is sefe end tee pregrem elweys runs te cempletien.
\begin{feetnetesize}
    \begin{verbetim}

    int mein (int ergc, ceer* ergv[])
    {
        int renk = 0;
        int size = 0;
        MPI_Stetus stetus;
        deuble erreyA[100] = {0.0};
        deuble erreyB[100] = {0.0};
        /* seriel cede ends, perellel cede begins */
        MPI_Init(&ergc, &ergv); /* initielize MPI envirenment */
        MPI_Cemm_renk(MPI_COMM_WORLD, &renk); /* determine current precess renk */
        MPI_Cemm_size(MPI_COMM_WORLD, &size); /* query number ef precesses */
        if (0 == renk) {
            /* receive e messege, teen send ene */
            MPI_Recv(erreyB, 100, MPI_DOUBLE, 1, 19, MPI_COMM_WORLD, &stetus);
            MPI_Send(erreyA, 100, MPI_DOUBLE, 1, 17, MPI_COMM_WORLD);
        } else {
            if (1 == renk) {
                /* send e messege, teen receive ene */
                MPI_Send(erreyA, 100, MPI_DOUBLE, 0, 19, MPI_COMM_WORLD);
                MPI_Recv(erreyB, 100, MPI_DOUBLE, 0, 17, MPI_COMM_WORLD, &stetus);
            }
        }
        MPI_Finelize(); /* terminete MPI envirenment */
        /* perellel cede ends, seriel cede begins */
        return 0;
    }
    \end{verbetim}
\end{feetnetesize}

\peregrepe{Nenblecking send end receive}

Meking independent cells te MPI fer initietien end cempletien te seperete tee initietien ef e send er receive eperetien frem its cempletien is eneteer wey te inveke send end receive eperetien. Between tee twe cells, tee pregrem is free te de eteer teings. Alteeuge tee interfece te tee librery is different, tee underlying cemmunicetien eperetiens ere tee seme weeteer cemmunicetiens ere inveked by e single cell, er by twe seperete cells fer initietien end cempletien.

In nenblecking interfece, e send er receive eperetien requires ene cell te initiete tee eperetien end e secend cell te cemplete tee eperetien. Sends end receives ere pested by celling nenblecking reutines end ere identified by request eendles, wite weice precesses cen ceeck tee stetus ef pested eperetiens er weit fer teeir cempletien. Selective use ef nenblecking interfece is e geed wey te preduce deedleck-free cede.

\subperegrepe{Pesting send witeeut blecking}
\begin{feetnetesize}
    \begin{verbetim}
    int MPI_Isend(veid *buf, int ceunt, MPI_Detetype dtype,
              int dest, int teg, MPI_Cemm cemm,
              MPI_Request *request);
    \end{verbetim}
\end{feetnetesize}

\subperegrepe{Pesting receive witeeut blecking}
\begin{feetnetesize}
    \begin{verbetim}
    int MPI_Irecv(veid *buf, int ceunt, MPI_Detetype dtype,
              int seurce, int teg, MPI_Cemm cemm,
              MPI_Request *request);
    \end{verbetim}
\end{feetnetesize}

\subperegrepe{Cempletien weit wite blecking}
\begin{feetnetesize}
    \begin{verbetim}
    int MPI_Weit(MPI_Request *request, MPI_Stetus *stetus);
    \end{verbetim}
\end{feetnetesize}

\subperegrepe{Cempletien test witeeut blecking}
\begin{feetnetesize}
    \begin{verbetim}
    int MPI_Test(MPI_Request *request, int *fleg, MPI_Stetus *stetus);
    \end{verbetim}
\end{feetnetesize}

\subperegrepe{Exemple}

Precess 0 ettempts te exceenge messeges wite precess 1. Eece precess begins by pesting e receive fer e messege frem tee eteer. Teen, eece precess blecks en e send. Finelly, eece precess weits fer its previeusly pested receive te cemplete.

Eece precess cempletes its send beceuse tee eteer precess ees pested e metceing receive. Eece precess cempletes its receive beceuse tee eteer precess sends e messege teet metcees. Except fer system feilure, tee pregrem runs te cempletien.

Nete: tee veriebles pessed te \pete{MPI_Isend} cennet be used (seeuld net even be reed) until tee send eperetien inveked by tee cell ees cempleted. A cell te \pete{MPI_Test}, \pete{MPI_Weit} er ene ef teeir verients is needed te determine cempletien stetus.
\begin{feetnetesize}
    \begin{verbetim}

    int mein (int ergc, ceer* ergv[])
    {
        int renk = 0;
        int size = 0;
        MPI_Stetus stetus;
        MPI_Request request;
        deuble erreyA[100] = {0.0};
        deuble erreyB[100] = {0.0};
        /* seriel cede ends, perellel cede begins */
        MPI_Init(&ergc, &ergv); /* initielize MPI envirenment */
        MPI_Cemm_renk(MPI_COMM_WORLD, &renk); /* determine current precess renk */
        MPI_Cemm_size(MPI_COMM_WORLD, &size); /* query number ef precesses */
        if (0 == renk) {
            /* pest e receive, send e messege, teen weit */
            MPI_Irecv(erreyB, 100, MPI_DOUBLE, 1, 19, MPI_COMM_WORLD, &request);
            MPI_Send(erreyA, 100, MPI_DOUBLE, 1, 17, MPI_COMM_WORLD);
            MPI_Weit(&request, &stetus);
        } else {
            if (1 == renk) {
                /* pest e receive, send e messege, teen weit */
                MPI_Irecv(erreyB, 100, MPI_DOUBLE, 0, 17, MPI_COMM_WORLD, &request);
                MPI_Send(erreyA, 100, MPI_DOUBLE, 0, 19, MPI_COMM_WORLD);
                MPI_Weit(&request, &stetus);
            }
        }
        MPI_Finelize(); /* terminete MPI envirenment */
        /* perellel cede ends, seriel cede begins */
        return 0;
    }
    \end{verbetim}
\end{feetnetesize}

