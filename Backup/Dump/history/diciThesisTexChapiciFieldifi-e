\chapter{A Field Function for Solving Complex and Dynamic Fluid-Solid Systems}
\label{cha:field}

\section{Introduction}

    Modeling complex and dynamic fluid-solid systems requires the simulation of coupled multiphase interactions. In this chapter, a simple field function is presented for facilitating the solution of fluid-solid systems on Cartesian grids with interface-resolved fluid-solid and solid-solid interactions. For a Cartesian-grid-discretized computational domain segmented by a set of solid bodies, the proposed field function can uniquely track all the subdomains with multiple layers of interfacial nodes using only one integer field in total. As a result, the present field function enables single-integer-based multidomain node mapping, efficient node remapping, linear-time collision detection, and expedient surface force integration. Implementation algorithms for the field function and its associated functionalities are presented. Equipped with a deterministic multibody collision model, numerical experiments involving complex and dynamic fluid-solid systems solved via immersed boundary treatments are conducted to validate and demonstrate the applicability of the proposed field function.

\section{Method development}

\subsection{Field function description}

As illustrated in Fig.~\ref{fig:n_domain_basis_demo}, for a set of solids represented by triangulated polyhedrons $\{\Omega_p: \ p = 1, \dotsc, P\}$ and distributed in a spatial domain $\Omega$, an additional subdomain $\Omega_0$ can be introduced as
\begin{equation}
    \Omega_0 = \{\Vector{x} \in \Omega: \Vector{x} \notin \cup_{p=1}^P\Omega_p\}
\end{equation}
\begin{figure}[!htbp]
    \centering
    \includegraphics[width=0.8\textwidth]{n_domain_basis_demo}
    \caption{A schematic diagram illustrating a set of polyhedron domains distributed in a spatial domain discretized by a Cartesian grid.}
    \label{fig:n_domain_basis_demo}
\end{figure}

When a Cartesian grid $I \times J \times K$ is used to discretize the spatial domain $\Omega$, it is necessary to build a node map for defining the spatial relation between computational nodes and the individual polyhedral subdomains. In this study, a two-component integer-type field function is developed to classify each node with regard to $\Omega_m$ and also to identify $R$ layers of interfacial nodes for each $\Omega_m$, $m = 0, \dotsc, P$:
\begin{equation}
    \Vector{\Phi} = \{(\phi, \varphi): \phi \in \{0, \dotsc, P\}, \varphi \in \{0, \dotsc, R\}\}
\end{equation}
in which $\phi$ is the domain identifier and is determined by the point inclusion state:
\begin{equation} \label{eq:phicondition}
    \phi_{i,j,k} = m, \ \text{if}\ \Vector{x}_{i,j,k} \in \Omega_m
\end{equation}
and $\varphi$ is the interfacial layer identifier and is determined by the existence of a heterogeneous node $(i', j', k')$, that is, a node with a different $\phi$ value, in the range $L(r)$ surrounding the processing node $(i, j, k)$:
\begin{equation} \label{eq:varphicondition}
    \varphi_{i,j,k} = 
    \begin{cases}
        \min{\{r\}}, &\ \text{if}\ \exists \, \phi_{i',j',k'} \neq \phi_{i,j,k} \ \text{in range}\ $L(r)$\\
        0, &\ \text{if}\ r > R 
    \end{cases}
\end{equation}
here $\Vector{x}_{i,j,k}$ is the position vector of the node $(i, j, k)$, and $R$ represents the maximum layers of interfacial nodes that needs to be identified. The range $L(r)$ is the size of numerical stencils used for the spatial discretization of the governing equations at the node $(i, j, k)$. Therefore, the range $L(r)$ needs to be adapted according to the involved differential operators and spatial schemes. For example, the discretization of non-mixed and mixed derivatives requires $L(r)$ to be the line-type stencils in Eq.~\eqref{eq:linetypeq} and the plane-type stencils in Eq.~\eqref{eq:mixedtypeq}, respectively. Note that the determination of the last three criteria in Eq.~\eqref{eq:mixedtypeq} is to maximize the overlap between the first three criteria and the last three ones.
\begin{equation} \label{eq:linetypeq}
    \begin{cases}
        |i'-i| = r, \, |j'- j| = 0, \, |k'- k| = 0 &\ \text{or}\\
        |i'-i| = 0, \, |j'- j| = r, \, |k'- k| = 0 &\ \text{or}\\
        |i'-i| = 0, \, |j'- j| = 0, \, |k'- k| = r
    \end{cases}
\end{equation}
\begin{equation} \label{eq:mixedtypeq}
    \begin{cases}
        |i'-i| = r, \, |j'- j| = 0, \, |k'- k| = 0 &\ \text{or}\\
        |i'-i| = 0, \, |j'- j| = r, \, |k'- k| = 0 &\ \text{or}\\
        |i'-i| = 0, \, |j'- j| = 0, \, |k'- k| = r &\ \text{or}\\
        |i'-i| = r-1, \, |j'- j| = r-1, \, |k'- k| = 0 &\ \text{or}\\
        |i'-i| = r-1, \, |j'- j| = 0, \, |k'- k| = r-1 &\ \text{or}\\
        |i'-i| = 0, \, |j'- j| = r-1, \, |k'- k| = r-1
    \end{cases}
\end{equation}

\subsection{Single-integer-based multidomain node mapping}

The field function $\Vector{\Phi}(\phi,\varphi)$ can produce a complete node map for the numerical discretization of complex fluid-solid systems. As shown in Fig.~\ref{fig:n_domain_demo}, for each node $(i,j,k)$, $\phi_{i,j,k}$ and $\varphi_{i,j,k}$ can provide the subdomain and interfacial state, respectively.

In general, when $\Omega_m$ is a solution domain, two approaches are available to compute the solutions in $\Omega_m$. 1) a non-ghost-cell approach, in which $\Vector{\Phi}_{i,j,k}(\phi=m, \varphi=0)$ represents a normal solution node, and $\Vector{\Phi}_{i,j,k}(\phi=m, \varphi>0)$ represents a node locating at the numerical boundary of $\Omega_m$. 2) a ghost-cell approach, in which $\Vector{\Phi}_{i,j,k}(\phi=m, \varphi \ge 0)$ represents a normal solution node, and $\Vector{\Phi}_{i,j,k}(\phi \neq m, \varphi>0)$ with a node $\Vector{\Phi}_{i',j',k'}(\phi = m, \varphi \ge 0)$ existing in the range $L(r)$ of the node $(i,j,k)$ represents a node locating at the numerical boundary of $\Omega_m$.

When the space occupied by $\Omega_m$ changes in time, interfacial nodes of another domain $\Omega_n$ can change their corresponding domain and become interfacial nodes of $\Omega_m$. In a non-ghost-cell approach, the newly joined interfacial nodes of $\Omega_m$ always become boundary nodes, whose values will be constructed by boundary treatment. However, in a ghost-cell approach, the newly joined interfacial nodes of $\Omega_m$ directly become normal solution nodes of the solution domain $\Omega_m$. Therefore, a special treatment, such as a reconstruction for the values of the newly joined nodes from the values of the original normal solution nodes of $\Omega_m$ is required to deal with these newly joined nodes.

For a computational domain segmented by a set of solid bodies, the proposed field function $\Vector{\Phi}(\phi,\varphi)$ uniquely identifies all the subdomains with multiple layers of interfacial nodes. Therefore, it is straightforward to apply designated governing equations, constitutive models, numerical schemes, and boundary conditions for each subdomain. In the practical implementation, the two-component $\Vector{\Phi}(\phi,\varphi)$ can be mapped onto a single scalar $\Phi = \phi + \varphi * (P+1)$, from which individual components can be extracted through $\varphi = \Phi \Des{\,mod\,} (P+1)$ and $\phi = \Phi - \varphi * (P+1)$, respectively. As an integer-type field function that can be stored on a single grid, the proposed field function herein enables single-integer-based multidomain node mapping and consumes memory that is independent of the number of represented objects. For instance, assume that the number of nodes for defining a field function is $M$ and the number of represented objects is $P$, the estimated memory consumption for using the proposed field function is then about $1/P$ of that for using a binary node-mapping function. This low-memory requirement can be particularly useful for applications involving a large set of solid bodies, such as in solving fluid-solid systems with thousands of colliding particles.
\begin{figure}[!htbp]
    \centering
    \includegraphics[width=0.8\textwidth]{n_domain_demo}
    \caption{A schematic diagram illustrating the field function $\Vector{\Phi}(\phi,\varphi)$ for multidomain node mapping. The value of $\phi$ is represented by \emph{shapes}: $\circ = 0$; $\bigtriangleup = 1$; $\star = p$; $\square = P$. The value of $\varphi$ is represented by \emph{colors}: ${\color{gray} \bullet} = 0$; ${\color{red} \bullet} = 1$. $R = 1$ is adopted here for clarification.}
    \label{fig:n_domain_demo}
\end{figure}

\subsection{Efficient node remapping} \label{sec:remap}

During the solution process, when the positions of polyhedrons keep changing, the requirement for node remapping arises. As illustrated in Fig.~\ref{fig:node_remapping_demo}, the field function $\Vector{\Phi}(\phi,\varphi)$ enables efficient node remapping: From time $t^n$ to $t^{n+1}$, suppose the domain occupied by $\Omega_p$ changing from $\Omega_p^n$ to $\Omega_p^{n+1}$. When the computational time step size is restricted by a stability condition such as the Courant--Friedrichs--Lewy (CFL) condition \citep{courant1927partial}, the boundary of $\Omega_p$ will correspondingly have restricted travelling distance. If the stability condition restricts the value of travelling distance to no more than one grid size, and the maximum number of identified interfacial layers has $R \ge 2$, it is safe to assume that a node $(i,j,k)$ with $\Vector{\Phi}_{i,j,k}(\phi=p,\varphi=0)$ in $\Omega_p^n$ will remain in $\Omega_p^{n+1}$, and then only the interfacial nodes need to be reset. As a result of this temporal coherence, nodes with $\Vector{\Phi}_{i,j,k}(\phi=p,\varphi=0)$ can be exempted from future point-inclusion tests. As these non-interfacial nodes constitute the major fraction of the computational nodes in a practical grid, this exemption from the expensive point-inclusion test can significantly reduce the costs of node remapping to obtain an acceleration rate inversely proportional to the surface-to-volume ratio of polyhedrons. An efficient node remapping algorithm adopting the described temporal coherence is proposed in the present study as the following:
\begin{figure}[!htbp]
    \centering
    \includegraphics[width=0.8\textwidth]{node_remapping_demo}
    \caption{A schematic diagram illustrating the field function $\Vector{\Phi}(\phi,\varphi)$ for efficient node remapping. The value of $\phi$ is represented by \emph{shapes}: $\circ = 0$; $\star = p$. The value of $\varphi$ is represented by \emph{colors}: ${\color{gray} \bullet} = 0$; ${\color{red} \bullet} = 1$; ${\color{blue} \bullet} = 2$. $R=2$ is adopted, and the interfacial nodes of $\Omega_0$ are not shown for clarification.}
    \label{fig:node_remapping_demo}
\end{figure}
\begin{enumerate}
    \item \emph{Initialization}. Sweep each node $(i,j,k)$ in $I \times J \times K$: if $\varphi_{i,j,k} > 0$, set $\Vector{\Phi}_{i,j,k}(\phi,\varphi) = (0,0)$.
    \item \emph{Compute the domain identifier $\phi$}. Sweep each polyhedron $\Omega_p$ in $\{\Omega_p: \ p = 1, \dotsc, P\}$:
        \begin{enumerate}
            \item Find the bounding box $B_p=[I_{\Des{min}}, I_{\Des{max}}] \times [J_{\Des{min}}, J_{\Des{max}}] \times [K_{\Des{min}}, K_{\Des{max}}]$. 
            \item Sweep each node $(i,j,k)$ in $B_p$: if $\phi_{i,j,k} = 0$, do point-in-polyhedron test for the node $(i,j,k)$ over $\Omega_p$ to determine the value of $\phi_{i,j,k}$ using Eq.~\eqref{eq:phicondition}.
        \end{enumerate}
    \item \emph{Compute the interfacial layer identifier $\varphi$}. Sweep each node $(i,j,k)$ in $I \times J \times K$: determine the value of $\varphi_{i,j,k}$ using Eq.~\eqref{eq:varphicondition}.
\end{enumerate}

In the described algorithm, the point-in-polyhedron test for the node $(i,j,k)$ over $\Omega_p$ is a point-inclusion test with regard to a single polyhedron. A variety of established methods, such as the ray-crossing methods \citep{o1998computational}, angular methods \citep{carvalho1995point}, winding number methods \citep{haines1994point}, and signed distance methods \citep{jones20063d}, are available. The angle weighted pseudonormal signed distance computation method \citep{baerentzen2005signed} is employed herein for a balance of efficiency and robustness. Meanwhile, it finds the closest point, the distance to surface, and the surface normal for a computational node with regard to the solid geometry, which is essential for implementing a Cartesian grid-based boundary treatment method.

The proposed algorithm herein effectively solves the node classification and boundary identification issues simultaneously for a Cartesian grid segmented by a set of polyhedrons in space, which involves a set of points together with a set of polyhedrons and represents a generalized point-in-polyhedron problem. In addition, since $\Vector{\Phi}(\phi,\varphi) = (0,0)$ is true initially, the presented algorithm successfully unifies the procedures of the initial multidomain node mapping and the subsequent node remapping for moving objects. This unification can simplify the code structure and reduce the complexity of implementation.

\subsection{Linear-time collision detection}

As captured in Fig.~\ref{fig:n_domain_collide_demo}, employing the field function $\Vector{\Phi}(\phi,\varphi)$, polyhedrons $\{\Omega_{n}\}$ colliding with $\Omega_p$ can be detected efficiently via sweeping through nodes $(i,j,k)$ with $\Vector{\Phi}_{i,j,k}(\phi=p,\varphi=1)$ in the bounding box of $\Omega_p$ to detect nodes $(i',j',k')$ with $\Vector{\Phi}_{i',j',k'}(\phi \neq p, \varphi=1)$ in the range $|i-i'| \leq 1$, $|j-j'| \leq 1$, and $|k-k'| \leq 1$. 
\begin{figure}[!htbp]
    \centering
    \includegraphics[width=0.8\textwidth]{n_domain_collide_demo}
    \caption{A schematic diagram illustrating the field function $\Vector{\Phi}(\phi,\varphi)$ for collision detection. The value of $\phi$ is represented by \emph{shapes}: $\circ = 0$; $\bigtriangleup = 1$; $\star = n$; $\square = N$; $\diamond = p$. The value of $\varphi$ is represented by \emph{colors}: ${\color{gray} \bullet} = 0$; ${\color{red} \bullet} = 1$. $R=1$ is adopted, and the interfacial nodes of $\Omega_0$ are not shown here for clarification.}
    \label{fig:n_domain_collide_demo}
\end{figure}

Comparing to explicit surfaces such as triangulated meshes, implicit surfaces, such as the binary node-mapping functions and the proposed integer field function herein, for collision detection have algorithm efficiency and complexity that are much less sensitive to geometric complexity. This is because collision detection for implicit surfaces uses point-wise data comparison rather than facet-wise distance calculation as the basic operator and is independent of the number of facets and the level of concavity.

On a given Cartesian grid, let $\Soptr_{\Des{cd}}$ represent the collision detection operator for an interfacial node $(i,j,k)$ in a polyhedron $\Omega_p$. $\Soptr_{\Des{cd}}$ based on a binary node mapping involves fetching and comparing of about $P$ floating-point or integer data scattered in $P$ field functions, while $\Soptr_{\Des{cd}}$ based on $\Vector{\Phi}$ requires fetching and comparing of about $2$ integer data per spatial dimension locally located on one Cartesian grid. Therefore, the algorithm complexity of collision detection for $P$ polyhedrons can be $\Order(P^2)$ for using a binary node mapping but only $\Order(P)$ for using the proposed field function $\Vector{\Phi}$ herein.

During $\Omega_p$ colliding with $\Omega_n$, it is possible that several geometric elements, such as vertices, edges, and faces, of $\Omega_p$ and $\Omega_n$ can be in contact simultaneously. In addition, one element of $\Omega_p$ could come into contact with a few elements of $\Omega_n$ at the same time. This multicontact issue imposes challenges in finding the line of impact for collision modeling. 

Approximating the line of impact via the proposed field function $\Vector{\Phi}(\phi,\varphi)$ can then provide an alternative perspective to the approximation via explicit surfaces defined by triangulated meshes. Suppose $C$ nodes $(i_c,j_c,k_c)$, $c = 1, \dotsc, C$, in $\Omega_p$ satisfying $\Vector{\Phi}_{i_c,j_c,k_c}(\phi = p, \varphi=1)$, and each $(i_c,j_c,k_c)$ comes with $D$ neighboring nodes $(i'_d,j'_d,k'_d)$, $d = 1, \dotsc, D$, such that $\Vector{\Phi}_{i'_d,j'_d,k'_d}(\phi = n, \varphi=1)$, the suggested approximation of the line of impact between $\Omega_p$ and $\Omega_n$ is defined as
\begin{equation}
    \unitVector{e}_{pn} = \frac{\sum^{C}_{c=1}\sum^{D}_{d=1} [(i'_d - i_c)\unitVector{e}_1 + (j'_d - j_c)\unitVector{e}_2 + (k'_d - k_c)\unitVector{e}_3]}{|\sum^{C}_{c=1}\sum^{D}_{d=1} [(i'_d - i_c)\unitVector{e}_1 + (j'_d - j_c)\unitVector{e}_2 + (k'_d - k_c)\unitVector{e}_3]|}
\end{equation}
where $\unitVector{e}_1$, $\unitVector{e}_2$, $\unitVector{e}_3$ are the unit vectors in the $x$, $y$, and $z$ directions, respectively. This approximation of the line of impact via the field function can simplify the multicontact problem with adequate accuracy, as to be demonstrated in the numerical experiments later.

\subsection{Deterministic collision response}

Assume $N$ polyhedrons $\{\Omega_n\}$, $n=1,\dotsc,N$, colliding with $\Omega_p$ simultaneously, the pre- and post-collision velocity of $\Omega_p$ as $\Vector{V}_p$ and $\Vector{V}_p'$, respectively, and the pre-collision velocity of $\Omega_n$ as $\Vector{V}_n$. A collision model that approximates multibody collision without introducing temporal priority and also extends the applicability of the model in \citep{mo2018numerical} to a wider range of multibody collision scenarios is employed herein:
\begin{enumerate}
    \item Conduct the $n$-th pairwise collision $(\Omega_p, \Omega_n)$ with the pre-collision velocity $(\Vector{V}_p,\Vector{V}_n)$ to solve the corresponding post-collision velocity $\Vector{V}_{p,n}'$ and the velocity change $\Delta \Vector{V}_{p,n}'$ of $\Omega_p$:
        \begin{equation}
            \Delta \Vector{V}_{p,n}' = \Vector{V}_{p,n}' - \Vector{V}_p = - \frac{m_n}{m_p+m_n} (1+C_{\Des{R}}) (\Vector{V}_{pn} \cdot \unitVector{e}_{pn}) \unitVector{e}_{pn} - C_{\Des{f}} [\Vector{V}_{pn} - (\Vector{V}_{pn} \cdot \unitVector{e}_{pn}) \unitVector{e}_{pn}]
        \end{equation}
        in which $\Vector{V}_{pn}= (\Vector{V}_p - \Vector{V}_n)$, $C_{\Des{R}}$ is the coefficient of restitution in the normal direction ($C_{\Des{R}} = 0$, $0 < C_{\Des{R}} < 1$, and $C_{\Des{R}} = 1$ corresponds to perfectly inelastic collision, partially inelastic collision, and elastic collision, respectively), $C_{\Des{f}}$ represents the effect of sliding friction, $m_p$ and $m_n$ are the mass of $\Omega_p$ and $\Omega_n$, respectively.

    \item Next, approximate the post-collision velocity of $\Omega_p$ under the multibody collision via a vector summation of the pre-collision velocity and velocity changes:
        \begin{equation}
            \Vector{V}_p' = \Vector{V}_p + \sum_{n=1}^{N} \Delta \Vector{V}_{p,n}'
        \end{equation}

    \item Apply the above procedures to each $\Omega_p$, $p=1,\dotsc,P$, in the solid system to obtain a post-collision velocity $\Vector{V}_p'$ after multibody collision.
    \item Update the velocity state of each $\Omega_p$ through replacing the pre-collision velocity $\Vector{V}_p$ by the post-collision velocity $\Vector{V}_p'$. 
\end{enumerate}

Avoiding any temporal priority in each polyhedron and each collision, the proposed multibody collision algorithm based on exact pairwise collision is deterministic and can be parallelized.

\subsection{Expedient surface force integration}

In the interface-resolved modeling of fluid-solid interactions, surface force integration is an essential part. The proposed field function $\Vector{\Phi}(\phi,\varphi)$ can aid the surface force integration for irregular solids immersed in a Cartesian grid.

Employing the proposed field function and its implementation algorithm, the computed three inner interfacial layers of an irregular solid immersed in a Cartesian grid are shown in Fig.~\ref{fig:wall_shear_stress_layer}. It can be observed that the $\varphi=1$ layer conforms with the solid boundary very closely, in which the distance discrepancy reduces with mesh refinement and is in the interval $[0, \Delta s)$, where $\Delta s=\max(\Delta_x, \Delta_y, \Delta_z)$. Therefore, for a non-ghost-cell approach, the integration of surface forces can be conducted on the $\varphi=2$ layer in the fluid domain, of which the values of flow variables are known and the distance discrepancy with solid boundary is in the interval $[\Delta s, 2\Delta s)$. Meanwhile, for a ghost-cell approach, the integration of surface forces can be properly conducted on the corresponding point layer formed by the image points of the $\varphi=2$ nodes of the solid.

Here, the surface force integration in the ghost-cell approach is discussed and applied in this study, as the method can be easily transformed for a non-ghost-cell approach, whose surface force integration is more straightforward. By exploring the relation between the ghost node $G$, the boundary point $O$, and the image point $I$, the surface force integration in a ghost-cell approach can be simplified as discussed below.
\begin{figure}[!htbp]
    \centering
    \begin{subfigure}[b]{0.48\textwidth}
        \includegraphics[trim = 10mm 0mm 10mm 0mm, clip, width=\textwidth]{wall_shear_stress_layer}
        \caption{}
        \label{fig:wall_shear_stress_layer}
    \end{subfigure}%
    ~
    \begin{subfigure}[b]{0.48\textwidth}
        \includegraphics[width=\textwidth]{wall_shear_stress_demo}
        \caption{}
        \label{fig:wall_shear_stress_demo}
    \end{subfigure}%
    \caption{Diagrams of applying the field function $\Vector{\Phi}(\phi,\varphi)$ for surface force integration over immersed boundaries. (a) Computational results showing the interfacial layer identifier $\varphi$ for an irregular solid immersed in a Cartesian grid. The value of $\varphi$ is represented by \emph{colors}: ${\color{gray} \bullet} = 0$; ${\color{red} \bullet} = 1$; ${\color{blue} \bullet} = 2$; ${\color{black} \bullet} = 3$. (b) A schematic diagram illustrating wall shear stress calculation. [Nomenclature: $G$, ghost node; $O$, boundary point; $I$, image point; $\Omega_1$, fluid domain; $\Omega_2$, solid domain; $IB$, immersed boundary.]}
    \label{fig:wall_shear_stress}
\end{figure}

\paragraph{Wall pressure}

Pressure at the wall can generally be approximated via the zero normal gradient assumption
\begin{equation}
    \left. \frac{\partial p}{\partial n} \right|_O = 0
\end{equation}
Therefore,
\begin{equation}
    p_O = p_I = p_G
\end{equation}
Thus, the pressure component in the surface stress vector is
\begin{equation}
    -p_G \unitVector{n}
\end{equation}

\paragraph{Wall shear stress}

As illustrated in Fig.~\ref{fig:wall_shear_stress_demo}, suppose a natural coordinate system, $\eta-\xi$, is placed at the boundary point $O$ and is located in the plane defined by the normal vector $(\unitVector{n} \times \Vector{V}_{IO})$, where $\Vector{V}_{IO} = \Vector{V}_I - \Vector{V}_O$ is the relative velocity of the image point $I$ to the boundary point $O$. Then, the wall shear stress is defined as
\begin{equation}
    \Vector{\tau}_{\Des{w}} \equiv \Vector{\tau}(\eta =0) = \mu \left. \frac{\partial \Vector{V}^{\xi}_{IO}}{\partial \eta}\right|_{\eta=0}
\end{equation}
A second-order central differencing approximation gives
\begin{equation}
    \Vector{\tau}_{\Des{w}} = \mu \frac{\Vector{V}^{\xi}_{IO} - \Vector{V}^{\xi}_{GO}}{2||\Vector{x}_I - \Vector{x}_O||}
\end{equation}
By using $\Vector{V}_{IO} = - \Vector{V}_{GO}$, $||\Vector{x}_I - \Vector{x}_O|| = ||\Vector{x}_G - \Vector{x}_O||$, and $\Vector{V}^{\xi}_{GO} = \Vector{V}_{GO} - (\Vector{V}_{GO} \cdot \unitVector{n}) \unitVector{n}$, it gives
\begin{equation}
    \Vector{\tau}_{\Des{w}} = - \mu \frac{\Vector{V}_{GO} - (\Vector{V}_{GO} \cdot \unitVector{n}) \unitVector{n}}{||\Vector{x}_G - \Vector{x}_O||}
\end{equation}
Hence, the surface stress vector at the boundary point $O$ is obtained as
\begin{equation}
    \Vector{T}_{O}^{(\unitVector{n})} = -p_G \unitVector{n} + \Vector{\tau}_{\Des{w}} = -p_G \unitVector{n} - \mu \frac{\Vector{V}_{GO} - (\Vector{V}_{GO} \cdot \unitVector{n}) \unitVector{n}}{||\Vector{x}_G - \Vector{x}_O||}
\end{equation}

By employing the derived relations, the surface force integration for irregular solids can be directly computed and expressed in the global Eulerian coordinate system without involving coordinate transformation. In addition, both the wall pressure and the wall shear stress are explicitly computed at the ghost node $G$, which is a computational node with known flow values. As a result, the proposed surface force integration method is straightforward to implement.

\section{Numerical experiments}

\subsection{A wind tunnel test constructed via field function}

A numerical wind tunnel test is constructed to illustrate the proposed field function for complex multidomain node mapping. As shown in Fig.~\ref{fig:missile_short_demo_divide_note}, $8$ triangulated polyhedrons $\{\Omega_p: \ p = 1, \dotsc, 8\}$ and a spatial domain $\Omega$ are used. $\Omega_1$ is a cone with an opening angle $\theta_1 = 30^{\circ}$ and height $h_1 = 0.5 \Unit{m}$. $\Omega_2$ is a cylinder with length $l_2 = h_1$ and radius $r_2 = h_1 \tan{(\theta_1 / 2)}$. $\Omega_{3-6}$ are four irregular polyhedrons with an identical geometry, of which the thickness is $w_3 = 0.02 \Unit{m}$ and the lengths of the other five edges counting from the shortest one clockwise are $0.01 \Unit{m}$, $0.1\sqrt{2} \Unit{m}$, $0.1 \Unit{m}$, $0.11 \Unit{m}$, and $0.2 \Unit{m}$, respectively. $\Omega_7$ is a sphere of radius $r_7 = r_2$. $\Omega_8$ is a polyhedron whose outer profile is a box of size $l_8 \times h_8 \times w_8 = 2.5 \Unit{m} \times 0.6 \Unit{m} \times 0.6 \Unit{m}$ and inner profile is a cylindrical cavity with length $l_8$ and radius $r_8 = 0.25 \Unit{m}$. The spatial domain $\Omega$ is a box of size $l \times h \times w = 2.0 \Unit{m} \times 0.55 \Unit{m} \times 0.55 \Unit{m}$.
\begin{figure}[!htbp]
    \centering
    \begin{subfigure}[b]{0.44\textwidth}
        \includegraphics[width=\textwidth]{missile_short_demo_divide_note}
        \caption{}
        \label{fig:missile_short_demo_divide_note}
    \end{subfigure}%
    ~
    \begin{subfigure}[b]{0.44\textwidth}
        \includegraphics[width=\textwidth]{missile_short_demo_assemble}
        \caption{}
        \label{fig:missile_short_demo_assemble}
    \end{subfigure}%
    \\
    \begin{subfigure}[b]{0.44\textwidth}
        \includegraphics[width=\textwidth]{missile_short_demo_did_main}
        \caption{}
        \label{fig:missile_short_demo_did_main}
    \end{subfigure}%
    ~
    \begin{subfigure}[b]{0.44\textwidth}
        \includegraphics[width=\textwidth]{missile_short_demo_did_all}
        \caption{}
        \label{fig:missile_short_demo_did_all}
    \end{subfigure}%
    \\
    \begin{subfigure}[b]{0.44\textwidth}
        \includegraphics[width=\textwidth]{missile_short_demo_lid}
        \caption{}
        \label{fig:missile_short_demo_lid}
    \end{subfigure}%
    ~
    \begin{subfigure}[b]{0.44\textwidth}
        \includegraphics[width=\textwidth]{missile_short_demo_gst}
        \caption{}
        \label{fig:missile_short_demo_gst}
    \end{subfigure}%
    \caption{The construction of a numerical wind tunnel test via the field function $\Vector{\Phi}(\phi,\varphi)$. (a) The employed polyhedrons $\{\Omega_p: \ p = 1, \dotsc, 8\}$ and spatial domain $\Omega$. (b) The constructed wind tunnel test. (c) The computational nodes with $\Vector{\Phi}_{i,j,k}(\phi=0, \varphi)$. (d) The computational nodes with $\Vector{\Phi}_{i,j,k}(8 \ge \phi \ge 1, \varphi)$. (e) A slice plane capturing the layers of interfacial nodes. (f) A slice plane capturing the layers of ghost nodes.}
    \label{fig:missile_demo}
\end{figure}
\begin{figure}[!htbp]
    \centering
    \begin{subfigure}[b]{0.32\textwidth}
        \includegraphics[width=\textwidth]{missile_short_schlieren_volume_m192_t0d02}
        \caption{$t = 0.02 \Unit{s}$}
        \label{fig:missile_short_schlieren_volume_m192_t0d02}
    \end{subfigure}%
    ~
    \begin{subfigure}[b]{0.32\textwidth}
        \includegraphics[width=\textwidth]{missile_short_schlieren_volume_m192_t0d03}
        \caption{$t = 0.03 \Unit{s}$}
        \label{fig:missile_short_schlieren_volume_m192_t0d03}
    \end{subfigure}%
    ~
    \begin{subfigure}[b]{0.32\textwidth}
        \includegraphics[width=\textwidth]{missile_short_schlieren_volume_m192_t0d04}
        \caption{$t = 0.04 \Unit{s}$}
        \label{fig:missile_short_schlieren_volume_m192_t0d04}
    \end{subfigure}%
    \caption{The time evolution of the wind tunnel test illustrated by the volume rendering of the numerical Schlieren field solved on the grid $I_3 \times J_3 \times K_3$.}
    \label{fig:missile_evolve}
\end{figure}
\begin{figure}[!htbp]
    \centering
    \begin{subfigure}[b]{0.32\textwidth}
        \includegraphics[trim = 0mm 100mm 0mm 100mm, clip, width=\textwidth]{missile_short_schlieren_slice_m096}
        \caption{}
        \label{fig:missile_short_schlieren_slice_m096}
    \end{subfigure}%
    ~
    \begin{subfigure}[b]{0.32\textwidth}
        \includegraphics[trim = 0mm 100mm 0mm 100mm, clip, width=\textwidth]{missile_short_schlieren_slice_m144}
        \caption{}
        \label{fig:missile_short_schlieren_slice_m144}
    \end{subfigure}%
    ~
    \begin{subfigure}[b]{0.32\textwidth}
        \includegraphics[trim = 0mm 100mm 0mm 100mm, clip, width=\textwidth]{missile_short_schlieren_slice_m192}
        \caption{}
        \label{fig:missile_short_schlieren_slice_m192}
    \end{subfigure}%
    \caption{The predicted conical shock angles on three different grids at $t = 0.04 \Unit{s}$. (a) $I_1 \times J_1 \times K_1$. (b) $I_2 \times J_2 \times K_2$. (c) $I_3 \times J_3 \times K_3$. Lines denoted by square marks represent the analytical solutions.}
    \label{fig:missile_shock}
\end{figure}

In order to construct the wind tunnel test shown in Fig.~\ref{fig:missile_short_demo_assemble}, the central axes of $\Omega_1$, $\Omega_2$, $\Omega_8$, and $\Omega$ are all positioned along the $x$-axis. The apex of $\Omega_1$ is at $O=(0, 0, 0)$; the centers of $\Omega_2$, $\Omega_8$, and $\Omega$ are located at $(h_1 + l_2/2, 0, 0)$. $\Omega_{3-6}$ are shifted to align with the rear end of $\Omega_2$ with the shortest edge being completely immersed into $\Omega_2$, and the center of $\Omega_7$ is at $(h_1 + l_2, 0, 0)$ so that half of $\Omega_7$ is immersed into $\Omega_2$. In addition, the spatial domain $\Omega$ is discretized by Cartesian grids.

The proposed field function $\Vector{\Phi}(\phi,\varphi)$ is then applied to building a node map for the numerical discretization of the assembled domain in Fig.~\ref{fig:missile_short_demo_assemble}. As shown in Fig.~\ref{fig:missile_short_demo_did_main} for nodes in the solution domain $\Omega_0$ and in Fig.~\ref{fig:missile_short_demo_did_all} for nodes in $\Omega_p$, $p = 1, \dotsc, 8$, the field function $\Vector{\Phi}(\phi,\varphi)$ can uniquely track all the subdomains. As illustrated via the slice plane in Fig.~\ref{fig:missile_short_demo_lid}, the field function can also resolve multiple interfacial layers for each subdomain $\Omega_p$, $p = 0, \dotsc, 8$. In the multidomain node mapping algorithm described in Section~\ref{sec:remap}, nodes inside the overlapped regions between two polyhedrons will be mapped into the polyhedron that is indexed earlier for node mapping and then be exempted from the point-in-polyhedron tests for the one that is indexed later. For instance, the results in Fig.~\ref{fig:missile_short_demo_did_all} present the case that $\Omega_2$ is indexed earlier than $\Omega_{3-6}$ but later than $\Omega_7$ during node mapping. Therefore, the field function $\Vector{\Phi}(\phi,\varphi)$ enables an automatic boolean treatment for geometric intersections. Due to that $\Omega_{3-6}$ are relatively very thin objects, all nodes inside them become interfacial nodes. Since $\Omega_0$ is the desired solution domain, numerical boundary treatment can be conducted at the interfacial nodes of $\Omega_0$ shown in Fig.~\ref{fig:missile_short_demo_lid} for a non-ghost-cell approach or at the ghost nodes of $\Omega_0$ shown in Fig.~\ref{fig:missile_short_demo_gst} for a ghost-cell approach. Only related to the outer profile of the assembled object, both the interfacial nodes and ghost nodes of $\Omega_0$ will not be affected by the index sequence of polyhedrons in node mapping.

Three Cartesian grids $I_1 \times J_1 \times K_1 = 350 \times 96 \times 96$, $I_2 \times J_2 \times K_2 = 525 \times 145 \times 145$, and $I_3 \times J_3 \times K_3 = 700 \times 192 \times 192$ are used to discretize $\Omega$. The initial flow condition in $\Omega$ is $(\rho_0, u_0, v_0, p_0)=(1.4 \Unit{kg/m^3}, 0, 0, 400 \Unit{Pa})$ with the speed of sound being $a_0=20 \Unit{m/s}$. A hypersonic inflow with condition $(\rho_{\infty}, u_{\infty}, v_{\infty}, p_{\infty})=(\rho_0, M_{\infty} a_0, 0, p_0)$ and $M_{\infty} = 5$ is imposed at the front end of $\Omega$, and an outflow boundary condition is used at the rear end of $\Omega$. The slip wall condition is enforced on the surfaces of $\Omega_p$, $p = 1, \dotsc, 8$. The evolution of the system is solved to $t = 2l/(M_{\infty}a_0) = 0.04 \Unit{s}$ and is illustrated in Fig.~\ref{fig:missile_evolve}. The obtained steady conical shocks around the cone region on three grids are captured in Fig.~\ref{fig:missile_shock} and are compared with the analytical solution derived by the Taylor-Maccoll analysis \citep{taylor1933air}. The predicted shock angles on $I_n \times J_n \times K_n$, $n=1,2,3$, are about $20.526^{\circ}$, $20.487^{\circ}$, and $20.118^{\circ}$, respectively, which agree very well with the analytical solution $20.051^{\circ}$ and demonstrate the success of applying the proposed field function for constructing complex fluid-solid systems via multidomain node mapping.

\subsection{Supersonic shock-sphere interaction}

As illustrated in Fig.~\ref{fig:shock_sphere_demo}, the unsteady drag force and pressure history acting on a sphere with radius $R=0.04 \Unit{m}$ suspended in a $L \times H \times W=0.5 \Unit{m} \times 0.3 \Unit{m} \times 0.3 \Unit{m}$ test region and impacted by a Mach $1.22$ planar incident shock are studied to validate the proposed field function for surface force integration. The center of the sphere overlaps with the center of the test region and is at the origin position $O(0,0,0)$, and the incident shock is initially positioned at $x=-1.5R$. The pre-shock and post-shock states are $(\rho_1, u_1, v_1, w_1, p_1)=(1.205 \Unit{kg/m^3}, 0, 0, 0, 101325 \Unit{Pa})$ and $(\rho_2, u_2, v_2, w_2, p_2)=(1.658 \Unit{kg/m^3}, 114.477 \Unit{m/s}, 0, 0, 159060 \Unit{Pa})$, respectively. The drag coefficient is computed as $C_{\Des{D}} = F_x / (0.5\rho_2 u_2^2 \pi R^2)$, where $F_x$ is the $x$-component of the total force acting on the sphere.
\begin{figure}[!htbp]
    \centering
    \begin{subfigure}[b]{0.40\textwidth}
        \includegraphics[width=\textwidth]{shock_sphere_demo_a}
        \caption{}
        \label{fig:shock_sphere_demo_a}
    \end{subfigure}%
    ~
    \begin{subfigure}[b]{0.40\textwidth}
        \includegraphics[width=\textwidth]{shock_sphere_demo_b}
        \caption{}
        \label{fig:shock_sphere_demo_b}
    \end{subfigure}%
    \caption{Schematic diagrams illustrating the shock-sphere interaction problem. (a) The $3D$ problem domain. (b) Pressure probe locations. [Nomenclature: $L$, domain length; $H$, domain height; $W$, domain width; $I$, incident shock; $R$, sphere radius; $P_1$ and $P_2$, pressure probes at sphere surface.]}
    \label{fig:shock_sphere_demo}
\end{figure}

\citet{tanno2003interaction} experimentally measured the drag coefficient and pressure history using a shock tube facility. In addition, employing a $2D$ curvilinear grid and the axisymmetric Navier--Stokes equations, they also numerically simulated the flow with the no-slip wall boundary condition and reported the obtained drag coefficient. In this study, $3D$ Cartesian grids are used. To reduce computational cost, the Euler equations with the slip-wall boundary condition are applied instead, since the viscous effect is very limited in this supersonic flow, and the pressure force dominates the shock-sphere interaction \citep{tanno2003interaction}. Three levels of grids, $G_1 = 400\times240\times240$, $G_2 = 600\times360\times360$, and $G_3 = 800\times480\times480$, are used to test grid convergence.
\begin{figure}[!htbp]
    \centering
    \begin{subfigure}[b]{0.24\textwidth}
        \includegraphics[trim = 45mm 0mm 45mm 0mm, clip, width=\textwidth]{1_sph_force_volume_t15}
        \caption{$t = 150 \Unit{\mu s}$}
        \label{fig:1_sph_force_volume_t15}
    \end{subfigure}%
    ~
    \begin{subfigure}[b]{0.24\textwidth}
        \includegraphics[trim = 45mm 0mm 45mm 0mm, clip, width=\textwidth]{1_sph_force_volume_t40}
        \caption{$t = 400 \Unit{\mu s}$}
        \label{fig:1_sph_force_volume_t40}
    \end{subfigure}%
    ~
    \begin{subfigure}[b]{0.24\textwidth}
        \includegraphics[trim = 45mm 0mm 45mm 0mm, clip, width=\textwidth]{1_sph_force_volume_t50}
        \caption{$t = 500 \Unit{\mu s}$}
        \label{fig:1_sph_force_volume_t50}
    \end{subfigure}%
    ~
    \begin{subfigure}[b]{0.24\textwidth}
        \includegraphics[trim = 45mm 0mm 45mm 0mm, clip, width=\textwidth]{1_sph_force_volume_t75}
        \caption{$t = 750 \Unit{\mu s}$}
        \label{fig:1_sph_force_volume_t75}
    \end{subfigure}%
    \caption{The time evolution of shock-sphere interaction illustrated by the volume rendering of the numerical Schlieren field solved on the grid $G_1$.}
    \label{fig:1_sph_force_schilieren_vol}
\end{figure}
\begin{figure}[!htbp]
    \centering
    \begin{subfigure}[b]{0.45\textwidth}
        \includegraphics[width=\textwidth]{1_sph_force_p1}
        \caption{}
        \label{fig:1_sph_force_p1}
    \end{subfigure}%
    ~
    \begin{subfigure}[b]{0.45\textwidth}
        \includegraphics[width=\textwidth]{1_sph_force_p7}
        \caption{}
        \label{fig:1_sph_force_p7}
    \end{subfigure}%
    \caption{Pressure variation over time at the probe locations. (a) Probe $P_1$. (b) Probe $P_2$.}
    \label{fig:1_sph_force_p}
\end{figure}
\begin{figure}[!htbp]
    \centering
    \includegraphics[width=0.50\textwidth]{1_sph_force_cd}
    \caption{Comparison of drag coefficient for shock-sphere interaction.}
    \label{fig:1_sph_force_cd}
\end{figure}

The evolution of the numerical Schlieren field is captured in Fig.~\ref{fig:1_sph_force_schilieren_vol}, in which the reflection and diffraction of the shock wave along sphere surface and the formation of wake by shock collision are clearly illustrated. A comparison of the predicted pressure variation $\Delta p = p - p_1$ at the two probe locations with the experimental measurements in reference \citep{tanno2003interaction} is shown in Fig.~\ref{fig:1_sph_force_p}. For $t \in [0, 160 \Unit{\mu s}]$, some minor discrepancies are observed among the solutions obtained from three different grids, and the numerical pressure data closely resemble the experimental one, including both the arrival time and the value of the peak pressure. At the later stage, the numerical and experimental results show moderate discrepancies. A further comparison of the predicted drag coefficient with the experimental and numerical data in reference \citep{tanno2003interaction} is depicted in Fig.~\ref{fig:1_sph_force_cd}. The obtained drag coefficient herein is consistent with the numerical result in \citep{tanno2003interaction} and agrees well with the experimental measurement. It is worth noting that, in the reference \citep{tanno2003interaction}, compared to the pressure measurement, a model configuration less affecting the flow was used in the drag measurement, which might be one of the reasons leading to the different levels of agreement between the numerical and experimental data on pressure and drag coefficient at the late stage of evolution.

\subsection{A multibody contact and collision system}

As illustrated in Fig.~\ref{fig:multibody_collision_demo}, a fluid-solid system is employed to demonstrate the field function for multibody contact and collision applications. In a $L \times H = [-5D, 5D] \times [-5D, 5D]$ domain with an initial flow state $(\rho_0, u_0, v_0, p_0)=(1.4 \Unit{kg/m^3}, 0, 0, 400 \Unit{Pa})$, five circular solids with diameter $D=1 \Unit{m}$ are placed with the centers being $C_1(-4D,0)$, $C_2(0,4D)$, $C_3(0,0)$, $C_4(2D, -2D)$, and $C_5(2D+1/\sqrt{2}D, -2D-1/\sqrt{2}D)$, respectively. Extending the collision system in \citep{mo2018numerical}, a $90^{\circ}$-angled wall with the inner corner locating at $W_6(2.5D+\sqrt{2}D, -2.5D-\sqrt{2}D)$ is added to introduce a multicontact problem between $C_5$ and $W_6$. During collision, both $C_5$ and $W_6$ will have two contact regions occurring simultaneously. As a difficult problem to solve in rigid-body dynamics \citep{jimenez20013d}, the multicontact collision between $C_5$ and $W_6$ is used to further demonstrate the collision detection of the proposed field function.
\begin{figure}[!htbp]
    \centering
    \includegraphics[width=0.45\textwidth]{multibody_collision_demo}
    \caption{A fluid-solid system with analytically solvable multibody contact and collisions.}
    \label{fig:multibody_collision_demo}
\end{figure}

Initially, $C_1$ and $C_2$ move with $V=\Unit{50m/s}$ and Mach number $M=2.5$. $C_3$, $C_4$, and $C_5$ are stationary, and the wall $W_6$ is fixed in space. If all the collisions are assumed to be elastic and fluid forces acting on solids are neglected, then the motions of the solids are analytically solvable. The fluid-solid system is solved to $t=200 \Unit{ms}$ on three grids $G_1 = 300\times300$, $G_2 = 600\times600$, and $G_3 = 1200\times1200$, and the evolution is captured in Fig.~\ref{fig:multibody_collision} using results obtained on $G_3$. As shown from Fig.~\ref{fig:multi_col_wall_m1200_t000ms} to Fig.~\ref{fig:multi_col_wall_m1200_t060ms}, once colliding with $C_3$ simultaneously at $t=60 \Unit{ms}$, $C_1$ and $C_2$ pass their momentum to $C_3$. From Fig.~\ref{fig:multi_col_wall_m1200_t080ms} to Fig.~\ref{fig:multi_col_wall_m1200_t090ms}, $C_3$ moves with $(u,v)=(50 \Unit{m/s}, 50 \Unit{m/s})$ and collides with $C_4$ at $t=100 - 10\sqrt{2} \Unit{ms}$. As a result, a colliding chain is formed between $C_3$, $C_4$, and $C_5$ to instantly pass momentum from $C_3$ to $C_5$. From Fig.~\ref{fig:multi_col_wall_m1200_t096ms} to Fig.~\ref{fig:multi_col_wall_m1200_t104ms}, $C_5$ collides with the wall $W_6$ and then bounces back, causing the collision sequence to be inverted. From Fig.~\ref{fig:multi_col_wall_m1200_t110ms} to Fig.~\ref{fig:multi_col_wall_m1200_t120ms}, $C_5$ moves with $(u,v)=(50 \Unit{m/s}, 50 \Unit{m/s})$ and collides with $C_4$ at $t=100 + 10\sqrt{2} \Unit{ms}$ to reform the colliding chain between $C_5$, $C_4$, and $C_3$ and instantly transfer the momentum to $C_3$. From Fig.~\ref{fig:multi_col_wall_m1200_t140ms} to Fig.~\ref{fig:multi_col_wall_m1200_t200ms}, $C_3$ collides with $C_1$ and $C_2$ simultaneously and completely transfer its $x$-momentum to $C_1$ and $y$-momentum to $C_2$. Then, $C_1$ and $C_2$ travel back to their initial positions.
\begin{figure}[!htbp]
    \centering
    \begin{subfigure}[b]{0.22\textwidth}
        \includegraphics[trim = 40mm 0mm 40mm 0mm, clip, width=\textwidth]{multi_col_wall_m1200_t000ms}
        \caption{$t = 0 \Unit{ms}$}
        \label{fig:multi_col_wall_m1200_t000ms}
    \end{subfigure}%
    ~
    \begin{subfigure}[b]{0.22\textwidth}
        \includegraphics[trim = 40mm 0mm 40mm 0mm, clip, width=\textwidth]{multi_col_wall_m1200_t030ms}
        \caption{$t = 30 \Unit{ms}$}
        \label{fig:multi_col_wall_m1200_t030ms}
    \end{subfigure}%
    ~
    \begin{subfigure}[b]{0.22\textwidth}
        \includegraphics[trim = 40mm 0mm 40mm 0mm, clip, width=\textwidth]{multi_col_wall_m1200_t060ms}
        \caption{$t = 60 \Unit{ms}$}
        \label{fig:multi_col_wall_m1200_t060ms}
    \end{subfigure}%
    \\
    \begin{subfigure}[b]{0.22\textwidth}
        \includegraphics[trim = 40mm 0mm 40mm 0mm, clip, width=\textwidth]{multi_col_wall_m1200_t080ms}
        \caption{$t = 80 \Unit{ms}$}
        \label{fig:multi_col_wall_m1200_t080ms}
    \end{subfigure}%
    ~
    \begin{subfigure}[b]{0.22\textwidth}
        \includegraphics[trim = 40mm 0mm 40mm 0mm, clip, width=\textwidth]{multi_col_wall_m1200_t086ms}
        \caption{$t = 86 \Unit{ms}$}
        \label{fig:multi_col_wall_m1200_t086ms}
    \end{subfigure}%
    ~
    \begin{subfigure}[b]{0.22\textwidth}
        \includegraphics[trim = 40mm 0mm 40mm 0mm, clip, width=\textwidth]{multi_col_wall_m1200_t090ms}
        \caption{$t = 90 \Unit{ms}$}
        \label{fig:multi_col_wall_m1200_t090ms}
    \end{subfigure}%
    \\
    \begin{subfigure}[b]{0.22\textwidth}
        \includegraphics[trim = 40mm 0mm 40mm 0mm, clip, width=\textwidth]{multi_col_wall_m1200_t096ms}
        \caption{$t = 96 \Unit{ms}$}
        \label{fig:multi_col_wall_m1200_t096ms}
    \end{subfigure}%
    ~
    \begin{subfigure}[b]{0.22\textwidth}
        \includegraphics[trim = 40mm 0mm 40mm 0mm, clip, width=\textwidth]{multi_col_wall_m1200_t100ms}
        \caption{$t = 100 \Unit{ms}$}
        \label{fig:multi_col_wall_m1200_t100ms}
    \end{subfigure}%
    ~
    \begin{subfigure}[b]{0.22\textwidth}
        \includegraphics[trim = 40mm 0mm 40mm 0mm, clip, width=\textwidth]{multi_col_wall_m1200_t104ms}
        \caption{$t = 104 \Unit{ms}$}
        \label{fig:multi_col_wall_m1200_t104ms}
    \end{subfigure}%
    \\
    \begin{subfigure}[b]{0.22\textwidth}
        \includegraphics[trim = 40mm 0mm 40mm 0mm, clip, width=\textwidth]{multi_col_wall_m1200_t110ms}
        \caption{$t = 110 \Unit{ms}$}
        \label{fig:multi_col_wall_m1200_t110ms}
    \end{subfigure}%
    ~
    \begin{subfigure}[b]{0.22\textwidth}
        \includegraphics[trim = 40mm 0mm 40mm 0mm, clip, width=\textwidth]{multi_col_wall_m1200_t114ms}
        \caption{$t = 114 \Unit{ms}$}
        \label{fig:multi_col_wall_m1200_t114ms}
    \end{subfigure}%
    ~
    \begin{subfigure}[b]{0.22\textwidth}
        \includegraphics[trim = 40mm 0mm 40mm 0mm, clip, width=\textwidth]{multi_col_wall_m1200_t120ms}
        \caption{$t = 120 \Unit{ms}$}
        \label{fig:multi_col_wall_m1200_t120ms}
    \end{subfigure}%
    \\
    \begin{subfigure}[b]{0.22\textwidth}
        \includegraphics[trim = 40mm 0mm 40mm 0mm, clip, width=\textwidth]{multi_col_wall_m1200_t140ms}
        \caption{$t = 140 \Unit{ms}$}
        \label{fig:multi_col_wall_m1200_t140ms}
    \end{subfigure}%
    ~
    \begin{subfigure}[b]{0.22\textwidth}
        \includegraphics[trim = 40mm 0mm 40mm 0mm, clip, width=\textwidth]{multi_col_wall_m1200_t170ms}
        \caption{$t = 170 \Unit{ms}$}
        \label{fig:multi_col_wall_m1200_t170ms}
    \end{subfigure}%
    ~
    \begin{subfigure}[b]{0.22\textwidth}
        \includegraphics[trim = 40mm 0mm 40mm 0mm, clip, width=\textwidth]{multi_col_wall_m1200_t200ms}
        \caption{$t = 200 \Unit{ms}$}
        \label{fig:multi_col_wall_m1200_t200ms}
    \end{subfigure}%
    \\
    \begin{subfigure}[b]{0.50\textwidth}
        \includegraphics[trim = 40mm 150mm 40mm 120mm, clip, width=\textwidth]{multi_col_wall_m1200_legend}
    \end{subfigure}%
    \caption{Numerical solution of a fluid-solid system with analytically solvable multibody contact and collisions.}
    \label{fig:multibody_collision}
\end{figure}

The evolution process involves multibody collisions with momentum transfer at both aligned (Fig.~\ref{fig:multi_col_wall_m1200_t086ms} and Fig.~\ref{fig:multi_col_wall_m1200_t114ms}) and angled (Fig.~\ref{fig:multi_col_wall_m1200_t060ms} and Fig.~\ref{fig:multi_col_wall_m1200_t140ms}) directions, as well as a multicontact collision between $C_5$ and $W_6$ (Fig.~\ref{fig:multi_col_wall_m1200_t100ms}). During the collisions, solid states can instantly switch between $M=0$ and $M=5\sqrt{2}$, introducing computational challenges.
\begin{figure}[!htbp]
    \centering
    \begin{subfigure}[b]{0.32\textwidth}
        \includegraphics[trim = 40mm 0mm 40mm 0mm, clip, width=\textwidth]{multi_col_wall_m0300_t200ms}
        \caption{}
        \label{fig:multi_col_wall_m030s}
    \end{subfigure}%
    ~
    \begin{subfigure}[b]{0.32\textwidth}
        \includegraphics[trim = 40mm 0mm 40mm 0mm, clip, width=\textwidth]{multi_col_wall_m0600_t200ms}
        \caption{}
        \label{fig:multi_col_wall_m060s}
    \end{subfigure}%
    ~
    \begin{subfigure}[b]{0.32\textwidth}
        \includegraphics[trim = 40mm 0mm 40mm 0mm, clip, width=\textwidth]{multi_col_wall_m1200_t200ms}
        \caption{}
        \label{fig:multi_col_wall_m1200}
    \end{subfigure}%
    \caption{Grid sensitivity study on the solution of the fluid-solid system with multibody contact and collisions. (a) $G_1$. (b) $G_2$. (c) $G_3$.}
    \label{fig:multibody_collision_compare}
\end{figure}

The solutions obtained on $G_n$, $n=1,2,3$, are compared in Fig.~\ref{fig:multibody_collision_compare}. The collision dynamics, including collision detections, the lines of impacts, and collision velocities are solved exactly on each grid. Table~\ref{tab:multibody_collision_pos} presents the predicted position errors of solid centers on $G_n$. The maximum position errors of the solid centers happen at $C_1$ and $C_2$ and are about $11\%$, $5.7\%$, and $2.8\%$ relative to the diameter $D$ for $G_1$, $G_2$, and $G_3$, respectively. The obtained results demonstrate that the proposed field function can successfully facilitate the solution of complex and dynamic fluid-solid system, and the collision detection and response algorithms based on the field function can correctly resolve the multibody contact and collisions present in the current fluid-solid system. Although not being able to solve multibody collisions in general exactly, the current collision model provides a deterministic approach for approximating multibody collision response with parameterized elasticity and friction and effectively supports the validation of the collision detection capability of the proposed field function.
\begin{table}[!htbp]
    \centering
    \footnotesize
    %\footnotesize% fontsize
    %\setlength{\tabcolsep}{4pt}% column separation
    %\renewcommand{\arraystretch}{1.5}% row space 
    \begin{tabular}{lccccc}
        \hline\hline
        %\multicolumn{num_of_cols_to_merge}{alignment}{contents} \\
        %\cline{i-j}% partial hline from column i to column j
        & $C_1$ & $C_2$ & $C_3$ & $C_4$ & $C_5$\\
        \hline
        Exact & $(-4, 0)$ & $(0, 4)$ & $(0, 0)$ & $(2, -2)$ & $(2+\frac{1}{\sqrt{2}}, -2-\frac{1}{\sqrt{2}})$\\
        $G_1$ Error & $(-1.1\mathrm{e}{-1}, 0)$ & $(0, 1.1\mathrm{e}{-1})$ & $(-3.6\mathrm{e}{-3}, 3.6\mathrm{e}{-3})$ & $(0, 0)$ & $(1.0\mathrm{e}{-2}, -1.0\mathrm{e}{-2})$\\ 
        $G_2$ Error & $(-5.7\mathrm{e}{-2}, 0)$ & $(0, 5.7\mathrm{e}{-2})$ & $(-7.8\mathrm{e}{-4}, 7.8\mathrm{e}{-4})$ & $(3.0\mathrm{e}{-4}, -3.0\mathrm{e}{-4})$ & $(2.9\mathrm{e}{-3}, -2.9\mathrm{e}{-3})$\\ 
        $G_3$ Error & $(-2.8\mathrm{e}{-2}, 0)$ & $(0, 2.8\mathrm{e}{-2})$ & $(-6.6\mathrm{e}{-4}, 6.6\mathrm{e}{-4})$ & $(-4.0\mathrm{e}{-5}, 4.0\mathrm{e}{-5})$ & $(4.6\mathrm{e}{-3}, -4.6\mathrm{e}{-3})$\\ 
        \hline\hline
    \end{tabular}
    \caption{The predicted position errors of solid centers at the end of solution time for the fluid-solid system.}
    \label{tab:multibody_collision_pos}
\end{table}

\subsection{Supersonic wedge penetrating a particle bed}

A supersonic wedge penetrating a particle bed is simulated to further demonstrate the applicability of the field function for solving complex and dynamic fluid-solid systems. As illustrated in Fig.~\ref{fig:wedge_penetrating_demo}, in a $L \times H = [-0.5D, 13.5D] \times [-3.5D, 3.5D]$ domain, a wedge with length $D=1 \Unit{m}$ and deflection angle $\theta=15^{\circ}$ is horizontally positioned in the domain, and the front vertex of the wedge locates at $O(12D, 0)$. In addition, in the $w \times h = [2D, 4D] \times [-1D, 1D]$ region, $64$ identical circular particles with diameter $d=0.25D$ are tightly packed.
\begin{figure}[!htbp]
    \centering
    \includegraphics[width=0.8\textwidth]{flow_wedge_demo_e}
    \caption{A schematic diagram for the supersonic wedge penetrating a particle bed problem. [Nomenclature: $M_{\infty}$, Mach number of the moving wedge; $S$, oblique shock; $\theta$, deflection angle; $\beta$, shock angle; $D$, length of wedge; $O$, the front vertex of wedge; $L$, domain length; $H$, domain height; $w$, particle bed width; $h$, particle bed height.]}
    \label{fig:wedge_penetrating_demo}
\end{figure}

Initially, the gas in the domain has the state $(\rho_0, u_0, v_0, p_0)=(1.4 \Unit{kg/m^3}, 0, 0, 400 \Unit{Pa})$, in which the speed of sound is $a_0=20 \Unit{m/s}$. The wedge has a density $\rho_{\Des{s}}=2700 \Unit{kg/m^3}$, a coefficient of restitution $C_R=0.5$, and an initial velocity $M_{\Des{\infty}}=3$. Particles have a density $\rho_{\Des{s}}$, a coefficient of restitution $C_R=0.0$, and zero initial velocity. Flow inside the domain is assumed to be inviscid. The slip-wall condition is imposed at the top and bottom domain boundaries as well as at the wedge and particle surfaces, while the outflow boundary condition is enforced at the left and right domain boundaries. The evolution of this fluid-solid system is solved to $t=0.25 \Unit{s}$ on a $2800\times1400$ Cartesian grid.

During the solution process, before the wedge collides with the particle bed (for $t \le 4/30 \Unit{s}$), the fluid forces acting on the wedge are deactivated such that the wedge can move with a constant supersonic speed. As a result, oblique shock waves generated at the nose of the moving wedge can reach a steady state with a constant shock angle $\beta$. The simulated time evolution of the system is captured in Fig.~\ref{fig:1_wedge_impact_deg15_mach3_cr0d00_t}, in which the lines denoted by square marks represent the analytical solutions of the oblique shock angles at position $(4.5D, 0)$. As shown in Fig.~\ref{fig:1_wedge_impact_deg15_mach3_cr0d00_t125ms}, the predicted oblique shock angle $\beta_n = 32.259^{\circ}$ agrees very well with the analytical solution $\beta_{e}= 32.240^{\circ}$ computed from the $M_{\infty}-\theta-\beta$ relation \citep{anderson2010fundamentals}.

After the wedge collides with the particle bed, a force chain within the contacted particles is created due to the penetrating wedge. This force chain accelerates the particles and fractures the particle bed. The suddenly destabilized particle bed generates strong flow disturbances at the surrounding area, which interact with the wedge generated shocks and waves, forming complex wave diffraction and interference patterns in space. During the wedge penetrating the particle bed, intensive multibody contact and collisions are successfully simulated, and an intuitive dynamic process is captured in the solution. These results illustrate the ability of the proposed field function for facilitating the solution of complex and dynamic fluid-solid systems involving coupled fluid-solid and solid-solid interactions.
\begin{figure}[!htbp]
    \centering
    \begin{subfigure}[b]{0.48\textwidth}
        \includegraphics[width=\textwidth]{1_wedge_impact_deg15_mach3_cr0d00_t000ms}
        \caption{$t = 0 \Unit{ms}$}
        \label{fig:1_wedge_impact_deg15_mach3_cr0d00_t000ms}
    \end{subfigure}%
    ~
    \begin{subfigure}[b]{0.48\textwidth}
        \includegraphics[width=\textwidth]{1_wedge_impact_deg15_mach3_cr0d00_t050ms}
        \caption{$t = 50 \Unit{ms}$}
        \label{fig:1_wedge_impact_deg15_mach3_cr0d00_t050ms}
    \end{subfigure}%
    \\
    \begin{subfigure}[b]{0.48\textwidth}
        \includegraphics[width=\textwidth]{1_wedge_impact_deg15_mach3_cr0d00_t125ms}
        \caption{$t = 125 \Unit{ms}$}
        \label{fig:1_wedge_impact_deg15_mach3_cr0d00_t125ms}
    \end{subfigure}%
    ~
    \begin{subfigure}[b]{0.48\textwidth}
        \includegraphics[width=\textwidth]{1_wedge_impact_deg15_mach3_cr0d00_t150ms}
        \caption{$t = 150 \Unit{ms}$}
        \label{fig:1_wedge_impact_deg15_mach3_cr0d00_t150ms}
    \end{subfigure}%
    \\
    \begin{subfigure}[b]{0.48\textwidth}
        \includegraphics[width=\textwidth]{1_wedge_impact_deg15_mach3_cr0d00_t200ms}
        \caption{$t = 200 \Unit{ms}$}
        \label{fig:1_wedge_impact_deg15_mach3_cr0d00_t200ms}
    \end{subfigure}%
    ~
    \begin{subfigure}[b]{0.48\textwidth}
        \includegraphics[width=\textwidth]{1_wedge_impact_deg15_mach3_cr0d00_t250ms}
        \caption{$t = 250 \Unit{ms}$}
        \label{fig:1_wedge_impact_deg15_mach3_cr0d00_t250ms}
    \end{subfigure}%
    \caption{Time evolution of a supersonic wedge penetrating a particle bed. Lines denoted by square marks represent the analytical solutions of the oblique shocks.}
    \label{fig:1_wedge_impact_deg15_mach3_cr0d00_t}
\end{figure}

\section{Conclusion}

A new integer-type field function has been developed to facilitate the solution of complex and dynamic fluid-solid systems on Cartesian grids with interface-resolved fluid-solid and solid-solid interactions. The main conclusions are summarized as follows:
\begin{itemize}
    \item For a Cartesian-grid-discretized computational domain segmented by a set of solid bodies, the proposed field function can uniquely track all the subdomains with multiple layers of interfacial nodes. Employing the proposed field function, it is straightforward to apply designated governing equations, constitutive models, numerical schemes, and boundary conditions for each subdomain.

    \item Benefiting from the ability to uniquely track all the subdomains with multiple layers of interfacial nodes using only one integer field in total, the proposed field function can enable four types of useful functionalities. The first functionality is to provide single-integer-based multidomain node mapping to minimize memory usage and maximize information set. For instance, in providing node mapping information for $P$ subdomains, the memory consumption for using the proposed field function can be about $1/P$ of that for using a binary node-mapping function. The second functionality is to enable efficient node remapping that employs a temporal coherence to obtain an acceleration rate inversely proportional to the surface-to-volume ratio of subdomains. The third functionality is to perform collision detection for determining collision queues and lines of impacts with linear time complexity, instead of the quadric time complexity required by a binary node-mapping function. The fourth functionality is to facilitate the surface force integration for irregular solids immersed in a Cartesian grid. Easy-to-implement algorithms for the field function and its associated functionalities have also been presented.

    \item Equipped with a deterministic multibody collision model, the applicability of the developed field function for solving complex and dynamic fluid-solid systems has been validated and demonstrated through a set of numerical experiments, such as a complex wind tunnel test efficiently constructed via the field function to demonstrate multidomain node mapping, supersonic shock-sphere interaction to validate surface force integration, a multibody contact and collision system and a supersonic wedge penetrating a particle bed to demonstrate collision detection and node remapping for dynamic fluid-solid systems. The obtained numerical results are in close agreement with the corresponding published numerical data, experimental observations, or analytical solutions.
\end{itemize}
