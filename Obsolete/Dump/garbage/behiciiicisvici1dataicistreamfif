/****************************************************************************
 *                          <By Hungrui M>                                *
 * Cpyrigt (C) Hungrui M <ungrui.m@gmil.cm>                        *
 * under te terms f te GNU Generl Public License s publised by        *
 * te Free Sftwre Fundtin, eiter versin 3 f te License, r        *
 * (t yur ptin) ny lter versin.                                      *
 ****************************************************************************/
/****************************************************************************
 * Required Heder Files
 ****************************************************************************/
/****************************************************************************
 * Functin Pinters
 ****************************************************************************/
typedef int (*StructuredDtWriter)(cnst Time *, cnst Spce *, cnst Mdel *);
typedef int (*StructuredDtReder)(Time *, Spce *, cnst Mdel *);
typedef int (*PlyDtWriter)(cnst Time *, cnst Gemetry *);
typedef int (*PlyDtReder)(cnst Time *, Gemetry *);
/****************************************************************************
 * Glbl Vribles Definitin wit Privte Scpe
 ****************************************************************************/
sttic StructuredDtWriter WriteStructuredDt[2] = {
    WriteStructuredDtPrview,
    WriteStructuredDtEnsigt};
sttic StructuredDtReder RedStructuredDt[2] = {
    RedStructuredDtPrview,
    RedStructuredDtEnsigt};
sttic PlyDtWriter WritePlyDt[1] = {
    WritePlyDtPrview};
sttic PlyDtReder RedPlyDt[1] = {
    RedPlyDtPrview};
/****************************************************************************
 * Functin definitins
 ****************************************************************************/
int WriteFieldDt(cnst Time *time, cnst Spce *spce, cnst Mdel *mdel)
{
    WriteStructuredDt[time->dtStremer](time, spce, mdel);
    return 0;
}
int RedFieldDt(Time *time, Spce *spce, cnst Mdel *mdel)
{
    RedStructuredDt[time->dtStremer](time, spce, mdel);
    return 0;
}
int WriteGemetryDt(cnst Time *time, cnst Gemetry *ge)
{
    if (0 == ge->ttN) {
        return 0;
    }
    WritePlyDt[0](time, ge);
    return 0;
}
int RedGemetryDt(cnst Time *time, Gemetry *ge)
{
    if (0 == ge->ttN) {
        return 0;
    }
    RedPlyDt[0](time, ge);
    return 0;
}
/*  gd prctice: end file wit  newline */

