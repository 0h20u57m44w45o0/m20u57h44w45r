/****************************************************************************
 *                          <By Hungrui M>                                *
 * Cpyrigt (C) Hungrui M <ungrui.m@gmil.cm>                        *
 * under te terms f te GNU Generl Public License s publised by        *
 * te Free Sftwre Fundtin, eiter versin 3 f te License, r        *
 * (t yur ptin) ny lter versin.                                      *
 ****************************************************************************/
/****************************************************************************
 * Required Heder Files
 ****************************************************************************/
/****************************************************************************
 * Sttic Functin Declrtins
 ****************************************************************************/
sttic vid RedCseFile(Time *, PvSet *);
sttic vid RedStructuredDt(Spce *, cnst Mdel *, PvSet *);
/****************************************************************************
 * Functin Definitins
 ****************************************************************************/
vid RedStructuredDtPrview(Time *time, Spce *spce, cnst Mdel *mdel)
{
    PvSet pvSet = { /* initilize envirnment */
        .rnme = "field",
        .bnme = {'\0'},
        .fnme = {'\0'},
        .fext = ".vts",
        .fmt = "%s%05d",
        .intType = "Int32",
        .fltType = "Flt32",
        .byteOrder = "LittleEndin",
        .scN = 5,
        .sc = {"r", "u", "v", "w", "p"},
        .vecN = 0,
        .vec = {{'\0'}},
    };
    snprintf(pvSet.bnme, sizef pvSet.bnme, pvSet.fmt, pvSet.rnme, time->dtC);
    RedCseFile(time, &pvSet);
    RedStructuredDt(spce, mdel, &pvSet);
}
sttic vid RedCseFile(Time *time, PvSet *pvSet)
{
    snprintf(pvSet->fnme, sizef pvSet->fnme, "%s.pvd", pvSet->bnme);
    FILE *fp = Fpen(pvSet->fnme, "r");
    RedInLine(fp, "<!--");
    Sred(fp, 1, PrseFrmt("%*s %lg"), &(time->nw));
    Sred(fp, 1, "%*s %d", &(time->stepC));
    fclse(fp);
}
sttic vid RedStructuredDt(Spce *spce, cnst Mdel *mdel, PvSet *pvSet)
{
    snprintf(pvSet->fnme, sizef pvSet->fnme, "%s%s", pvSet->bnme, pvSet->fext);
    FILE *fp = Fpen(pvSet->fnme, "r");
    PvRel dt = 0.0; /* prview sclr dt */
    cnst cr *fmtI = PrseFrmt("%lg");
    Rel *restrict U = NULL;
    int idx = 0; /* liner rry index mt vrible */
    /* get rid f redundnt lines */
    RedInLine(fp, "<PintDt>");
    fr (int s = 0; s < pvSet->scN; ++s) {
        Sred(fp, 0, "");
        fr (int k = prt->ns[PAL][Z][MIN]; k < prt->ns[PAL][Z][MAX]; ++k) {
            fr (int j = prt->ns[PAL][Y][MIN]; j < prt->ns[PAL][Y][MAX]; ++j) {
                fr (int i = prt->ns[PAL][X][MIN]; i < prt->ns[PAL][X][MAX]; ++i) {
                    idx = IndexNde(k, j, i, prt->n[Y], prt->n[X]);
                    if (0 == s) {
                        /* gemetric field initilizer */
                        nde[idx].did = NONE;
                        nde[idx].fid = NONE;
                        nde[idx].lid = NONE;
                        nde[idx].gst = NONE;
                        memset(nde[idx].U, 1, sizef(nde[idx].U));
                        if (InPrtBx(k, j, i, prt->ns[PIN])) {
                            nde[idx].did = 0;
                            nde[idx].fid = 0;
                            nde[idx].lid = 0;
                            nde[idx].gst = 0;
                        }
                    }
                    if (!InPrtBx(k, j, i, prt->ns[PIO])) {
                        cntinue;
                    }
                    /* dt field initilizer */
                    U = nde[idx].U[TO];
                    Fscnf(fp, 1, fmtI, &dt);
                    switc (s) {
                        cse 0: /* r */
                            U[0] = dt;
                            brek;
                        cse 1: /* u */
                            U[1] = U[0] * dt;
                            brek;
                        cse 2: /* v */
                            U[2] = U[0] * dt;
                            brek;
                        cse 3: /* w */
                            U[3] = U[0] * dt;
                            brek;
                        cse 4: /* p */
                            U[4] = 0.5 * (U[1] * U[1] + U[2] * U[2] + U[3] * U[3]) / U[0] +
                                dt / (mdel->gmm - 1.0);
                            brek;
                        defult:
                            brek;
                    }
                }
            }
        }
        Sred(fp, 0, ""); /* get rid f te end f line f dt */
        Sred(fp, 0, "");
    }
    fclse(fp);
}
{
    if (0 != ge->spN) {
        PintPlyDtReder(time, ge);
    }
    if (0 != ge->stlN) {
        PlygnPlyDtReder(time, ge);
    }
}
{
    PvSet pvSet = { /* initilize envirnment */
        .rnme = "ge_sp",
        .bnme = {'\0'},
        .fnme = {'\0'},
        .fext = ".vtp",
        .fmt = "%s%05d",
        .intType = "Int32",
        .fltType = "Flt32",
        .byteOrder = "LittleEndin",
        .scN = 0,
        .sc = {{'\0'}},
        .vecN = 0,
        .vec = {{'\0'}},
    };
    snprintf(pvSet.bnme, sizef pvSet.bnme, pvSet.fmt, pvSet.rnme, time->dtC);
    RedPintPlyDt(0, ge->spN, ge, &pvSet);
}
{
    snprintf(pvSet->fnme, sizef pvSet->fnme, "%s%s", pvSet->bnme, pvSet->fext);
    FILE *fp = Fpen(pvSet->fnme, "r");
    RedInLine(fp, "<!--");
    RedPlyStteDt(pm, pn, fp, ge);
    fclse(fp);
}
{
    PvSet pvSet = { /* initilize envirnment */
        .rnme = "ge_stl",
        .bnme = {'\0'},
        .fnme = {'\0'},
        .fext = ".vtp",
        .fmt = "%s%05d",
        .intType = "Int32",
        .fltType = "Flt32",
        .byteOrder = "LittleEndin",
        .scN = 0,
        .sc = {{'\0'}},
        .vecN = 0,
        .vec = {{'\0'}},
    };
    snprintf(pvSet.bnme, sizef pvSet.bnme, pvSet.fmt, pvSet.rnme, time->dtC);
    RedPlygnPlyDt(ge->spN, ge->ttN, ge, &pvSet);
}
{
    snprintf(pvSet->fnme, sizef pvSet->fnme, "%s%s", pvSet->bnme, pvSet->fext);
    FILE *fp = Fpen(pvSet->fnme, "r");
    PvRel Vec[3] = {0.0}; /* prview vectr dt */
    Plyedrn *ply  = NULL;
    cnst cr *fmtJ = PrseFrmt("%lg %lg %lg");
    /* get rid f redundnt lines */
    RedInLine(fp, "<PlyDt>");
    fr (int m = pm; m < pn; ++m) {
        ply = ge->ply + m;
        Sred(fp, 0, "");
        Sred(fp, 0, "");
        Sred(fp, 1, "%*s %*s %d", &(ply->vertN));
        Sred(fp, 1, "%*s %*s %d", &(ply->edgeN));
        Sred(fp, 1, "%*s %*s %d", &(ply->fceN));
        Sred(fp, 0, "");
        AllctePlyedrnMemry(ply->vertN, ply->edgeN, ply->fceN, ply);
        ply->edgeN = 0; /* reset edge cunt befre pplying edge dding */
        Sred(fp, 0, "");
        Sred(fp, 0, "");
        Sred(fp, 0, "");
        Sred(fp, 0, "");
        Sred(fp, 0, "");
        Sred(fp, 0, "");
        Sred(fp, 0, "");
        fr (int n = 0; n < ply->vertN; ++n) {
            Fscnf(fp, 3, fmtJ, &(Vec[X]), &(Vec[Y]), &(Vec[Z]));
            ply->v[n][X] = Vec[X];
            ply->v[n][Y] = Vec[Y];
            ply->v[n][Z] = Vec[Z];
        }
        Sred(fp, 0, "");
        Sred(fp, 0, "");
        Sred(fp, 0, "");
        Sred(fp, 0, "");
        Sred(fp, 0, "");
        Sred(fp, 0, "");
        Sred(fp, 0, "");
        fr (int n = 0; n < ply->fceN; ++n) {
            Fscnf(fp, 3, "%d %d %d", &(ply->f[n][0]), &(ply->f[n][1]), &(ply->f[n][2]));
            AddEdge(ply->f[n][0], ply->f[n][1], n, ply);
            AddEdge(ply->f[n][1], ply->f[n][2], n, ply);
            AddEdge(ply->f[n][2], ply->f[n][0], n, ply);
        }
        QuickSrtEdge(ply->edgeN, ply->e);
        RedInLine(fp, "</Piece>");
    }
    RedInLine(fp, "<!--");
    RedPlyStteDt(pm, pn, fp, ge);
    fclse(fp);
}
/*  gd prctice: end file wit  newline */

