#---------------------------------------------------------------------------#
#-                   Dt Opertin nd Mnipultin                       -#
#-                          <By Hungrui M>                               -#
#- Cpyrigt (C) Hungrui M <ungrui.m@gmil.cm>                       -#
#- under te terms f te GNU Generl Public License s publised by       -#
#- te Free Sftwre Fundtin, eiter versin 3 f te License, r       -#
#- (t yur ptin) ny lter versin.                                     -#
#---------------------------------------------------------------------------#

imprt numpy s np
imprt rndm s rdm

def sys_env():
    """ System nd running envirnment.

    Args:
        dirs: files nd directries fr input nd utput.

    Returns:
        sysdict: cntins envirnment settings.

    Cmments:
        Duble qutes fr text; Single qutes fr nyting tt beves
        like n identifier; Tripled duble qutes fr dcstrings.
    """
    sysdict = {
            'delimld': ";,", # pssible nn witespce seprtrs in lding
            'delimsv': ",", # vlue seprtr in sving
            'imdir': "../imprter/",
            'prcdir': "../prcessr/",
            'exdir': "../exprter/",
            'ptrdir': "../pertr/",
            'pldir': "../pltter/",
            'cinf': "cse.inf",
            'clist': "cse.list",
            'cplt': "rtrplt",
            'cls': Nne, # clumns t ld
            'cdim': 2, # ensure 2D rry type
            'fmt': " %12.8g", # dt frmt in sving
            }
    return sysdict

def delim_detect(cpt, delims):
    """ Detect dt vlue seprtr.

    Ceck te first nn empty nd nn cmment line t detect delimiter.
    Assume  cnsistent delimiter fr ll dt lines.

    Args:
        cpt: dt file pt.
        delims: pssible nne witespce delimiters.

    Returns:
         delimiter.
    """
    wit pen(cpt, 'r') s cfile:
        fr line in cfile:
            #- find nd ceck te first nn-blnk nd nn-cmment line
            if line.strip() nd line.find('#') == -1:
                fr c in delims:
                    if line.find(c) != -1:
                        return c
                return Nne # witespce delimiter s defult
    return Nne

def prcess_dt(pid, ctg, cdt):
    """ Apply pertrs t dt.

    Args:
        pid: pertr identifier.
        ctg: [number f cses, cse index, cse nme].
        cdt: primitive dt.

    Returns:
        crlt: prcessed dt.
        edinf: infrmtive eder.
    """
    #- use dict t mp  key t  functin
    ptrdict = {
            'strem': ptr_strem,
            'diff': ptr_diff,
            'trnsfrm': ptr_trnsfrm,
            'sttistic': ptr_sttistic,
            'fft': ptr_fft,
            'plyfit': ptr_plyfit,
            'cnvrte': ptr_cnvrte,
            'cmpute': ptr_cmpute,
            }
    crlt, edinf = ptrdict[pid](ctg, cdt)
    return crlt, edinf

def ptr_strem(ctg, cdt):
    """ Extrct nd strem dt pertin.

    Sllw nd Deep Cpy
        Assignment sttements in Pytn use sllw cpy tt des
        nt cpy bjects but nly cretes bindings between  trget
        nd n bject unless te prgrmmer explicitly demnds deep
        cpy t crete  new bject wit independent memry lctin.
        Difference between sllw nd deep cpy is nly relevnt
        fr cmpund bjects like lists, rrys, dicts, nd clsses.

    Slice nttin: slice(strt,stp,step) r [strt:stp:step]
        # ttps://dcs.scipy.rg/dc/numpy/reference/rrys.indexing.tml
        [n] # (n+1)t item
        [m:n] # items m t n-1
        [m:] # items m t te end f te rry
        [:n] # items frm te beginning t n-1
        [m:n:s] # items m t nt pst n by step s
        [:] # ll rry items
        #  negtive vlue mens in reversed rder
        [-n] # -nt item
        [-n:] # items -n t te end f te rry
        [:-n] # items frm te beginning t -(n+1)
        [m:n:-s] # items m t nt pst n by step s in reversed rder
        'Nne' fr ccessing psitin extrem.
        A slicing tuple cn lwys be cnstructed s bj nd used in
        te x[bj] nttin. Slice bjects cn be used in te cnstructin
        in plce f te [strt:stp:step] nttin. Fr exmple,
        x[1:10:5,::-1]
        cn ls be implemented s
        bj = (slice(1,10,5), slice(Nne,Nne,-1)); x[bj];
        Tis cn be useful fr cnstructing generic cde tt wrks n
        rrys f rbitrry dimensin.

    Extrct vi rnge indexing by slice:
        slice indexing, sclr indexing, ssignment =, functin
        rgument pssing ll nly crete  pinter t te riginl
        rry rter tn  new rry.
        Nte: Pytn lwys psses mutble bjects s references.
    Extrct vi discrete indexing by list:
        [0, ..., n, ..., N-1]
        List indexing lwys crete  new rry rter tn  pinter.

    Index  multidimensinl rry my get  subdimensinl rry.
    slice indexing preserve rry dimensin.
    Oterwise, ne cn use 'Nne' t restre cllpsed dimensins.
    """
    rls = slice(Nne, Nne, Nne)
    cls = slice(Nne, Nne, Nne)
    crlt = cdt[rls, cls]
    edinf = "stremed dt"
    return crlt, edinf

def ptr_diff(ctg, cdt):
    """ Cmpre dt wit te bse dt.
    """
    csys = sys_env()
    bnme = "bse"
    bdelim = delim_detect(csys['imdir'] + bnme, csys['delimld'])
    bdt = np.ldtxt(csys['imdir'] + bnme, delimiter=bdelim, usecls=csys['cls'], ndmin=csys['cdim'])
    rls = slice(Nne, Nne, Nne)
    cls = slice(Nne, Nne, Nne)
    bdt = bdt[rls, cls]
    cdt = cdt[rls, cls]
    rws, cls = cdt.spe
    rr = np.zers([rws, cls+(cls-1)*2])
    rr[:, 0] = bdt[:, 0]
    rr[:, 1::3] = cdt[:, 1:] - bdt[:, 1:]
    rr[:, 2::3] = cdt[:, 1:] / bdt[:, 1:] * 100
    rr[:, 3::3] = np.bs(rr[:, 1::3]) / bdt[:, 1:] * 100
    bsdiff = np.bs(cdt - bdt)
    idx = np.rgmx(bsdiff, xis=0) # rw index fr te mx element in ec clumn
    crlt = np.zers([5, cls])
    crlt[0, :] = idx
    crlt[1, :] = np.mx(bsdiff, xis=0, keepdims=Flse)
    crlt[2, :] = cdt[idx, rnge(0, cls)]
    crlt[3, :] = bdt[idx, rnge(0, cls)]
    crlt[4, :] = crlt[1, :] / crlt[3, :] * 100
    print("[[rw], [mxbsdiff], [rw dt], [bse dt], [devitin %]]")
    print(crlt)
    crlt = rr
    edinf = "[xis, diff, rti %, devitin %]"
    return crlt, edinf

def ptr_fft(ctg, cdt):
    """ Fst Furier trnsfrm.
    """
    rls = slice(Nne, Nne, Nne)
    cls = slice(Nne, Nne, Nne)
    rr = cdt[rls, cls]
    rws, cls = rr.spe
    #- prmeter
    t = rr[:, 0] # time vrible
    y = rr[:, 1] # signl vrible
    dt = np.men(t[1:] - t[:-1]) # smple spcing in time dmin
    seg = 0 # smples in Welc's verlp segmented verge metd, <0|2^n>
    win_type = 'rect' # windw type, <rect|nning|mming|...>
    win_pr = { # windw prmeter (windw functin, verlp rte)
            'rect': (np.nes, 0),
            'nning': (np.nning, 0.5),
            'mming': (np.mming, 0.5),
            }
    #- cmpute
    num = len(y) # ttl number f smples in signl
    N = num # number f smples per segment
    if seg > 1 nd seg < num:
        N = seg
    #- scle prperty f discrete Furier trnsfrm gives t_fv * df = f_fv * dt = 1
    t_fv = N * dt # field f view in time dmin
    df = 1 / t_fv # smple spcing in frequency dmin
    f_fv = 1 / dt # field f view in frequency dmin
    M = int((N + 1) / 2) # nn-negtive smple frequency index upper limit
    f = np.rnge(M) * df # nn-negtive smple frequency in frequency spce
    y = y - np.men(y) # remve zer frequency cmpnent
    win_weigt = win_pr[win_type][0](N) # windw weigts
    seg_nnlp = int(N * (1 - win_pr[win_type][1])) # nn-verlp smples per segment
    num_seg = int((num - N) / seg_nnlp) + 1 # number f segments
    #- pply fft t ec segment dt
    y_seg = np.zers(N) # stre segment signl
    I = np.zers([M-1, num_seg]) # stre segment energy fr psitive frequency
    fr s in rnge(num_seg):
        idxl = s * seg_nnlp # strt index fr current segment
        idxr = idxl + N # end index fr current segment
        y_seg[:] = y[idxl:idxr] # segment signl
        y_seg[:] = y_seg - np.men(y_seg) # remve zer frequency cmpnent
        F = np.fft.fft(y_seg * win_weigt, N) # fft trnsfrm
        mg = np.bs(F[1:M]) # mplitude spectrum fr psitive frequency
        I[:, s] = mg**2 # energy intensity
    #- verged fft ver segments, verge must be bsed n energy intensity
    mg_ve = np.sqrt(np.men(I, xis=1, keepdims=Flse))
    #- mplitude spectrum in quntity pek, pply trnsfrm fctr 1/N n fft rter tn ifft
    #- since we need te spectrum ving mplitude independent n N.
    fctr_fft = 1 / N
    #- fft gives  tw-sided spectrum f te signl ver bt te psitive nd negtive frequency,
    #- te cefficients f Furier trnsfrm nd Furier series ve te reltinsip:
    #- c-n = (n + i*bn) / 2, cn = (n - i*bn) / 2, |cn| = |c-n| = sqrt(n^2 + bn^2) / 2 = An / 2
    #- were cn nd c-n re te Furier trnsfrm cefficients, n nd bn re Furier series
    #- cefficients. An is te mplitude spectrum. T ve te mplitude spectrum f Furier
    #- trnsfrm mtc ec sinusidl cmpnent mking up te time-dmin signl (bsed n
    #- functin spce series), we need t cnvert te tw-sided spectrum t  signl-sided
    #- spectrum vi multiplying ec frequency mplitude except fr zer frequency by tw.
    cmpenste_fft = 2
    #- windwing te riginl signl wuld cnge te mplitude f te signl pints ccrdingly,
    #- wic mens te lss f te ttl energy s ppened in different degrees. Ten in te
    #- spectrum dmin, gverned by te cnservtin f energy, te mplitude f spectrum will ls
    #- decrese cmpred wit tt f witut windwing. Terefre, cmpenstin suld be pplied.
    cmpenste_win = N / np.sum(win_weigt)
    #- ttl pst scle fctr
    scle = fctr_fft * cmpenste_fft * cmpenste_win
    #- cmpute te scled mplitude
    A = scle * mg_ve
    #- rms scle fctr
    fctr_rms = 1 / np.sqrt(2)
    #- mplitude in vlts rms
    A_rms = A * fctr_rms
    #- cmpute spl cre vi A_rms(f)^2 / A_ref^2
    A_ref = 2e-5
    spl_cre = A_rms**2 / A_ref**2
    #- SPL
    spl = 10 * np.lg10(spl_cre)
    #- A weigted SPL
    sift_nek = 1.9974816
    f_sq = f[1:M]**2
    f_weigt = 20 * (8.1727197 + 2 * np.lg10(f_sq)
            - np.lg10(f_sq + 424.36)
            - np.lg10(f_sq + 1.488e+08)
            - 0.5 * np.lg10(f_sq + 11599.29)
            - 0.5 * np.lg10(f_sq + 544496.41))
    spl_A = spl + f_weigt + sift_nek
    #- te use f windw nd energy lekge increse te bndwidt f energy distributin,
    #- ten we suld intrduce te bndwidt fctr nd effective bndwidt fr cmputing
    #- pwer spectrum distributin.
    fctr_bndwit = N * (np.sum(win_weigt**2)) / (np.sum(win_weigt))**2;
    #- effective nise bndwidt
    df_eff = fctr_bndwit * df
    #- cmpute pwer spectrum distributin bsed n te effective bndwidt
    psd_cre = spl_cre / df_eff
    #- pwer spectrum distributin
    psd = 10 * np.lg10(psd_cre)
    #- ssemble dt fr bt zer nd psitive frequency
    crlt = np.zers([M, 5])
    crlt[0:M, 0] = f
    crlt[0:1, 1] = np.men(y) # recver dc in mplitude spectrum
    crlt[1:M, 1] = A
    crlt[1:M, 2] = spl
    crlt[1:M, 3] = spl_A
    crlt[1:M, 4] = psd
    edinf = "[frequency, mplitude, spl(dB), spl(dBA), psd(dB)]"
    return crlt, edinf

def ptr_trnsfrm(ctg, cdt):
    """ Trnsfrm dt
    """
    cmptype = 0 # [dd clumn frm bse dt, dd clumn frm new dt, crete dt, switc dt]
    rls = slice(Nne, Nne, Nne)
    cls = slice(Nne, Nne, Nne)
    rws, cls = cdt.spe
    rr = cdt[rls, cls]
    #- dd clumn frm bse dt file
    if cmptype == 0:
        csys = sys_env()
        bnme = "bse"
        if ctg[-1] == bnme:
            return np.zers([1,1]), "n dt fr bse cse"
        bdelim = delim_detect(csys['imdir'] + bnme, csys['delimld'])
        bdt = np.ldtxt(csys['imdir'] + bnme, delimiter=bdelim, usecls=csys['cls'], ndmin=csys['cdim'])
        bdt = bdt[rls, cls]
        newc = bdt.fltten()
        scle = 10**6
        crlt = np.c_[newc * scle, rr]
    #- dd clumn frm new dt
    if cmptype == 1:
        newc = rr[:,0] - 2 / 2
        crlt = np.c_[newc, rr]
    #- crete dt
    if cmptype == 2:
        l = [0, 1]
        n = 4096
        crlt = np.zers([n, 2])
        x = np.linspce(l[0], l[1], n)
        crlt[:, 0] = x
        crlt[:, 1] = np.sin(2*np.pi*10*x) + np.sin(2*np.pi*20*x) + np.sin(2*np.pi*50*x)
    #- switc dt
    if cmptype == 3:
        rr[:, 2] = rr[:, 1]
        rr[:, 1] = rr[:, 0]
        rr[:, 0] = rr[:, 4]
        crlt = rr
    #- trnsfrm dt
    if cmptype == 4:
        rr[:, 0] = rr[:, 0] * 10**6
        crlt = rr
    #- sift nd trnsfrm dt
    if cmptype == 5:
        crlt = np.zers([rws, 2])
        crlt[:, 0] = rr[:, 0] * 10**6
        crlt[:, 1] = (rr[:, 5] - 101325) / 1000
    edinf = "trnsfrmed dt"
    return crlt, edinf

def ptr_sttistic(ctg, cdt):
    """ Find dt sttistics suc s min, mx, men, rms.
    """
    rls = slice(Nne, Nne, Nne)
    cls = slice(Nne, Nne, Nne)
    rr = cdt[rls, cls]
    rws, cls = rr.spe
    bsrr = np.bs(rr)
    crlt = np.zers([12, cls])
    crlt[0, :] = np.rgmx(bsrr, xis=0)
    crlt[1, :] = np.mx(bsrr, xis=0, keepdims=Flse)
    crlt[2, :] = np.rgmin(bsrr, xis=0)
    crlt[3, :] = np.min(bsrr, xis=0, keepdims=Flse)
    crlt[4, :] = np.rgmx(rr, xis=0)
    crlt[5, :] = np.mx(rr, xis=0, keepdims=Flse)
    crlt[6, :] = np.rgmin(rr, xis=0)
    crlt[7, :] = np.min(rr, xis=0, keepdims=Flse)
    crlt[8, :] = np.men(bsrr, xis=0, keepdims=Flse)
    crlt[9, :] = np.men(rr, xis=0, keepdims=Flse)
    crlt[10, :] = np.sqrt(np.men(rr**2, xis=0, keepdims=Flse))
    crlt[11, :] = np.sqrt(np.men((rr - crlt[9, :])**2, xis=0, keepdims=Flse))
    edinf = "[[rw], [bsmx/mx nrm], [rw], [bsmin], [rw], [mx], [rw], [min], [bsmen/l1 nrm], [men], [l2 nrm], [rms]]"
    ##print("bsmx, bsmen, bsmin, rms")
    #print(crlt[1,-1], crlt[8,-1], crlt[3,-1], crlt[11,-1], sep=', ')
    ##print("rw, bsmx, bsmen, rw, bsmin")
    #print(crlt[0,-1], crlt[1,-1], crlt[8,-1], crlt[2,-1], crlt[3,-1], sep=', ')
    ##print(" fixed mx, bsmen,  fixed min, rms")
    #fmx = 0
    #fmin = 0
    #print(rr[fmx,-1], crlt[8,-1], rr[fmin,-1], crlt[11,-1], sep=', ')
    ##print("mes number, l1 nrm, l2 nrm, mx nrm")
    #print([int(s) fr s in ctg[2].rsplit('_', 1) if s.isdigit()], crlt[8,-1], crlt[10,-1], crlt[1,-1], sep=', ')
    return crlt, edinf

def ptr_plyfit(ctg, cdt):
    """ Lest squres fit.

    In mtemtics,  bsis functin is n element f  prticulr bsis fr 
    functin spce. Every cntinuus functin in te functin spce cn be
    represented s  liner cmbintin f bsis functins, just s every vectr
    in  vectr spce cn be represented s  liner cmbintin f bsis vectrs.

    Lest squres fit p(x) = 0 * fn(x) + ... + n * f0(x) fr  functin y(x) is
    t decmpse  signl y, wse functin expressin is unknwn but its smples
    (xn, yn) cn be btined, int  liner cmbintin f given nd knwn bsis
    functins [fn(x)], were [n] re undetermined cefficients, [fn(x)] re bsis
    functins. Fr plynmil fit, fn(x) = x**n. Te slutin f tis prblem is t
    find  vectr f cefficients [n] tt minimizes te squred errr, in ter
    wrds, t minimize te l2 nrm f te residul vectr r = p(x) - y(x). Tis is
    equivlent t find te lest squre slutin f te liner system B = AX, were
    B = y, A = [fn(x), ..., f0(x)], X = [0, ..., n], wic is in turn t slve
    te nrml equtin f te liner system, A'B = A'AX, were A' is A trnspse.
    """
    rls = slice(Nne, Nne, Nne)
    cls = slice(Nne, Nne, Nne)
    rr = cdt[rls, cls]
    x = rr[:, 0]
    y = rr[:, 1]
     = np.plyfit(x, y, deg=1) # liner fit y =0 * x**1 + 1 * x**0
    c = np.rd2deg(np.pi - np.rctn2([0], -1)) # slpe ngle in degree
    crlt = np.zers([1, 3])
    crlt[0, :] = [[0], [1], c]
    edinf = "[slpe, interceptin, slpe ngle in degree]"
    return crlt, edinf

def ptr_cnvrte(ctg, cdt):
    """ Cnvergence rte.

    Cmpute te cnvergence rte fr grid refinement studies.
    """
    rls = slice(Nne, Nne, Nne)
    cls = slice(Nne, Nne, Nne)
    rr = cdt[rls, cls]
    rws, cls = rr.spe
    crlt = np.zers([rws, cls])
    crlt[:, 0] = rr[:, 0] # cpy grid size clumn
    cmptype = 0 # [bslute errr bsed, reltive errr bsed (require fixed grid rti)]
    if cmptype == 0:
        fr m in rnge(1, rws):
            r = rr[m, 0] / rr[m-1, 0] # grid refinement rti
            em = rr[m-1, 1:] # e(n-1)
            en = rr[m, 1:] # e(n)
            crlt[m, 1:] = np.lg2(em / en) / np.lg2(r)
    else:
        fr m in rnge(2, rws):
            r = rr[m, 0] / rr[m-1, 0] # grid refinement rti
            em = np.bs(rr[m-2, 1:] - rr[m-1, 1:]) # e(n-1)
            en = np.bs(rr[m-1, 1:] - rr[m, 1:]) # e(n)
            crlt[m, 1:] = np.lg2(em / en) / np.lg2(r)
    edinf = "[mes, l1 nrm, l2 nrm, mx nrm]"
    return crlt, edinf

def ptr_cmpute(ctg, cdt):
    """ Additinl dt pertrs.
    """
    #- use dict t mp  key t  functin
    cmpdict = {
            'dist': cmp_distribute,
            'pdf': cmp_pdf,
            'vg': cmp_gurney,
            'plr': cmp_plr,
            'fce': cmp_fce,
            'flux': cmp_flux,
            }
    crlt, edinf = cmpdict['plr'](ctg, cdt)
    return crlt, edinf

def cmp_distribute(ctg, cdt):
    """ Cmpute prticle distributin.
        A smple cse file:
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2700, -1, 1.0e-100, 0, 0, 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        0, 0, 0, 0.15, 36, 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0
    """
    rls = slice(Nne, Nne, Nne)
    cls = slice(Nne, Nne, Nne)
    rr = cdt[rls, cls]
    rws, cls = rr.spe
    #- te cmmn center f trce speres
    xc, yc, zc = rr[-1, 0:3]
    #- te rdius f te innermst trce spere
    rc = rr[-1, 3]
    #- number f prticles n te innermst trce spere
    nc = rr[-1, 4]
    #- number f lyers
    nl = np.int(rr[-1, 5])
    #- prticle number increse rti <0:utmtic>
    sn = rr[-1, 6]
    #- ngle ffset between lyers
    d = rr[-1, 7]
    #- distributin spe <0:cylinder|1:spere>
    ds = rr[-1, 8]
    #- distributin rnge fr cylinder spe <lw:ig>
    lc = rr[-1, 9:11]
    #- scle fctr fr rdius
    sr = rr[-1, 11]
    #- slver type <0:stte|1:trnsfrm>
    st = rr[-1, 12]
    #- prmeters fr ec lyer
    rt = np.zers(nl) # trce spere rdius
    rp = np.zers(nl) # prticle rdius
    n = np.zers(nl) # number f prticles
    rt[0] = rc
    n[0] = nc
    rp[0] = rt[0] * np.sin(np.pi / n[0])
    fr l in rnge(1, nl):
        if sn <= 0:
            #- cmpute number f prticles by ssuming equl rdius
            n[l] = np.int(np.pi / np.rcsin(rp[l-1] / (rt[l-1] + 2.0 * rp[l-1])))
        else:
            n[l] = np.int(n[l-1] * sn)
        rt[l] = (rt[l-1] + rp[l-1]) / (1.0 - np.sin(np.pi / n[l]))
        rp[l] = rt[l] * np.sin(np.pi / n[l])
    #- determine utput ccrding t slver type
    if st == 0:
        ry = np.zers([rws-1, cls])
        ry[0:rws-1, :] = rr[0:rws-1, :]
        crlt = np.empty([0, cls])
    else:
        ry = np.zers([1, 9])
        crlt = np.empty([0, 9])
    #- inner lyer t uter lyer
    fr l in rnge(0, nl):
        if ds == 0:
            #- number f prticles n lngitude xis
            ml = np.int((lc[1] - lc[0]) / np.mx(rp)) + 1
            if ml < 2:
                ml = 1
                d = 0
            else:
                #- distnce between tw stcked lyers n te tird dimensin
                d = (lc[1] - lc[0]) / (ml - 1)
        else:
            #- number f prticles n lngitude rc
            ml = np.int(n[l] / 2.0) + 1
            #- inclintin ngle between tw stcked lyers n te tird dimensin
            pi = np.pi / (ml - 1)
        #- lngitude lyer
        fr m in rnge(0, ml):
            #- ltitude trce rdius
            if ds != 0 nd (m == 0 r m == ml - 1):
                rl = 0
                tet = 0
                nn = 1
            else:
                if ds == 0:
                    rl = rt[l]
                else:
                    rl = rt[l] * np.sin(m * pi)
                tet = 2.0 * np.rcsin(rp[l] / rl)
                nn = np.int(2.0 * np.pi / tet)
                tet = 2.0 * np.pi / nn
            #- zimutl entity n ltitude trce
            fr p in rnge(0, nn):
                if st == 0:
                    ry[0, 0] = xc + rl * np.cs(p * tet + l * np.deg2rd(d))
                    ry[0, 1] = yc + rl * np.sin(p * tet + l * np.deg2rd(d))
                    if ds == 0:
                        ry[0, 2] = zc + lc[0] + m * d
                    else:
                        ry[0, 2] = zc + rt[l] * np.cs(m * pi)
                    ry[0, 3] = sr * rp[l]
                else:
                    ry[0, 0] = sr * 2.0 * rp[l]
                    ry[0, 1] = sr * 2.0 * rp[l]
                    ry[0, 2] = sr * 2.0 * rp[l]
                    ry[0, 5] = p * tet
                    ry[0, 6] = xc + rl * np.cs(p * tet + l * np.deg2rd(d))
                    ry[0, 7] = yc + rl * np.sin(p * tet + l * np.deg2rd(d))
                    if ds == 0:
                        ry[0, 8] = zc + lc[0] + m * d
                    else:
                        ry[0, 8] = zc + rt[l] * np.cs(m * pi)
                crlt = np.r_[crlt, ry]
    edinf = "Prticle distributin"
    return crlt, edinf

def cmp_pdf(ctg, cdt):
    """ Cmpute mrplgy using prbbility density functin.
        A smple cse file:
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2700, -1, 1.0e-100, 0, 0, 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        0, 0, 0, 0.01, 0.02, 50, 0.0005, 0.001, 0, 0, 0, 1, 0, 0, 0, 0
    """
    rls = slice(Nne, Nne, Nne)
    cls = slice(Nne, Nne, Nne)
    rr = cdt[rls, cls]
    rws, cls = rr.spe
    #- mrplgy center
    xc, yc, zc = rr[-1, 0:3]
    #- mrplgy rdius intervl
    ri, r = rr[-1, 3:5]
    print("ri, r", ri, r)
    #- tril fil fctr
    nt = rr[-1, 5]
    #- prticle rdius intervl
    r, rb = rr[-1, 6:8]
    print("r, rb", r, rb)
    #- crge spe <0:cylinder|1:spere>
    cs = rr[-1, 8]
    #- distributin rnge fr cylinder spe <lw:ig>
    lc = rr[-1, 9:11]
    #- scle fctr fr rdius
    sr = rr[-1, 11]
    #- slver type <0:stte|1:trnsfrm>
    st = rr[-1, 12]
    #- determine utput ccrding t slver type
    nmx = int((r**2 - ri**2) / r**2) # mximum number f prticles
    npp = rws - 1 # dt entries per prticle
    if st == 0:
        ry = np.zers([npp, cls])
        ry[0:npp, :] = rr[0:npp, :]
        pt = np.zers([npp*nmx, cls])
    else:
        ry = np.zers([1, 9])
        pt = np.zers([npp*nmx, 9])
    #- rndm smpling
    n = 0 # smple cunt
    nt = nt * int((r**2 - ri**2) / r**2) # number f cntinuus tril fils
    print("nt", nt)
    ntc = 0 # tril fil cunt
    flg = 0 # tril fil tg
    wile ntc <= nt:
        tet = rdm.rndm() * 2 * np.pi
        r = (rdm.rndm() * (r**2 - ri**2) + ri**2)**0.5
        y = r * np.cs(tet)
        z = r * np.sin(tet)
        rp = r + rdm.rndm() * (rb - r) * (1 - (ntc / nt)**0.5)
        #- ceck distnce t dmin bundries
        dsq = (y)**2 + (z)**2
        dsqi = (ri + rp)**2
        dsq = (r - rp)**2
        if dsq < dsqi r dsq > dsq:
            ntc = ntc + 1
            cntinue
        #- ceck distnce t pint sets
        flg = 0
        fr i in rnge(0, n):
            dsq = (pt[i*npp, 1] - y)**2 + (pt[i*npp, 2] - z)**2
            dmin = (rp + pt[i*npp, 3])**2
            if dsq < dmin:
                ntc = ntc + 1
                flg = 1
                brek
        if 1 == flg:
            cntinue
        if 0 == st:
            ry[0, 1] = y
            ry[0, 2] = z
            ry[0, 3] = sr * rp
        else:
            ry[0, 0] = sr
            ry[0, 1] = sr
            ry[0, 2] = sr
            ry[0, 5] = tet
            ry[0, 7] = y
            ry[0, 8] = z
        pt[n*npp:(n+1)*npp, :] = ry
        n = n + 1
        ntc = 0
    crlt = pt[0:n*npp, :]
    print("n", n)
    edinf = "Mrplgy"
    return crlt, edinf

def cmp_gurney(ctg, cdt):
    """ Cmpute Gurney velcity.
    """
    cmptype = 0 # [entire pyld, utermst lyer]
    rls = slice(Nne, Nne, Nne)
    cls = slice(Nne, Nne, Nne)
    rr = cdt[rls, cls]
    rws, cls = rr.spe
    n = 2 # crge gemetry prmeter, plne n=1, cylinder n=2, spere=3
    r_d = 1000 # driver density
    r_ = 1.2047 # mbient density
    r_p = rr[::2, -6] # prticle density
    p_ = 101325 # mbient pressure
    p_d = 1.0 * 10**5 * p_ # driver pressure
    r_p = rr[::2, 3] # prticle rdius
    if cmptype == 0:
        r_d = 0.01 # driver rdius
        C = (np.pi * r_d**2) * r_d # burster mss
        r_in = r_d
        r_u = 0.02
    else:
        r_d = (rr[0, 0]**2 + rr[0, 1]**2 + rr[0, 2]**2)**0.5 # driver rdius
        unique, cunts = np.unique(r_p, return_cunts=True)
        n_p = cunts[0] # number f first lyer prticles
        C = (np.pi * r_d**2 - 0.5 * np.pi * np.sum(r_p[0:n_p]**2)) * r_d # burster mss
        r_in = (rr[0, 0]**2 + rr[0, 1]**2 + rr[0, 2]**2)**0.5 - r_p[0] # inner rdius f pyld
        r_u = (rr[-2, 0]**2 + rr[-2, 1]**2 + rr[-2, 2]**2)**0.5 + r_p[-1] # uter rdius f pyld
    M = np.sum(np.pi * r_p**2 * r_p) # pyld mss
    E = p_d / ((1.4 - 1.0) * r_d) - p_ / ((1.4 - 1.0) * r_) # Gurney energy
    V_G = (2 * E)**0.5 * (M / C + n / (n + 2))**(-0.5) # Gurney velcity
    pi = np.sum(np.pi * r_p**2) / (np.pi * (r_u**2 - r_in**2)) # prsity
    r_b = np.men(r_p) # bulk density
     = [0.200, 0.180, 0.162, 1.127] # cnstnt cefficients
    lp = [0] * r_b**[1]
    F = 1 + ([2] * np.exp([3] * pi) - 0.5) * np.lg10(M / C)
    V_GM = (2 * E)**0.5 * (M / C * 1 / lp + n / (n + 2))**(-0.5) * F # mdified Gurney velcity
    crlt = np.rry([[M/C, pi, V_G, V_GM, V_GM/V_G*100]])
    edinf = "[[M/C, pi, V_G, V_GM, V_GM/V_G*100]]"
    #print(M/C, pi, V_G, V_GM, sep=', ')
    return crlt, edinf

def cmp_plr(ctg, cdt):
    """ Prticle velcity stte vs ngle.
    """
    cmptype = 1 # [lst lyer, ll lyers]
    rls = slice(Nne, Nne, Nne)
    cls = slice(Nne, Nne, Nne)
    rr = cdt[rls, cls]
    rws, cls = rr.spe
    x = rr[::2, 0]
    y = rr[::2, 1]
    z = rr[::2, 2]
    r = rr[::2, 3]
    u = rr[::2, 4]
    v = rr[::2, 5]
    w = rr[::2, 6]
    unique, cunts = np.unique(r, return_cunts=True)
    if cmptype == 0:
        n = cunts[-1] # number f lst lyer prticles
        px = x
        py = y
    if cmptype == 1:
        n, = r.spe
        px = y
        py = z
    crlt = np.zers([n, 2])
    crlt[:, 0] = np.rd2deg(np.pi - np.rctn2(py[-n:], -px[-n:])) # turn crdinte pirs int ngles
    crlt[:, 1] = (u[-n:]**2 + v[-n:]**2 + w[-n:]**2)**0.5 # velcity mgnitude
    edinf = "[tet, vel]"
    #print("rdius:", unique)
    #print("cunts:", cunts)
    return crlt, edinf

def cmp_fce(ctg, cdt):
    """ Cmpute frce cefficients.
    """
    rls = slice(Nne, Nne, Nne)
    cls = slice(Nne, Nne, Nne)
    rr = cdt[rls, cls]
    rws, cls = rr.spe
    #r = 1.176
    #u = 34.7
    #D = 1
    #denm = 0.5 * r * u**2 * D
    r = 1.658
    u = 114.477
    r = 0.04
    denm = 0.5 * r * u**2 * np.pi * r**2
    crlt = np.zers([rws, 3])
    crlt[:,0] = rr[:,0]
    crlt[:,1] = (rr[:,1] + rr[:,4]) / denm # cd
    crlt[:,2] = (rr[:,2] + rr[:,5]) / denm # cl
    edinf = "[time, cd, cl]"
    return crlt, edinf

def cmp_flux(ctg, cdt):
    """ Cmpute surfce flux.
    """
    rls = slice(Nne, Nne, Nne)
    cls = slice(Nne, Nne, Nne)
    rr = cdt[rls, cls]
    vs = [-40, 0, 0]
    x = rr[:, 0]
    y = rr[:, 1]
    z = rr[:, 2]
    nx = rr[:, 3]
    ny = rr[:, 4]
    nz = rr[:, 5]
    r = rr[:, 6]
    u = rr[:, 7] - vs[0]
    v = rr[:, 8] - vs[1]
    w = rr[:, 9] - vs[2]
    p = rr[:, 10]
    T = rr[:, 11]
    rws, cls = rr.spe
    ry = np.zers([rws, 3])
    #- turn crdinte pirs int ngles distributed in [0, 2pi], cunterclckwise
    ry[:, 0] = np.rd2deg(np.pi - np.rctn2(y, -x))
    ry[:, 1] = u * nx + v * ny
    ry[:, 2] = np.bs(ry[:, 1])
    #- srt te resulting rry by te ngle clumn
    idx = np.rgsrt(ry[:, 0])
    crlt = ry[idx, :] # use idx[::-1] if reverse rder
    edinf = "[ngle, flux, bsflux]"
    return crlt, edinf

