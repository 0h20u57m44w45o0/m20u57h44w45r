/****************************************************************************
 *                              ArtraCFD                                    *
 *                          <By Huangrui Mo>                                *
 * Copyright (C) Huangrui Mo <huangrui.mo@gmail.com>                        *
 * This file is part of ArtraCFD.                                           *
 * ArtraCFD is free software: you can redistribute it and/or modify it      *
 * under the terms of the GNU General Public License as published by        *
 * the Free Software Foundation, either version 3 of the License, or        *
 * (at your option) any later version.                                      *
 ****************************************************************************/
/****************************************************************************
 * Required Header Files
 ****************************************************************************/
#include <stdio.h> /* standard library for input and output */
#include "stl.h"
#include "commons.h"
/****************************************************************************
 * Static Function Declarations
 ****************************************************************************/
static void GenerateTriangulatedGeometryFile(void);
/****************************************************************************
 * The Main Function
 ****************************************************************************/
int main(void)
{
    GenerateTriangulatedGeometryFile();
    return 0;
}
static void GenerateTriangulatedGeometryFile(void)
{
    Facet wedge_deg30_xy[8] = {
        {{-5.000000e-001, 8.660254e-001, 0.000000e+000},
            {8.660254e-001, 5.000000e-001, 5.000000e-001},
            {8.660254e-001, 5.000000e-001, -5.000000e-001},
            {0.000000e+000, 0.000000e+000, 5.000000e-001}},
        {{-5.000000e-001, 8.660254e-001, 0.000000e+000},
            {0.000000e+000, 0.000000e+000, 5.000000e-001},
            {8.660254e-001, 5.000000e-001, -5.000000e-001},
            {0.000000e+000, 0.000000e+000, -5.000000e-001}},
        {{1.000000e+000, 0.000000e+000, 0.000000e+000},
            {8.660254e-001, -5.000000e-001, 5.000000e-001},
            {8.660254e-001, -5.000000e-001, -5.000000e-001},
            {8.660254e-001, 5.000000e-001, 5.000000e-001}},
        {{1.000000e+000, 0.000000e+000, 0.000000e+000},
            {8.660254e-001, 5.000000e-001, 5.000000e-001},
            {8.660254e-001, -5.000000e-001, -5.000000e-001},
            {8.660254e-001, 5.000000e-001, -5.000000e-001}},
        {{-5.000000e-001, -8.660254e-001, 0.000000e+000},
            {0.000000e+000, 0.000000e+000, 5.000000e-001},
            {0.000000e+000, 0.000000e+000, -5.000000e-001},
            {8.660254e-001, -5.000000e-001, 5.000000e-001}},
        {{-5.000000e-001, -8.660254e-001, 0.000000e+000},
            {8.660254e-001, -5.000000e-001, 5.000000e-001},
            {0.000000e+000, 0.000000e+000, -5.000000e-001},
            {8.660254e-001, -5.000000e-001, -5.000000e-001}},
        {{0.000000e+000, 0.000000e+000, -1.000000e+000},
            {8.660254e-001, 5.000000e-001, -5.000000e-001},
            {8.660254e-001, -5.000000e-001, -5.000000e-001},
            {0.000000e+000, 0.000000e+000, -5.000000e-001}},
        {{0.000000e+000, 0.000000e+000, 1.000000e+000},
            {0.000000e+000, 0.000000e+000, 5.000000e-001},
            {8.660254e-001, -5.000000e-001, 5.000000e-001},
            {8.660254e-001, 5.000000e-001, 5.000000e-001}}
    };
    Polyhedron wedge = {
        .faceN = 8,
        .facet = wedge_deg30_xy
    };
    ReadStlFile("wedge_deg15_xy.stl", &wedge);
    /* apply rotation matrix */
    WriteStlFile("wedge_deg15_yz.stl", &wedge);
    return;
}
/* a good practice: end file with a newline */

