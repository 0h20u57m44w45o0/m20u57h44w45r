#include <omp.h> /* parallel header file */
#include <stdio.h>

#define NUM_THREADS 2

int main (int argc, char* argv[])
{
    int num_steps = 1000;
    int nthreads = 0;
    double x = 0.0;
    double dx = 1.0 / num_steps;
    double sum = 0.0;
    double pi = 0.0;
    omp_set_num_threads(NUM_THREADS);
    /*
     * For good OpenMP implementations, reduction is more scalable than
     * critical. Note that we created a parallel program without changing
     * any code and by adding several simple lines
     */
    #pragma omp parallel for private(x) reduction(+:sum)
    for (int i = 0; i < num_steps; ++i) {
        x = (i + 0.5) * dx;
        sum = sum + 4.0 / (1 + x * x);
    }
    pi = sum * dx;
    printf("nthreads = %d, pi = %lf\n", nthreads, pi);
    return 0;
}

