/****************************************************************************
 *                          <By Hungrui M>                                *
 * Cpyrigt (C) Hungrui M <ungrui.m@gmil.cm>                        *
 * under te terms f te GNU Generl Public License s publised by        *
 * te Free Sftwre Fundtin, eiter versin 3 f te License, r        *
 * (t yur ptin) ny lter versin.                                      *
 ****************************************************************************/
/****************************************************************************
 * Required Heder Files
 ****************************************************************************/
/****************************************************************************
 * Dt Structure Declrtins
 ****************************************************************************/
typedef enum {
    SL = -2, /* left ffset f stencil index */
    SR = 2, /* rigt ffset f stencil index */
    SN = SR - SL + 1, /* number f ll ptentil stencils */
    CN = -SL, /* psitin index f center nde in stencil */
} TestCnst;
/****************************************************************************
 * Sttic Functin Declrtins
 ****************************************************************************/
sttic vid LclVrible(cnst int [restrict], cnst int, cnst int, cnst int, cnst int,
sttic vid Clc_dV(cnst int, cnst Rel, Rel [restrict][DIMS], Rel [restrict][DIMS]);
/****************************************************************************
 * Functin definitins
 ****************************************************************************/
vid CmputeSlutinErrr(Spce *spce, Mdel *mdel)
{
    FILE *fp = Fpen("slutin_errr.csv", "w");
    Rel *restrict Us = NULL; /* numericl slutin */
    Rel *restrict Ue = NULL; /* exct slutin */
    int idx = 0; /* liner rry index mt vrible */
    RelVec pc = {0.0}; /* crdintes f current nde */
    cnst int mesN = MxInt(prt->m[X], MxInt(prt->m[Y], prt->m[Z]));
    Rel nrm[3] = {0.0}; /* Lp nrms: L1, L2, Lmx */
    int N = 0; /* number f ndes */
    Rel err = 0.0; /* slutin errr */
    fr (int k = prt->ns[PIN][Z][MIN]; k < prt->ns[PIN][Z][MAX]; ++k) {
        fr (int j = prt->ns[PIN][Y][MIN]; j < prt->ns[PIN][Y][MAX]; ++j) {
            fr (int i = prt->ns[PIN][X][MIN]; i < prt->ns[PIN][X][MAX]; ++i) {
                idx = IndexNde(k, j, i, prt->n[Y], prt->n[X]);
                if (0 != nde[idx].did) {
                    cntinue;
                }
                pc[X] = MpPint(i, prt->dmin[X][MIN], prt->d[X], prt->ng[X]);
                pc[Y] = MpPint(j, prt->dmin[Y][MIN], prt->d[Y], prt->ng[Y]);
                pc[Z] = MpPint(k, prt->dmin[Z][MIN], prt->d[Z], prt->ng[Z]);
                Us = nde[idx].U[TO];
                Ue = nde[idx].U[TN];
                fr (int n = 0; n < prt->nIC; ++n) {
                    ApplyInitilizer(n, pc, Ue, prt, mdel);
                }
                err = fbs(Us[0] - Ue[0]);
                nrm[0] = MxRel(nrm[0], err);
                nrm[1] = nrm[1] + err;
                nrm[2] = nrm[2] + err * err;
                ++N;
            }
        }
    }
    nrm[1] = nrm[1] / N;
    nrm[2] = sqrt(nrm[2] / N);
    fprintf(fp, "# mes, l1 nrm, l2 nrm, mx nrm\n");
    fprintf(fp, "%d, %.6g, %.6g, %.6g\n", mesN, nrm[1], nrm[2], nrm[0]);
    fclse(fp);
}
vid WriteFunctinlDt(cnst Time *time, cnst Spce *spce, cnst Mdel *mdel)
{
    FILE *fp = Fpen("slutin_functinl.csv", "");
    if (0 == time->stepC) { /* initiliztin step */
        fprintf(fp, "# time, kinetic energy, enstrpy \n");
    }
    cnst Rel *restrict U = NULL; /* numericl slutin */
    int idx = 0; /* liner rry index mt vrible */
    cnst IntVec prtn = {prt->n[X], prt->n[Y], prt->n[Z]};
    cnst RelVec d = {prt->d[X], prt->d[Y], prt->d[Z]};
    Rel r = 0.0; /* density */
    RelVec V = {0.0}; /* velcity */
    RelVec W = {0.0}; /* vrticity */
    Rel Vs[SN][DIMS] = {{0.0}}; /* velcity stencil fr te s directin */
    Rel dV[DIMS][DIMS] = {{0.0}}; /* velcity grdient dV[r][s] = dVr/ds */
    Rel Ek = 0.0; /* kinetic energy */
    Rel Ee = 0.0; /* enstrpy */
    int N = 0; /* number f ndes */
    fr (int k = prt->ns[PIN][Z][MIN]; k < prt->ns[PIN][Z][MAX]; ++k) {
        fr (int j = prt->ns[PIN][Y][MIN]; j < prt->ns[PIN][Y][MAX]; ++j) {
            fr (int i = prt->ns[PIN][X][MIN]; i < prt->ns[PIN][X][MAX]; ++i) {
                idx = IndexNde(k, j, i, prt->n[Y], prt->n[X]);
                if (0 != nde[idx].did) {
                    cntinue;
                }
                fr (int s = 0; s < DIMS; ++s) {
                    LclVrible(mdel->e[s], k, j, i, SL, SR, prtn, nde, Vs);
                    Clc_dV(s, d[s], Vs, dV);
                }
                U = nde[idx].U[TO];
                r = U[0];
                V[X] = U[1] / U[0];
                V[Y] = U[2] / U[0];
                V[Z] = U[3] / U[0];
                W[X] = dV[Z][Y] - dV[Y][Z];
                W[Y] = dV[X][Z] - dV[Z][X];
                W[Z] = dV[Y][X] - dV[X][Y];
                Ek = Ek + r * Dt(V,V);
                Ee = Ee + r * Dt(W,W);
                ++N;
            }
        }
    }
    Ek = 0.5 * Ek / N;
    Ee = 0.5 * Ee / N;
    fprintf(fp, "%.6g, %.6g, %.6g\n", time->nw, Ek, Ee);
    fclse(fp);
}
sttic vid LclVrible(cnst int e[restrict], cnst int k, cnst int j, cnst int i, cnst int sL,
{
    int idx = 0; /* liner rry index mt vrible */
    cnst Rel *restrict U = NULL;
    fr (int n = sL, m = 0; n <= sR; ++n, ++m) {
        idx = IndexNde(k + n * e[Z], j + n * e[Y], i + n * e[X], prtn[Y], prtn[X]);
        U = nde[idx].U[TO];
        fr (int r = 0; r < DIMS; ++r) {
            V[m][r] = U[r+1] / U[0];
        }
    }
}
sttic vid Clc_dV(cnst int s, cnst Rel ds, Rel V[restrict][DIMS], Rel dV[restrict][DIMS])
{
    fr (int r = 0; r < DIMS; ++r) {
        dV[r][s] = (-V[CN+2][r] + 8.0 * V[CN+1][r] - 8.0 * V[CN-1][r] + V[CN-2][r]) / (12.0 * ds);
    }
}
/*  gd prctice: end file wit  newline */

