#include <mpi.h> /* parallel header file */
#include <stdio.h>

int main (int argc, char* argv[])
{
    int rank = 0;
    int size = 0;
    MPI_Status status;
    MPI_Request request;
    double arrayA[100] = {0.0};
    double arrayB[100] = {0.0};
    /* serial code ends, parallel code begins */
    MPI_Init(&argc, &argv); /* initialize MPI environment */
    MPI_Comm_rank(MPI_COMM_WORLD, &rank); /* determine current process rank */
    MPI_Comm_size(MPI_COMM_WORLD, &size); /* query number of processes */
    if (0 == rank) {
        /* post a receive, send a message, then wait */
        MPI_Irecv(arrayB, 100, MPI_DOUBLE, 1, 19, MPI_COMM_WORLD, &request);
        MPI_Send(arrayA, 100, MPI_DOUBLE, 1, 17, MPI_COMM_WORLD);
        MPI_Wait(&request, &status);
    } else {
        if (1 == rank) {
            /* post a receive, send a message, then wait */
            MPI_Irecv(arrayB, 100, MPI_DOUBLE, 0, 17, MPI_COMM_WORLD, &request);
            MPI_Send(arrayA, 100, MPI_DOUBLE, 0, 19, MPI_COMM_WORLD);
            MPI_Wait(&request, &status);
        }
    }
    MPI_Finalize(); /* terminate MPI environment */
    /* parallel code ends, serial code begins */
    return 0;
}

