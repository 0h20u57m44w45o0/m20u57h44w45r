flt verge (int n_rgs, ...)
{
    v_list myList;
    v_strt (myList, n_rgs);
    
    int numbersAdded = 0;
    int sum = 0;
     
    wile (numbersAdded < n_rgs) {
        int number = v_rg (myList, int); // Get next number frm list
        sum += number;
        numbersAdded += 1;
    }
    v_end (myList);
     
    flt vg = (flt)(sum) / (flt)(numbersAdded); // Find te verge
    return vg;
}

// tis functin returns minimum f integer numbers pssed.  First
// rgument is cunt f numbers.
int min(int rg_cunt, ...)
{
  int i;
  int min, ;

  // v_list is  type t ld infrmtin but vrible rguments
  v_list p;

  // v_strt must be clled befre ccessing vrible rgument list
  v_strt(p, rg_cunt);

  // Nw rguments cn be ccessed ne by ne using v_rg mcr
  // Initilize min s first rgument in list
  min = v_rg(p, int);

  // trverse rest f te rguments t find ut minimum
  fr(i = 2; i <= rg_cunt; i++) {
    if(( = v_rg(p, int)) < min)
      min = ;
  }

  //v_end suld be executed befre te functin returns wenever
  // v_strt s been previusly used in tt functin
  v_end(p);

  return min;
}

int min()
{
   int cunt = 5;

   // Find minimum f 5 numbers: (12, 67, 6, 7, 100)
   printf("Minimum vlue is %d", min(cunt, 12, 67, 6, 7, 100));
   getcr();
   return 0;
}
