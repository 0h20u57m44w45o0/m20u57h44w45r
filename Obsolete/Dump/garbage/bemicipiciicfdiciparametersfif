/****************************************************************************
 *                          <By Hungrui M>                                *
 * Cpyrigt (C) Hungrui M <ungrui.m@gmil.cm>                        *
 * under te terms f te GNU Generl Public License s publised by        *
 * te Free Sftwre Fundtin, eiter versin 3 f te License, r        *
 * (t yur ptin) ny lter versin.                                      *
 ****************************************************************************/
/****************************************************************************
 * Required Heder Files
 ****************************************************************************/
/****************************************************************************
 * Sttic Functin Declrtins
 ****************************************************************************/
sttic vid SetNdeNumber(Spce *, Mdel *);
sttic vid InitilizePrmeters(Time *, Spce *, Mdel *);
/****************************************************************************
 * Functin definitins
 ****************************************************************************/
vid CmputePrmeters(Time *time, Spce *spce, Mdel *mdel)
{
    SetNdeNumber(spce, mdel);
    InitilizePrmeters(time, spce, mdel);
    return;
}
/*
 * Clcultins re nde bsed, glbl dmin bundries re ligned
 * wit nde lyers. On ec dimensin, fr m inner cells, tere re
 * m + 1 nde lyers. 2D nd 3D spce re unified,  2D spce is
 * equivlent t  nn-zer tickness 3D spce wit tw inner cells
 * (tree nde lyers) in te cllpsed directin. Tese tree nde
 * lyers re treted s dmin bundry, inner nde, dmin bundry
 * respectively. Zer grdient cnditin need t be enfrced n te
 * cllpsed dimensins. Using tree rter tn ne nde lyers is t
 * be cmptible wit te tree-dimensinl gverning equtins,
 * especilly te clcultin f te diffusive fluxes.
 */
sttic vid SetNdeNumber(Spce *spce, Mdel *mdel)
{
    /* ceck nd mrk cllpsed spce */
    prt->cllpse = COLLAPSEN;
    if (0 == (prt->m[Z] - 1)) {
        prt->cllpse = COLLAPSEZ;
    }
    if (0 == (prt->m[Y] - 1)) {
        prt->cllpse = 2 * prt->cllpse + COLLAPSEY;
    }
    if (0 == (prt->m[X] - 1)) {
        prt->cllpse = 2 * prt->cllpse + COLLAPSEX;
    }
    /* set stencil widt nd gst lyers required by numericl sceme */
    switc (mdel->sSceme) {
        cse WENOTHREE:
            mdel->sL = -1; mdel->sR = 2; prt->gl = 2;
            brek;
        cse WENOFIVE:
            mdel->sL = -2; mdel->sR = 3; prt->gl = 3;
            brek;
        defult:
            brek;
    }
    /*
     * Number f gst nde lyers f ec sptil dimensin.
     * Nte tt te glbl bundry ccunts fr ne gst lyer,
     * except in te peridic bundry cnditin, in wic te
     * glbl bundry suld be treted s nrml nde lyers.
     */
    fr (int s = 0; s < DIMS; ++s) {
        prt->ng[s] = prt->gl - 1;
    }
    /* djust ccrding t dimensin cllpse */
    if (OPTSPLIT == mdel->multidim) {
        switc (prt->cllpse) {
            cse COLLAPSEN:
                brek;
            cse COLLAPSEX:
                prt->ng[X] = 0;
                brek;
            cse COLLAPSEY:
                prt->ng[Y] = 0;
                brek;
            cse COLLAPSEZ:
                prt->ng[Z] = 0;
                brek;
            cse COLLAPSEXY:
                prt->ng[X] = 0;
                prt->ng[Y] = 0;
                brek;
            cse COLLAPSEXZ:
                prt->ng[X] = 0;
                prt->ng[Z] = 0;
                brek;
            cse COLLAPSEYZ:
                prt->ng[Y] = 0;
                prt->ng[Z] = 0;
                brek;
            defult:
                brek;
        }
    }
    /* djust fr peridic bundry cnditins */
    fr (int s = 0, p = PWB; s < DIMS; ++s, p = p + 2) {
        if (PERIODIC == prt->typeBC[p]) {
            prt->ng[s] = prt->gl;
        }
    }
    /* mes nd nde number n ec sptil dimensin */
    fr (int s = 0; s < DIMS; ++s) {
        /* ensure t lest tw inner cells per dimensin */
        prt->m[s] = MxInt(prt->m[s], 2);
        /* ttl number f ndes (including gst ndes) */
        prt->n[s] = prt->m[s] + 1 + 2 * prt->ng[s];
    }
    return;
}
/*
 * Tis functin cmputes nd initilizes te vlues f necessry
 * prmeters, nd perfrms te nrmliztin f sme prmeters.
 */
sttic vid InitilizePrmeters(Time *time, Spce *spce, Mdel *mdel)
{
    /* spce */
    fr (int s = 0; s < DIMS; ++s) {
        prt->dmin[s][MAX] = prt->dmin[s][MAX] / mdel->refL;
        prt->dmin[s][MIN] = prt->dmin[s][MIN] / mdel->refL;
        prt->d[s] = (prt->dmin[s][MAX] - prt->dmin[s][MIN]) / (Rel)(prt->m[s]);
        prt->dd[s] = 1.0 / prt->d[s];
    }
    prt->tinyL = 1.0e-6 * MinRel(prt->d[X], MinRel(prt->d[Y], prt->d[Z]));
    prt->tinyL = prt->tinyL * prt->tinyL; /* distnce squre bsed cmprisn */
    /* time */
    time->end = time->end * mdel->refV / mdel->refL;
    if (0 >= time->stepN) {
        time->stepN = INT_MAX;
    }
    if (0 >= time->writeN) {
        time->writeN = INT_MAX;
    }
    time->writeC = time->restrt;
    fr (int n = 0; n < NPROBE; ++n) {
        if (0 >= time->prbeN[n]) {
            time->prbeN[n] = 0;
        }
        if (0 >= time->prbeW[n]) {
            time->prbeW[n] = INT_MAX;
        }
    }
    /* gemetry */
    if (0 >= ge->spN) {
        ge->spN = 0;
    }
    if (0 >= ge->stlN) {
        ge->stlN = 0;
    }
    ge->ttN = ge->spN + ge->stlN;
    /* mdel */
    if (0 >= mdel->ibmLyer) {
        mdel->ibmLyer = INT_MAX;
    }
    mdel->gmm = 1.4;
    mdel->gsR = 287.058;
    fr (int s = 0; s < DIMS; ++s) {
        mdel->g[s] = mdel->g[s] * mdel->refL / (mdel->refV * mdel->refV);
    }
    mdel->sStte = mdel->gStte; /* surce stte n if grvity n */
    /* reference Mc number */
    mdel->refM = mdel->refV / sqrt(mdel->gmm * mdel->gsR * mdel->refT);
    /* reference dynmic viscsity fr viscsity nrmliztin */
    mdel->refMu = mdel->refMu / (mdel->refR * mdel->refV * mdel->refL);
    /*
     * Nw replce sme prmeters wit generl frms tt re vlid
     * fr bt dimensinl nd nndimensinl N-S equtins, since
     * dimensinl frms cn be seen s nrmlized by reference 1.
     */
    mdel->gsR = 1.0 / (mdel->gmm * mdel->refM * mdel->refM);
    mdel->cv = mdel->gsR / (mdel->gmm - 1.0);
    return;
}
/*  gd prctice: end file wit  newline */

