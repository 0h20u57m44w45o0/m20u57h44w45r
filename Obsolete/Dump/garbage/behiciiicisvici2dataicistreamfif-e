/****************************************************************************
 *                              ArtraCFD                                    *
 *                          <By Huangrui Mo>                                *
 * Copyright (C) Huangrui Mo <huangrui.mo@gmail.com>                        *
 * This file is part of ArtraCFD.                                           *
 * ArtraCFD is free software: you can redistribute it and/or modify it      *
 * under the terms of the GNU General Public License as published by        *
 * the Free Software Foundation, either version 3 of the License, or        *
 * (at your option) any later version.                                      *
 ****************************************************************************/
/****************************************************************************
 * Required Header Files
 ****************************************************************************/
#include "data_stream.h"
#include <stdio.h> /* standard library for input and output */
#include <string.h> /* manipulating strings */
#include <float.h> /* size of floating point values */
#include "paraview.h"
#include "ensight.h"
#include "commons.h"
/****************************************************************************
 * Function Pointers
 ****************************************************************************/
typedef int (*StructuredDataWriter)(const Time *, const Space *, const Model *);
typedef int (*StructuredDataReader)(Time *, Space *, const Model *);
typedef int (*PolyDataWriter)(const Time *, const Geometry *);
typedef int (*PolyDataReader)(const Time *, Geometry *);
/****************************************************************************
 * Global Variables Definition with Private Scope
 ****************************************************************************/
static StructuredDataWriter WriteStructuredData[2] = {
    WriteStructuredDataParaview,
    WriteStructuredDataEnsight};
static StructuredDataReader ReadStructuredData[2] = {
    ReadStructuredDataParaview,
    ReadStructuredDataEnsight};
static PolyDataWriter WritePolyData[2] = {
    WritePolyDataParaview,
    WritePolyDataEnsight};
static PolyDataReader ReadPolyData[2] = {
    ReadPolyDataParaview,
    ReadPolyDataEnsight};
/****************************************************************************
 * Function definitions
 ****************************************************************************/
int WriteFieldData(const Time *time, const Space *space, const Model *model)
{
    WriteStructuredData[time->dataStreamer](time, space, model);
    return 0;
}
int ReadFieldData(Time *time, Space *space, const Model *model)
{
    ReadStructuredData[time->dataStreamer](time, space, model);
    return 0;
}
int WriteGeometryData(const Time *time, const Geometry *geo)
{
    if (0 == geo->totN) {
        return 0;
    }
    WritePolyData[time->dataStreamer](time, geo);
    return 0;
}
int ReadGeometryData(const Time *time, Geometry *geo)
{
    if (0 == geo->totN) {
        return 0;
    }
    ReadPolyData[time->dataStreamer](time, geo);
    return 0;
}
int WritePolyhedronStateData(const int start, const int end, FILE *filePointer, const Geometry *geo)
{
    const char formatI[100] = "  %.6g, %.6g, %.6g, %.6g, %.6g, %.6g, %.6g, %.6g, %.6g, %.6g, %.6g, %.6g, %.6g, %.6g, %.6g, %d\n";
    const char formatJ[100] = "  %.6g, %.6g, %.6g, %.6g, %.6g, %.6g, %.6g, %.6g, %.6g, %.6g, %.6g, %.6g, %.6g, %.6g, %.6g, %.6g\n";
    const Polyhedron *poly = NULL;
    for (int n = start; n < end; ++n) {
        poly = geo->poly + n;
        fprintf(filePointer, formatI,
                poly->O[X], poly->O[Y], poly->O[Z], poly->r,
                poly->V[TO][X], poly->V[TO][Y], poly->V[TO][Z],
                poly->W[TO][X], poly->W[TO][Y], poly->W[TO][Z],
                poly->rho, poly->T, poly->cf,
                poly->area, poly->volume, poly->mid);
        fprintf(filePointer, formatJ,
                poly->at[TO][X], poly->at[TO][Y], poly->at[TO][Z],
                poly->ar[TO][X], poly->ar[TO][Y], poly->ar[TO][Z],
                poly->at[TN][X], poly->at[TN][Y], poly->at[TN][Z],
                poly->g[X], poly->g[Y], poly->g[Z],
                poly->ar[TN][X], poly->ar[TN][Y], poly->ar[TN][Z],
                poly->to);
    }
    return 0;
}
int ReadPolyhedronStateData(const int start, const int end, FILE *filePointer, Geometry *geo)
{
    String currentLine = {'\0'}; /* store the current read line */
    int nscan = 0; /* read conversion count */
    /* set format specifier according to the type of Real */
    char formatI[100] = "%lg, %lg, %lg, %lg, %lg, %lg, %lg, %lg, %lg, %lg, %lg, %lg, %lg, %lg, %lg, %d";
    char formatJ[100] = "%lg, %lg, %lg, %lg, %lg, %lg, %lg, %lg, %lg, %lg, %lg, %lg, %lg, %lg, %lg, %lg";
    if (sizeof(Real) == sizeof(float)) { /* if set Real as float */
        strncpy(formatI, "%g, %g, %g, %g, %g, %g, %g, %g, %g, %g, %g, %g, %g, %g, %g, %d", sizeof formatI);
        strncpy(formatJ, "%g, %g, %g, %g, %g, %g, %g, %g, %g, %g, %g, %g, %g, %g, %g, %g", sizeof formatJ);
    }
    Polyhedron *poly  = NULL;
    const Real zero = 0.0;
    for (int n = start; n < end; ++n) {
        poly = geo->poly + n;
        Fgets(currentLine, sizeof currentLine, filePointer);
        nscan = sscanf(currentLine, formatI,
                &(poly->O[X]), &(poly->O[Y]), &(poly->O[Z]), &(poly->r),
                &(poly->V[TO][X]), &(poly->V[TO][Y]), &(poly->V[TO][Z]),
                &(poly->W[TO][X]), &(poly->W[TO][Y]), &(poly->W[TO][Z]),
                &(poly->rho), &(poly->T), &(poly->cf),
                &(poly->area), &(poly->volume), &(poly->mid));
        VerifyReadConversion(nscan, 16);
        Fgets(currentLine, sizeof currentLine, filePointer);
        nscan = sscanf(currentLine, formatJ,
                &(poly->at[TO][X]), &(poly->at[TO][Y]), &(poly->at[TO][Z]),
                &(poly->ar[TO][X]), &(poly->ar[TO][Y]), &(poly->ar[TO][Z]),
                &(poly->at[TN][X]), &(poly->at[TN][Y]), &(poly->at[TN][Z]),
                &(poly->g[X]), &(poly->g[Y]), &(poly->g[Z]),
                &(poly->ar[TN][X]), &(poly->ar[TN][Y]), &(poly->ar[TN][Z]),
                &(poly->to));
        VerifyReadConversion(nscan, 16);
        if (zero >= poly->to) {
            poly->to = FLT_MAX;
        }
        if (geo->sphN > n) {
            poly->faceN = 0; /* analytical sphere tag */
            poly->facet = NULL;
        }
        for (int s = 0; s < DIMS; ++s) {
            poly->V[TN][s] = poly->V[TO][s];
            poly->W[TN][s] = poly->W[TO][s];
        }
    }
    return 0;
}
/* a good practice: end file with a newline */

