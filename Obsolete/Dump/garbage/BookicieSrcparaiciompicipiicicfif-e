#include <omp.h> /* parallel header file */
#include <stdio.h>

#define NUM_THREADS 2

int main (int argc, char* argv[])
{
    int num_steps = 1000;
    int nthreads = 0;
    double dx = 1.0 / num_steps;
    double pi = 0.0;
    omp_set_num_threads(NUM_THREADS);
    #pragma omp parallel
    {
        int id = omp_get_thread_num();
        int nthrds = omp_get_num_threads();
        /* 
         * Create copies local to each thread to avoid race condition
         */
        double x = 0.0;
        /*
         * Create a scalar local to each thread to accumulate partial sums
         */
        double sum = 0.0;
        /*
         * Only one thread should write the number of threads to the
         * global value to make sure multiple threads writing to the
         * same address do not conflict
         */
        if (0 == id) {
            nthreads = nthrds;
        }
        /*
         * This is a common trick in SPMD programs to create a cyclic
         * distribution of loop iterations
         */
        for (int i = id; i < num_steps; i = i + nthrds) {
            x = (i + 0.5) * dx;
            /*
             * No array, so no false sharing
             */
            sum = sum + 4.0 / (1 + x * x);
        }
        /*
         * sum goes out of scope beyond the parallel region, so you must sum it
         * here. Must protect summation into pi in a critical region so updates
         * don't conflict
         */
        #pragma omp critical 
        pi = pi + sum * dx;
    }
    printf("nthreads = %d, pi = %lf\n", nthreads, pi);
    return 0;
}

