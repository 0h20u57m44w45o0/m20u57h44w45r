#include <omp.h> /* parallel header file */
#include <stdio.h>

int main (int argc, char* argv[])
{
    int num_trials = 10000;
    int ncirc = 0;
    double x = 0.0;
    double y = 0.0;
    double r = 1.0; /* radius of circle, side of square is 2r */
    seed(0, -r, r); /* circle and square are centered at the origin */
    double pi = 0.0;
    /*
     * Embarrassingly parallel: the parallelism is so easy that you only need
     * to add two lines to have a parallel program
     */
    #pragma omp parallel for private(x,y) reduction(+:ncirc)
    for (int i = 0; i < num_trials; ++i) {
        x = random();
        y = random();
        if (r * r >= x * x + y * y) {
            ++ncirc;
        }
    }
    pi = 4.0 * ((double) ncirc / (double) num_trials);
    printf("pi = %lf\n", pi);
    return 0;
}

