#### import the simple module from the paraview
from paraview.simple import *
#### disable automatic camera reset on 'Show'
paraview.simple._DisableFirstRenderCameraReset()

# create a new 'EnSight Reader'
fieldcase = EnSightReader(CaseFileName='/scratch/morui/graham/missile/body_short/M192/field.case')
fieldcase.PointArrays = ['rho', 'u', 'v', 'w', 'p', 'T', 'did', 'Vel']

# get animation scene
animationScene1 = GetAnimationScene()

# update animation scene based on data timesteps
animationScene1.UpdateAnimationUsingDataTimeSteps()

# Properties modified on fieldcase
fieldcase.PointArrays = ['rho', 'did']

# get active view
renderView1 = GetActiveViewOrCreate('RenderView')
# uncomment following to set a specific view size
# renderView1.ViewSize = [977, 638]

# show data in view
fieldcaseDisplay = Show(fieldcase, renderView1)
# trace defaults for the display properties.
fieldcaseDisplay.Representation = 'Outline'
fieldcaseDisplay.AmbientColor = [0.0, 0.0, 0.0]
fieldcaseDisplay.ColorArrayName = ['POINTS', '']
fieldcaseDisplay.DiffuseColor = [0.0, 0.0, 0.0]
fieldcaseDisplay.BackfaceDiffuseColor = [0.0, 0.0, 0.0]
fieldcaseDisplay.OSPRayScaleArray = 'rho'
fieldcaseDisplay.OSPRayScaleFunction = 'PiecewiseFunction'
fieldcaseDisplay.GlyphType = 'Arrow'
fieldcaseDisplay.ScalarOpacityUnitDistance = 0.014541191586033694

# reset view to fit data
renderView1.ResetCamera()

# create a new 'Compute Derivatives'
computeDerivatives1 = ComputeDerivatives(Input=fieldcase)
computeDerivatives1.Scalars = ['POINTS', 'rho']
computeDerivatives1.Vectors = [None, '1']

# Properties modified on computeDerivatives1
computeDerivatives1.Vectors = [None, '']
computeDerivatives1.OutputTensorType = 'Nothing'

# show data in view
computeDerivatives1Display = Show(computeDerivatives1, renderView1)
# trace defaults for the display properties.
computeDerivatives1Display.Representation = 'Outline'
computeDerivatives1Display.AmbientColor = [0.0, 0.0, 0.0]
computeDerivatives1Display.ColorArrayName = ['POINTS', '']
computeDerivatives1Display.DiffuseColor = [0.0, 0.0, 0.0]
computeDerivatives1Display.BackfaceDiffuseColor = [0.0, 0.0, 0.0]
computeDerivatives1Display.OSPRayScaleArray = 'rho'
computeDerivatives1Display.OSPRayScaleFunction = 'PiecewiseFunction'
computeDerivatives1Display.GlyphType = 'Arrow'
computeDerivatives1Display.ScalarOpacityUnitDistance = 0.014541191586033694

# hide data in view
Hide(fieldcase, renderView1)

# create a new 'Cell Data to Point Data'
cellDatatoPointData1 = CellDatatoPointData(Input=computeDerivatives1)

# show data in view
cellDatatoPointData1Display = Show(cellDatatoPointData1, renderView1)
# trace defaults for the display properties.
cellDatatoPointData1Display.Representation = 'Outline'
cellDatatoPointData1Display.AmbientColor = [0.0, 0.0, 0.0]
cellDatatoPointData1Display.ColorArrayName = ['POINTS', '']
cellDatatoPointData1Display.DiffuseColor = [0.0, 0.0, 0.0]
cellDatatoPointData1Display.BackfaceDiffuseColor = [0.0, 0.0, 0.0]
cellDatatoPointData1Display.OSPRayScaleArray = 'rho'
cellDatatoPointData1Display.OSPRayScaleFunction = 'PiecewiseFunction'
cellDatatoPointData1Display.GlyphType = 'Arrow'
cellDatatoPointData1Display.ScalarOpacityUnitDistance = 0.014541191586033694

# hide data in view
Hide(computeDerivatives1, renderView1)

# create a new 'Calculator'
calculator1 = Calculator(Input=cellDatatoPointData1)
calculator1.Function = ''

# Properties modified on calculator1
calculator1.ResultArrayName = 'drho'
calculator1.Function = 'mag(ScalarGradient)'

# show data in view
calculator1Display = Show(calculator1, renderView1)
# trace defaults for the display properties.
calculator1Display.Representation = 'Outline'
calculator1Display.AmbientColor = [0.0, 0.0, 0.0]
calculator1Display.ColorArrayName = ['POINTS', '']
calculator1Display.DiffuseColor = [0.0, 0.0, 0.0]
calculator1Display.BackfaceDiffuseColor = [0.0, 0.0, 0.0]
calculator1Display.OSPRayScaleArray = 'drho'
calculator1Display.OSPRayScaleFunction = 'PiecewiseFunction'
calculator1Display.GlyphType = 'Arrow'
calculator1Display.ScalarOpacityUnitDistance = 0.014541191586033694

# hide data in view
Hide(cellDatatoPointData1, renderView1)

# create a new 'Threshold'
threshold1 = Threshold(Input=calculator1)
threshold1.Scalars = ['POINTS', 'drho']

# Properties modified on threshold1
threshold1.Scalars = ['POINTS', 'did']

# get color transfer function/color map for 'drho'
drhoLUT = GetColorTransferFunction('drho')

# show data in view
threshold1Display = Show(threshold1, renderView1)
# trace defaults for the display properties.
threshold1Display.AmbientColor = [0.0, 0.0, 0.0]
threshold1Display.ColorArrayName = ['POINTS', 'drho']
threshold1Display.DiffuseColor = [0.0, 0.0, 0.0]
threshold1Display.LookupTable = drhoLUT
threshold1Display.BackfaceDiffuseColor = [0.0, 0.0, 0.0]
threshold1Display.OSPRayScaleArray = 'drho'
threshold1Display.OSPRayScaleFunction = 'PiecewiseFunction'
threshold1Display.GlyphType = 'Arrow'
threshold1Display.ScalarOpacityUnitDistance = 0.01730202450995133
threshold1Display.SetScaleArray = ['POINTS', 'drho']
threshold1Display.ScaleTransferFunction = 'PiecewiseFunction'
threshold1Display.OpacityArray = ['POINTS', 'drho']
threshold1Display.OpacityTransferFunction = 'PiecewiseFunction'

# show color bar/color legend
threshold1Display.SetScalarBarVisibility(renderView1, True)

# get opacity transfer function/opacity map for 'drho'
drhoPWF = GetOpacityTransferFunction('drho')

# create a new 'Iso Volume'
isoVolume1 = IsoVolume(Input=threshold1)
isoVolume1.InputScalars = ['POINTS', 'drho']

# Properties modified on isoVolume1
isoVolume1.ThresholdRange = [1.0, 500.0]

# show data in view
isoVolume1Display = Show(isoVolume1, renderView1)
# trace defaults for the display properties.
isoVolume1Display.AmbientColor = [0.0, 0.0, 0.0]
isoVolume1Display.ColorArrayName = ['POINTS', 'drho']
isoVolume1Display.DiffuseColor = [0.0, 0.0, 0.0]
isoVolume1Display.LookupTable = drhoLUT
isoVolume1Display.BackfaceDiffuseColor = [0.0, 0.0, 0.0]
isoVolume1Display.OSPRayScaleArray = 'drho'
isoVolume1Display.OSPRayScaleFunction = 'PiecewiseFunction'
isoVolume1Display.GlyphType = 'Arrow'
isoVolume1Display.ScalarOpacityUnitDistance = 0.017387248296618515
isoVolume1Display.SetScaleArray = ['POINTS', 'drho']
isoVolume1Display.ScaleTransferFunction = 'PiecewiseFunction'
isoVolume1Display.OpacityArray = ['POINTS', 'drho']
isoVolume1Display.OpacityTransferFunction = 'PiecewiseFunction'

# hide data in view
Hide(threshold1, renderView1)

# show color bar/color legend
isoVolume1Display.SetScalarBarVisibility(renderView1, True)

# hide data in view
Hide(calculator1, renderView1)

# Rescale transfer function
drhoLUT.RescaleTransferFunction(1.0, 500.0)

# Rescale transfer function
drhoPWF.RescaleTransferFunction(1.0, 500.0)

# convert to log space
drhoLUT.MapControlPointsToLogSpace()

# Properties modified on drhoLUT
drhoLUT.UseLogScale = 1

# Apply a preset using its name. Note this may not work as expected when presets have duplicate names.
drhoLUT.ApplyPreset('Black-Body Radiation', True)

#### saving camera placements for all active views

# current camera placement for renderView1
renderView1.CameraPosition = [-0.34916484013468846, -0.7851762147269961, 2.466545853052935]
renderView1.CameraFocalPoint = [0.8546886886721514, -0.014330935652312471, 0.0475329933446899]
renderView1.CameraViewUp = [0.49187892765192276, 0.728429718741019, 0.476912219791939]
renderView1.CameraParallelScale = 1.0647446968284675

#### uncomment the following to render all views
# RenderAllViews()
# alternatively, if you want to write images, you can use SaveScreenshot(...).
