#### import the simple module from the paraview
from paraview.simple import *
#### disable automatic camera reset on 'Show'
paraview.simple._DisableFirstRenderCameraReset()

# create a new 'EnSight Reader'
fieldcase = EnSightReader(CaseFileName='/scratch/morui/graham/multibody_collision/m2400/field.case')
fieldcase.PointArrays = ['rho', 'u', 'v', 'w', 'p', 'T', 'did', 'Vel']

# get animation scene
animationScene1 = GetAnimationScene()

# update animation scene based on data timesteps
animationScene1.UpdateAnimationUsingDataTimeSteps()

# Properties modified on fieldcase
fieldcase.PointArrays = ['rho']

# get active view
renderView1 = GetActiveViewOrCreate('RenderView')
# uncomment following to set a specific view size
# renderView1.ViewSize = [977, 638]

# get color transfer function/color map for 'rho'
rhoLUT = GetColorTransferFunction('rho')

# show data in view
fieldcaseDisplay = Show(fieldcase, renderView1)
# trace defaults for the display properties.
fieldcaseDisplay.AmbientColor = [0.0, 0.0, 0.0]
fieldcaseDisplay.ColorArrayName = ['POINTS', 'rho']
fieldcaseDisplay.DiffuseColor = [0.0, 0.0, 0.0]
fieldcaseDisplay.LookupTable = rhoLUT
fieldcaseDisplay.BackfaceDiffuseColor = [0.0, 0.0, 0.0]
fieldcaseDisplay.OSPRayScaleArray = 'rho'
fieldcaseDisplay.OSPRayScaleFunction = 'PiecewiseFunction'
fieldcaseDisplay.GlyphType = 'Arrow'
fieldcaseDisplay.ScalarOpacityUnitDistance = 0.19857784318755875

# reset view to fit data
renderView1.ResetCamera()

#changing interaction mode based on data extents
renderView1.InteractionMode = '2D'
renderView1.CameraPosition = [10000.0, 0.0, 0.0]
renderView1.CameraViewUp = [0.0, 0.0, 1.0]

# show color bar/color legend
fieldcaseDisplay.SetScalarBarVisibility(renderView1, True)

# get opacity transfer function/opacity map for 'rho'
rhoPWF = GetOpacityTransferFunction('rho')

# create a new 'Compute Derivatives'
computeDerivatives1 = ComputeDerivatives(Input=fieldcase)
computeDerivatives1.Scalars = ['POINTS', 'rho']
computeDerivatives1.Vectors = [None, '1']

# Properties modified on computeDerivatives1
computeDerivatives1.Vectors = [None, '']
computeDerivatives1.OutputTensorType = 'Nothing'

# show data in view
computeDerivatives1Display = Show(computeDerivatives1, renderView1)
# trace defaults for the display properties.
computeDerivatives1Display.AmbientColor = [0.0, 0.0, 0.0]
computeDerivatives1Display.ColorArrayName = ['POINTS', 'rho']
computeDerivatives1Display.DiffuseColor = [0.0, 0.0, 0.0]
computeDerivatives1Display.LookupTable = rhoLUT
computeDerivatives1Display.BackfaceDiffuseColor = [0.0, 0.0, 0.0]
computeDerivatives1Display.OSPRayScaleArray = 'rho'
computeDerivatives1Display.OSPRayScaleFunction = 'PiecewiseFunction'
computeDerivatives1Display.GlyphType = 'Arrow'
computeDerivatives1Display.ScalarOpacityUnitDistance = 0.19857784318755875

# hide data in view
Hide(fieldcase, renderView1)

# show color bar/color legend
computeDerivatives1Display.SetScalarBarVisibility(renderView1, True)

# set scalar coloring
ColorBy(computeDerivatives1Display, ('CELLS', 'ScalarGradient'))

# rescale color and/or opacity maps used to include current data range
computeDerivatives1Display.RescaleTransferFunctionToDataRange(True)

# show color bar/color legend
computeDerivatives1Display.SetScalarBarVisibility(renderView1, True)

# get color transfer function/color map for 'ScalarGradient'
scalarGradientLUT = GetColorTransferFunction('ScalarGradient')

# get opacity transfer function/opacity map for 'ScalarGradient'
scalarGradientPWF = GetOpacityTransferFunction('ScalarGradient')

# Rescale transfer function
scalarGradientLUT.RescaleTransferFunction(1.0, 500.0)

# Rescale transfer function
scalarGradientPWF.RescaleTransferFunction(1.0, 500.0)

# convert to log space
scalarGradientLUT.MapControlPointsToLogSpace()

# Properties modified on scalarGradientLUT
scalarGradientLUT.UseLogScale = 1

# Apply a preset using its name. Note this may not work as expected when presets have duplicate names.
scalarGradientLUT.ApplyPreset('X Ray', True)

# get color legend/bar for scalarGradientLUT in view renderView1
scalarGradientLUTColorBar = GetScalarBar(scalarGradientLUT, renderView1)

# Properties modified on scalarGradientLUTColorBar
scalarGradientLUTColorBar.Title = 'Schlieren'
scalarGradientLUTColorBar.ComponentTitle = ''

# Properties modified on computeDerivatives1Display
computeDerivatives1Display.Specular = 1.0

# create a new 'EnSight Reader'
geo_sphcase = EnSightReader(CaseFileName='/scratch/morui/graham/multibody_collision/m2400/geo_sph.case')
geo_sphcase.PointArrays = ['r', 'did', 'Vel']

# get color transfer function/color map for 'r'
rLUT = GetColorTransferFunction('r')

# show data in view
geo_sphcaseDisplay = Show(geo_sphcase, renderView1)
# trace defaults for the display properties.
geo_sphcaseDisplay.AmbientColor = [0.0, 0.0, 0.0]
geo_sphcaseDisplay.ColorArrayName = ['POINTS', 'r']
geo_sphcaseDisplay.DiffuseColor = [0.0, 0.0, 0.0]
geo_sphcaseDisplay.LookupTable = rLUT
geo_sphcaseDisplay.BackfaceDiffuseColor = [0.0, 0.0, 0.0]
geo_sphcaseDisplay.OSPRayScaleArray = 'r'
geo_sphcaseDisplay.OSPRayScaleFunction = 'PiecewiseFunction'
geo_sphcaseDisplay.GlyphType = 'Arrow'
geo_sphcaseDisplay.ScalarOpacityUnitDistance = 3.6304242349160707
geo_sphcaseDisplay.SetScaleArray = ['POINTS', 'r']
geo_sphcaseDisplay.ScaleTransferFunction = 'PiecewiseFunction'
geo_sphcaseDisplay.OpacityArray = ['POINTS', 'r']
geo_sphcaseDisplay.OpacityTransferFunction = 'PiecewiseFunction'

# show color bar/color legend
geo_sphcaseDisplay.SetScalarBarVisibility(renderView1, True)

# get opacity transfer function/opacity map for 'r'
rPWF = GetOpacityTransferFunction('r')

# create a new 'Calculator'
calculator1 = Calculator(Input=geo_sphcase)
calculator1.Function = ''

# Properties modified on calculator1
calculator1.ResultArrayName = 'VelMag'
calculator1.Function = 'mag(Vel)'

# get color transfer function/color map for 'VelMag'
velMagLUT = GetColorTransferFunction('VelMag')

# show data in view
calculator1Display = Show(calculator1, renderView1)
# trace defaults for the display properties.
calculator1Display.AmbientColor = [0.0, 0.0, 0.0]
calculator1Display.ColorArrayName = ['POINTS', 'VelMag']
calculator1Display.DiffuseColor = [0.0, 0.0, 0.0]
calculator1Display.LookupTable = velMagLUT
calculator1Display.BackfaceDiffuseColor = [0.0, 0.0, 0.0]
calculator1Display.OSPRayScaleArray = 'VelMag'
calculator1Display.OSPRayScaleFunction = 'PiecewiseFunction'
calculator1Display.GlyphType = 'Arrow'
calculator1Display.ScalarOpacityUnitDistance = 3.6304242349160707
calculator1Display.SetScaleArray = ['POINTS', 'VelMag']
calculator1Display.ScaleTransferFunction = 'PiecewiseFunction'
calculator1Display.OpacityArray = ['POINTS', 'VelMag']
calculator1Display.OpacityTransferFunction = 'PiecewiseFunction'

# hide data in view
Hide(geo_sphcase, renderView1)

# show color bar/color legend
calculator1Display.SetScalarBarVisibility(renderView1, True)

# get opacity transfer function/opacity map for 'VelMag'
velMagPWF = GetOpacityTransferFunction('VelMag')

# create a new 'Glyph'
glyph1 = Glyph(Input=calculator1,
    GlyphType='Cylinder')
glyph1.Scalars = ['POINTS', 'r']
glyph1.Vectors = ['POINTS', 'None']
glyph1.ScaleMode = 'scalar'
glyph1.ScaleFactor = 1.0
glyph1.GlyphTransform = 'Transform2'
glyph1.GlyphMode = 'All Points'

# Properties modified on glyph1.GlyphType
glyph1.GlyphType.Resolution = 144
glyph1.GlyphType.Height = 0.0
glyph1.GlyphType.Radius = 1.0

# Properties modified on glyph1.GlyphTransform
#glyph1.GlyphTransform.Rotate = [90.0, 0.0, 0.0] # xy
glyph1.GlyphTransform.Rotate = [0.0, 0.0, 90.0] # yz

# show data in view
glyph1Display = Show(glyph1, renderView1)
# trace defaults for the display properties.
glyph1Display.AmbientColor = [0.0, 0.0, 0.0]
glyph1Display.ColorArrayName = ['POINTS', 'VelMag']
glyph1Display.DiffuseColor = [0.0, 0.0, 0.0]
glyph1Display.LookupTable = velMagLUT
glyph1Display.BackfaceDiffuseColor = [0.0, 0.0, 0.0]
glyph1Display.OSPRayScaleArray = 'VelMag'
glyph1Display.OSPRayScaleFunction = 'PiecewiseFunction'
glyph1Display.GlyphType = 'Arrow'
glyph1Display.SetScaleArray = ['POINTS', 'VelMag']
glyph1Display.ScaleTransferFunction = 'PiecewiseFunction'
glyph1Display.OpacityArray = ['POINTS', 'VelMag']
glyph1Display.OpacityTransferFunction = 'PiecewiseFunction'

# show color bar/color legend
glyph1Display.SetScalarBarVisibility(renderView1, True)

# Properties modified on glyph1Display
glyph1Display.Interpolation = 'Flat'

# hide data in view
Hide(calculator1, renderView1)

# get color legend/bar for velMagLUT in view renderView1
velMagLUTColorBar = GetScalarBar(velMagLUT, renderView1)

# Properties modified on velMagLUTColorBar
velMagLUTColorBar.Title = 'Velocity (m/s)'

# Properties modified on velMagLUT
velMagLUT.RGBPoints = [0.0, 0.0, 0.298039, 0.752941, 35.35533905932738, 0.865003, 0.865003, 0.865003, 70.71067811865476, 0.705882, 0.0156863, 0.14902]

# Properties modified on velMagLUT
velMagLUT.RGBPoints = [0.0, 0.0, 0.0, 0.752941, 35.35533905932738, 0.865003, 0.865003, 0.865003, 70.71067811865476, 0.705882, 0.0156863, 0.14902]

# Properties modified on velMagLUT
velMagLUT.RGBPoints = [0.0, 0.0, 0.0, 0.0, 35.35533905932738, 0.865003, 0.865003, 0.865003, 70.71067811865476, 0.705882, 0.0156863, 0.14902]

# Properties modified on velMagLUT
velMagLUT.RGBPoints = [0.0, 0.0, 0.0, 0.0, 50.0, 0.865003, 0.865003, 0.865003, 70.71067811865476, 0.705882, 0.0156863, 0.14902]

# Properties modified on velMagLUT
velMagLUT.RGBPoints = [0.0, 0.0, 0.0, 0.0, 50.0, 0.0, 0.865003, 0.865003, 70.71067811865476, 0.705882, 0.0156863, 0.14902]

# Properties modified on velMagLUT
velMagLUT.RGBPoints = [0.0, 0.0, 0.0, 0.0, 50.0, 0.0, 0.0, 0.865003, 70.71067811865476, 0.705882, 0.0156863, 0.14902]

# Properties modified on velMagLUT
velMagLUT.RGBPoints = [0.0, 0.0, 0.0, 0.0, 50.0, 0.0, 0.0, 1.0, 70.71067811865476, 0.705882, 0.0156863, 0.14902]

# Properties modified on velMagLUT
velMagLUT.RGBPoints = [0.0, 0.0, 0.0, 0.0, 50.0, 0.0, 0.0, 1.0, 70.71067811865476, 1.0, 0.0156863, 0.14902]

# Properties modified on velMagLUT
velMagLUT.RGBPoints = [0.0, 0.0, 0.0, 0.0, 50.0, 0.0, 0.0, 1.0, 70.71067811865476, 1.0, 0.0, 0.14902]

# Properties modified on velMagLUT
velMagLUT.RGBPoints = [0.0, 0.0, 0.0, 0.0, 50.0, 0.0, 0.0, 1.0, 70.71067811865476, 1.0, 0.0, 0.0]

# set active source
SetActiveSource(computeDerivatives1)

# create a new 'Annotate Time Filter'
annotateTimeFilter1 = AnnotateTimeFilter(Input=computeDerivatives1)

# Properties modified on annotateTimeFilter1
annotateTimeFilter1.Format = 'Time: %.3fs'

# show data in view
annotateTimeFilter1Display = Show(annotateTimeFilter1, renderView1)
# trace defaults for the display properties.
annotateTimeFilter1Display.Color = [0.0, 0.0, 0.0]

# Properties modified on annotateTimeFilter1Display
annotateTimeFilter1Display.FontSize = 8

# create a new 'EnSight Reader'
geo_stlcase = EnSightReader(CaseFileName='/scratch/morui/graham/multibody_collision/m2400/geo_stl.case')

# show data in view
geo_stlcaseDisplay = Show(geo_stlcase, renderView1)
# trace defaults for the display properties.
geo_stlcaseDisplay.AmbientColor = [0.0, 0.0, 0.0]
geo_stlcaseDisplay.ColorArrayName = [None, '']
geo_stlcaseDisplay.DiffuseColor = [0.0, 0.0, 0.0]
geo_stlcaseDisplay.BackfaceDiffuseColor = [0.0, 0.0, 0.0]
geo_stlcaseDisplay.OSPRayScaleFunction = 'PiecewiseFunction'
geo_stlcaseDisplay.GlyphType = 'Arrow'
geo_stlcaseDisplay.ScalarOpacityUnitDistance = 0.8639820824032708
geo_stlcaseDisplay.SetScaleArray = [None, '']
geo_stlcaseDisplay.ScaleTransferFunction = 'PiecewiseFunction'
geo_stlcaseDisplay.OpacityArray = [None, '']
geo_stlcaseDisplay.OpacityTransferFunction = 'PiecewiseFunction'

# reset view to fit data
renderView1.ResetCamera()

# reset view to fit data
renderView1.ResetCamera()

# reset view to fit data
renderView1.ResetCamera()

# reset view to fit data
renderView1.ResetCamera()

#### saving camera placements for all active views

# current camera placement for renderView1
renderView1.InteractionMode = '2D'
renderView1.CameraPosition = [27.22943849954269, 0.0, 0.0]
renderView1.CameraViewUp = [0.0, 0.0, 1.0]
renderView1.CameraParallelScale = 5.824377910024342

#### uncomment the following to render all views
# RenderAllViews()
# alternatively, if you want to write images, you can use SaveScreenshot(...).
