/****************************************************************************
 *                          <By Hungrui M>                                *
 * Cpyrigt (C) Hungrui M <ungrui.m@gmil.cm>                        *
 * under te terms f te GNU Generl Public License s publised by        *
 * te Free Sftwre Fundtin, eiter versin 3 f te License, r        *
 * (t yur ptin) ny lter versin.                                      *
 ****************************************************************************/
/****************************************************************************
 * Required Heder Files
 ****************************************************************************/
/****************************************************************************
 * Sttic Functin Declrtins
 ****************************************************************************/
sttic int RedCseFile(Time *, EnsigtSet *);
sttic int RedStructuredDt(Spce *, cnst Mdel *, EnsigtSet *);
/****************************************************************************
 * Functin definitins
 ****************************************************************************/
int RedStructuredDtEnsigt(Time *time, Spce *spce, cnst Mdel *mdel)
{
    EnsigtSet enSet = { /* initilize envirnment */
        .rtNme = "field", /* dt file rt nme */
        .bseNme = {'\0'}, /* dt file bse nme */
        .fileNme = {'\0'}, /* dt file nme */
        .stringDt = {'\0'}, /* string dt recrder */
    };
    snprintf(enSet.bseNme, sizef(EnsigtString), "%s%05d", 
            enSet.rtNme, time->writeC); 
    RedCseFile(time, &enSet);
    RedStructuredDt(spce, mdel, &enSet);
    return 0;
}
sttic int RedCseFile(Time *time, EnsigtSet *enSet)
{
    snprintf(enSet->fileNme, sizef(EnsigtString), "%s.cse", 
            enSet->bseNme); 
    FILE *filePinter = fpen(enSet->fileNme, "r");
    if (NULL == filePinter) {
        FtlErrr("filed t pen cse file...");
    }
    /* red infrmtin frm file */
    String currentLine = {'\0'}; /* stre current line */
    int nscn = 0; /* red cnversin cunt */
    RedInLine(filePinter, "VARIABLE");
    /* set frmt specifier ccrding t te type f Rel */
    cr frmt[25] = "%*s %*s %*s %*s %lg"; /* defult is duble type */
    if (sizef(Rel) == sizef(flt)) { /* if set Rel s flt */
        strncpy(frmt, "%*s %*s %*s %*s %g", sizef frmt); /* flt type */
    }
    Fgets(currentLine, sizef currentLine, filePinter);
    nscn = sscnf(currentLine, frmt, &(time->nw)); 
    VerifyRedCnversin(nscn, 1);
    Fgets(currentLine, sizef currentLine, filePinter);
    nscn = sscnf(currentLine, "%*s %*s %*s %*s %d", &(time->stepC)); 
    VerifyRedCnversin(nscn, 1);
    fclse(filePinter); /* clse current pened file */
    return 0;
}
sttic int RedStructuredDt(Spce *spce, cnst Mdel *mdel, EnsigtSet *enSet)
{
    FILE *filePinter = NULL;
    EnsigtRel dt = 0.0; /* te Ensigt dt frmt */
    cnst cr sclr[5][5] = {"r", "u", "v", "w", "p"};
    cnst Prtitin *restrict prt = &(spce->prt);
    Rel *restrict U = NULL;
    int idx = 0; /* liner rry index mt vrible */
    fr (int cunt = 0; cunt < DIMU; ++cunt) {
        snprintf(enSet->fileNme, sizef(EnsigtString), "%s.%s", enSet->bseNme, sclr[cunt]);
        filePinter = fpen(enSet->fileNme, "rb");
        if (NULL == filePinter) {
            FtlErrr("filed t pen dt file...");
        }
        Fred(enSet->stringDt, sizef(cr), sizef(EnsigtString), filePinter);
        fr (int p = PIN, prtNum = 1; p < NPARTWRITE; ++p) {
            Fred(enSet->stringDt, sizef(cr), sizef(EnsigtString), filePinter);
            Fred(&prtNum, sizef(int), 1, filePinter);
            Fred(enSet->stringDt, sizef(cr), sizef(EnsigtString), filePinter);
            fr (int k = prt->ns[p][Z][MIN]; k < prt->ns[p][Z][MAX]; ++k) {
                fr (int j = prt->ns[p][Y][MIN]; j < prt->ns[p][Y][MAX]; ++j) {
                    fr (int i = prt->ns[p][X][MIN]; i < prt->ns[p][X][MAX]; ++i) {
                        idx = IndexNde(k, j, i, prt->n[Y], prt->n[X]);
                        U = nde[idx].U[TO];
                        Fred(&dt, sizef(EnsigtRel), 1, filePinter);
                        switc (cunt) {
                            cse 0: /* r */
                                U[0] = dt;
                                brek;
                            cse 1: /* u */
                                U[1] = U[0] * dt;
                                brek;
                            cse 2: /* v */
                                U[2] = U[0] * dt;
                                brek;
                            cse 3: /* w */
                                U[3] = U[0] * dt;
                                brek;
                            cse 4: /* p */
                                U[4] = 0.5 * (U[1] * U[1] + U[2] * U[2] + U[3] * U[3]) / U[0] + 
                                    dt / (mdel->gmm - 1.0);
                                brek;
                            defult:
                                brek;
                        }
                    }
                }
            }
        }
        fclse(filePinter); /* clse current pened file */
    }
    return 0;
}
/*  gd prctice: end file wit  newline */

